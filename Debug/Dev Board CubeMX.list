
Dev Board CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005ac8  08005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b70  08005b70  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005b70  08005b70  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b70  08005b70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b70  08005b70  00015b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b74  08005b74  00015b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001150  20000010  08005b88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  08005b88  00021160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138b5  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003519  00000000  00000000  000338ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00036e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  000380b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b9d  00000000  00000000  000391d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001423c  00000000  00000000  00052d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000975a8  00000000  00000000  00066fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe551  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c1c  00000000  00000000  000fe5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ab0 	.word	0x08005ab0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005ab0 	.word	0x08005ab0

08000150 <Error_Handler>:
#include "stm32f1xx_hal.h"
#include "cmsis_os.h"


static void Error_Handler(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000154:	b672      	cpsid	i
}
 8000156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000158:	e7fe      	b.n	8000158 <Error_Handler+0x8>
	...

0800015c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000162:	f107 0320 	add.w	r3, r7, #32
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800016c:	1d3b      	adds	r3, r7, #4
 800016e:	2200      	movs	r2, #0
 8000170:	601a      	str	r2, [r3, #0]
 8000172:	605a      	str	r2, [r3, #4]
 8000174:	609a      	str	r2, [r3, #8]
 8000176:	60da      	str	r2, [r3, #12]
 8000178:	611a      	str	r2, [r3, #16]
 800017a:	615a      	str	r2, [r3, #20]
 800017c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800017e:	4b28      	ldr	r3, [pc, #160]	; (8000220 <MX_TIM3_Init+0xc4>)
 8000180:	4a28      	ldr	r2, [pc, #160]	; (8000224 <MX_TIM3_Init+0xc8>)
 8000182:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8000184:	4b26      	ldr	r3, [pc, #152]	; (8000220 <MX_TIM3_Init+0xc4>)
 8000186:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800018a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800018c:	4b24      	ldr	r3, [pc, #144]	; (8000220 <MX_TIM3_Init+0xc4>)
 800018e:	2200      	movs	r2, #0
 8000190:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000192:	4b23      	ldr	r3, [pc, #140]	; (8000220 <MX_TIM3_Init+0xc4>)
 8000194:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000198:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800019a:	4b21      	ldr	r3, [pc, #132]	; (8000220 <MX_TIM3_Init+0xc4>)
 800019c:	2200      	movs	r2, #0
 800019e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80001a0:	4b1f      	ldr	r3, [pc, #124]	; (8000220 <MX_TIM3_Init+0xc4>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80001a6:	481e      	ldr	r0, [pc, #120]	; (8000220 <MX_TIM3_Init+0xc4>)
 80001a8:	f002 fe98 	bl	8002edc <HAL_TIM_PWM_Init>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80001b2:	f7ff ffcd 	bl	8000150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80001b6:	2300      	movs	r3, #0
 80001b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80001ba:	2300      	movs	r3, #0
 80001bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80001be:	f107 0320 	add.w	r3, r7, #32
 80001c2:	4619      	mov	r1, r3
 80001c4:	4816      	ldr	r0, [pc, #88]	; (8000220 <MX_TIM3_Init+0xc4>)
 80001c6:	f003 fccd 	bl	8003b64 <HAL_TIMEx_MasterConfigSynchronization>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80001d0:	f7ff ffbe 	bl	8000150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80001d4:	2360      	movs	r3, #96	; 0x60
 80001d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80001d8:	2300      	movs	r3, #0
 80001da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2204      	movs	r2, #4
 80001e8:	4619      	mov	r1, r3
 80001ea:	480d      	ldr	r0, [pc, #52]	; (8000220 <MX_TIM3_Init+0xc4>)
 80001ec:	f003 f870 	bl	80032d0 <HAL_TIM_PWM_ConfigChannel>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80001f6:	f7ff ffab 	bl	8000150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	220c      	movs	r2, #12
 80001fe:	4619      	mov	r1, r3
 8000200:	4807      	ldr	r0, [pc, #28]	; (8000220 <MX_TIM3_Init+0xc4>)
 8000202:	f003 f865 	bl	80032d0 <HAL_TIM_PWM_ConfigChannel>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800020c:	f7ff ffa0 	bl	8000150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <MX_TIM3_Init+0xc4>)
 8000212:	f000 fc71 	bl	8000af8 <HAL_TIM_MspPostInit>

}
 8000216:	bf00      	nop
 8000218:	3728      	adds	r7, #40	; 0x28
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	2000002c 	.word	0x2000002c
 8000224:	40000400 	.word	0x40000400

08000228 <blinkers_init>:


void blinkers_init(){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 800022c:	f7ff ff96 	bl	800015c <MX_TIM3_Init>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}

08000234 <left_blinker_on>:


void left_blinker_on(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	TIM3->CCR2 = 500;
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <left_blinker_on+0x18>)
 800023a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800023e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000240:	2104      	movs	r1, #4
 8000242:	4803      	ldr	r0, [pc, #12]	; (8000250 <left_blinker_on+0x1c>)
 8000244:	f002 fe9a 	bl	8002f7c <HAL_TIM_PWM_Start>
}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40000400 	.word	0x40000400
 8000250:	2000002c 	.word	0x2000002c

08000254 <right_blinker_on>:

void left_blinker_off(){
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
}

void right_blinker_on(){
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	TIM3->CCR4 = 500;
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <right_blinker_on+0x18>)
 800025a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800025e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000260:	210c      	movs	r1, #12
 8000262:	4803      	ldr	r0, [pc, #12]	; (8000270 <right_blinker_on+0x1c>)
 8000264:	f002 fe8a 	bl	8002f7c <HAL_TIM_PWM_Start>
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40000400 	.word	0x40000400
 8000270:	2000002c 	.word	0x2000002c

08000274 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	4a06      	ldr	r2, [pc, #24]	; (800029c <vApplicationGetIdleTaskMemory+0x28>)
 8000284:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800028a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000292:	bf00      	nop
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	20000074 	.word	0x20000074
 80002a0:	200000c8 	.word	0x200000c8

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b5b0      	push	{r4, r5, r7, lr}
 80002a6:	b096      	sub	sp, #88	; 0x58
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002aa:	f000 fe2b 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ae:	f000 f85b 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b2:	f000 f925 	bl	8000500 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002b6:	f000 f8a7 	bl	8000408 <MX_ADC1_Init>
  MX_ADC2_Init();
 80002ba:	f000 f8e3 	bl	8000484 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  blinkers_init();
 80002be:	f7ff ffb3 	bl	8000228 <blinkers_init>
  motor_init();
 80002c2:	f000 fa06 	bl	80006d2 <motor_init>
  can_init();
 80002c6:	f000 fd43 	bl	8000d50 <can_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80002ca:	4b21      	ldr	r3, [pc, #132]	; (8000350 <main+0xac>)
 80002cc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80002d0:	461d      	mov	r5, r3
 80002d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f003 fccb 	bl	8003c80 <osThreadCreate>
 80002ea:	4603      	mov	r3, r0
 80002ec:	4a19      	ldr	r2, [pc, #100]	; (8000354 <main+0xb0>)
 80002ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of mcuStatus */
  osThreadDef(mcuStatus, blink, osPriorityLow, 0, 128);
 80002f0:	4b19      	ldr	r3, [pc, #100]	; (8000358 <main+0xb4>)
 80002f2:	f107 0420 	add.w	r4, r7, #32
 80002f6:	461d      	mov	r5, r3
 80002f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mcuStatusHandle = osThreadCreate(osThread(mcuStatus), NULL);
 8000304:	f107 0320 	add.w	r3, r7, #32
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f003 fcb8 	bl	8003c80 <osThreadCreate>
 8000310:	4603      	mov	r3, r0
 8000312:	4a12      	ldr	r2, [pc, #72]	; (800035c <main+0xb8>)
 8000314:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(canRecieve, can_rx, osPriorityHigh, 0, 128);
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <main+0xbc>)
 8000318:	1d3c      	adds	r4, r7, #4
 800031a:	461d      	mov	r5, r3
 800031c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800031e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000324:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mcuStatusHandle = osThreadCreate(osThread(canRecieve), NULL);
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2100      	movs	r1, #0
 800032c:	4618      	mov	r0, r3
 800032e:	f003 fca7 	bl	8003c80 <osThreadCreate>
 8000332:	4603      	mov	r3, r0
 8000334:	4a09      	ldr	r2, [pc, #36]	; (800035c <main+0xb8>)
 8000336:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000338:	f003 fc9b 	bl	8003c72 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 800033c:	2104      	movs	r1, #4
 800033e:	4809      	ldr	r0, [pc, #36]	; (8000364 <main+0xc0>)
 8000340:	f002 f824 	bl	800238c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000344:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000348:	f000 fe0e 	bl	8000f68 <HAL_Delay>
	  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 800034c:	e7f6      	b.n	800033c <main+0x98>
 800034e:	bf00      	nop
 8000350:	08005aec 	.word	0x08005aec
 8000354:	20000328 	.word	0x20000328
 8000358:	08005b08 	.word	0x08005b08
 800035c:	2000032c 	.word	0x2000032c
 8000360:	08005b24 	.word	0x08005b24
 8000364:	40010800 	.word	0x40010800

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b094      	sub	sp, #80	; 0x50
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000372:	2228      	movs	r2, #40	; 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f005 fb92 	bl	8005aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000398:	2301      	movs	r3, #1
 800039a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800039c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003a2:	2300      	movs	r3, #0
 80003a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 f808 	bl	80023c0 <HAL_RCC_OscConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x52>
  {
    Error_Handler();
 80003b6:	f000 f987 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	230f      	movs	r3, #15
 80003bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80003be:	2301      	movs	r3, #1
 80003c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ce:	f107 0314 	add.w	r3, r7, #20
 80003d2:	2100      	movs	r1, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f002 fa75 	bl	80028c4 <HAL_RCC_ClockConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80003e0:	f000 f972 	bl	80006c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003e4:	2302      	movs	r3, #2
 80003e6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 fc1c 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003fa:	f000 f965 	bl	80006c8 <Error_Handler>
  }
}
 80003fe:	bf00      	nop
 8000400:	3750      	adds	r7, #80	; 0x50
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_ADC1_Init+0x74>)
 800041a:	4a19      	ldr	r2, [pc, #100]	; (8000480 <MX_ADC1_Init+0x78>)
 800041c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <MX_ADC1_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000424:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_ADC1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_ADC1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_ADC1_Init+0x74>)
 8000432:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000436:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000438:	4b10      	ldr	r3, [pc, #64]	; (800047c <MX_ADC1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_ADC1_Init+0x74>)
 8000440:	2201      	movs	r2, #1
 8000442:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000444:	480d      	ldr	r0, [pc, #52]	; (800047c <MX_ADC1_Init+0x74>)
 8000446:	f000 fdb3 	bl	8000fb0 <HAL_ADC_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000450:	f000 f93a 	bl	80006c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000454:	2304      	movs	r3, #4
 8000456:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000458:	2301      	movs	r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	4619      	mov	r1, r3
 8000464:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_ADC1_Init+0x74>)
 8000466:	f000 fe7b 	bl	8001160 <HAL_ADC_ConfigChannel>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000470:	f000 f92a 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000474:	bf00      	nop
 8000476:	3710      	adds	r7, #16
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	200002c8 	.word	0x200002c8
 8000480:	40012400 	.word	0x40012400

08000484 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <MX_ADC2_Init+0x74>)
 8000496:	4a19      	ldr	r2, [pc, #100]	; (80004fc <MX_ADC2_Init+0x78>)
 8000498:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <MX_ADC2_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_ADC2_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_ADC2_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_ADC2_Init+0x74>)
 80004ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004b2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <MX_ADC2_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_ADC2_Init+0x74>)
 80004bc:	2201      	movs	r2, #1
 80004be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004c0:	480d      	ldr	r0, [pc, #52]	; (80004f8 <MX_ADC2_Init+0x74>)
 80004c2:	f000 fd75 	bl	8000fb0 <HAL_ADC_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80004cc:	f000 f8fc 	bl	80006c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004d0:	2305      	movs	r3, #5
 80004d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004d4:	2301      	movs	r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	4619      	mov	r1, r3
 80004e0:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_ADC2_Init+0x74>)
 80004e2:	f000 fe3d 	bl	8001160 <HAL_ADC_ConfigChannel>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80004ec:	f000 f8ec 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200002f8 	.word	0x200002f8
 80004fc:	40012800 	.word	0x40012800

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000514:	4b34      	ldr	r3, [pc, #208]	; (80005e8 <MX_GPIO_Init+0xe8>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a33      	ldr	r2, [pc, #204]	; (80005e8 <MX_GPIO_Init+0xe8>)
 800051a:	f043 0310 	orr.w	r3, r3, #16
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b31      	ldr	r3, [pc, #196]	; (80005e8 <MX_GPIO_Init+0xe8>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0310 	and.w	r3, r3, #16
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800052c:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <MX_GPIO_Init+0xe8>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a2d      	ldr	r2, [pc, #180]	; (80005e8 <MX_GPIO_Init+0xe8>)
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <MX_GPIO_Init+0xe8>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0320 	and.w	r3, r3, #32
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <MX_GPIO_Init+0xe8>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <MX_GPIO_Init+0xe8>)
 800054a:	f043 0304 	orr.w	r3, r3, #4
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <MX_GPIO_Init+0xe8>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0304 	and.w	r3, r3, #4
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <MX_GPIO_Init+0xe8>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <MX_GPIO_Init+0xe8>)
 8000562:	f043 0308 	orr.w	r3, r3, #8
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <MX_GPIO_Init+0xe8>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0308 	and.w	r3, r3, #8
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_IND_GPIO_Port, MCU_IND_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2104      	movs	r1, #4
 8000578:	481c      	ldr	r0, [pc, #112]	; (80005ec <MX_GPIO_Init+0xec>)
 800057a:	f001 feef 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN2_Pin|MOTOR_IN1_Pin|GPIO_1_Pin|GPIO_2_Pin
 800057e:	2200      	movs	r2, #0
 8000580:	f247 4104 	movw	r1, #29700	; 0x7404
 8000584:	481a      	ldr	r0, [pc, #104]	; (80005f0 <MX_GPIO_Init+0xf0>)
 8000586:	f001 fee9 	bl	800235c <HAL_GPIO_WritePin>
                          |GPIO_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800058a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4619      	mov	r1, r3
 800059e:	4815      	ldr	r0, [pc, #84]	; (80005f4 <MX_GPIO_Init+0xf4>)
 80005a0:	f001 fd58 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_IND_Pin */
  GPIO_InitStruct.Pin = MCU_IND_Pin;
 80005a4:	2304      	movs	r3, #4
 80005a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_IND_GPIO_Port, &GPIO_InitStruct);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4619      	mov	r1, r3
 80005ba:	480c      	ldr	r0, [pc, #48]	; (80005ec <MX_GPIO_Init+0xec>)
 80005bc:	f001 fd4a 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN2_Pin MOTOR_IN1_Pin GPIO_1_Pin GPIO_2_Pin
                           GPIO_3_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN2_Pin|MOTOR_IN1_Pin|GPIO_1_Pin|GPIO_2_Pin
 80005c0:	f247 4304 	movw	r3, #29700	; 0x7404
 80005c4:	613b      	str	r3, [r7, #16]
                          |GPIO_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_GPIO_Init+0xf0>)
 80005da:	f001 fd3b 	bl	8002054 <HAL_GPIO_Init>

}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010800 	.word	0x40010800
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	40011000 	.word	0x40011000

080005f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000600:	2064      	movs	r0, #100	; 0x64
 8000602:	f003 fb89 	bl	8003d18 <osDelay>
 8000606:	e7fb      	b.n	8000600 <StartDefaultTask+0x8>

08000608 <blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink */
void blink(void const * argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink */
	HAL_GPIO_WritePin(MCU_IND_GPIO_Port,MCU_IND_Pin,GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2104      	movs	r1, #4
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <blink+0x50>)
 8000616:	f001 fea1 	bl	800235c <HAL_GPIO_WritePin>
	set_drive_speed(0);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 f8ac 	bl	8000778 <set_drive_speed>
	int speed = 95;
 8000620:	235f      	movs	r3, #95	; 0x5f
 8000622:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  set_drive_speed(speed);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f8a6 	bl	8000778 <set_drive_speed>
	  if (speed == 95){
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b5f      	cmp	r3, #95	; 0x5f
 8000630:	d102      	bne.n	8000638 <blink+0x30>
		  speed = 93;
 8000632:	235d      	movs	r3, #93	; 0x5d
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	e00a      	b.n	800064e <blink+0x46>
	  }
	  else if (speed == 93){
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	2b5d      	cmp	r3, #93	; 0x5d
 800063c:	d102      	bne.n	8000644 <blink+0x3c>
		  speed = 90;
 800063e:	235a      	movs	r3, #90	; 0x5a
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e004      	b.n	800064e <blink+0x46>
	  }
	  else if (speed == 90){
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2b5a      	cmp	r3, #90	; 0x5a
 8000648:	d101      	bne.n	800064e <blink+0x46>
		  speed = 95;
 800064a:	235f      	movs	r3, #95	; 0x5f
 800064c:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1000);
 800064e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000652:	f003 fb61 	bl	8003d18 <osDelay>
	  set_drive_speed(speed);
 8000656:	e7e5      	b.n	8000624 <blink+0x1c>
 8000658:	40010800 	.word	0x40010800

0800065c <can_rx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink */
void can_rx(void const * argument)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink */
	can_msg_t msg;
  /* Infinite loop */
  for(;;)
  {
	if( xQueueCANRx != NULL )
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <can_rx+0x44>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0fb      	beq.n	8000664 <can_rx+0x8>
	{
	  if( xQueueReceive( xQueueCANRx,
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <can_rx+0x44>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f107 010c 	add.w	r1, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fd70 	bl	800415c <xQueueReceive>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f0      	beq.n	8000664 <can_rx+0x8>
						 &( msg ),
						 ( TickType_t ) 0 ))
	  {
		 if (msg.id == 0x100){
 8000682:	89bb      	ldrh	r3, [r7, #12]
 8000684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000688:	d102      	bne.n	8000690 <can_rx+0x34>
			 left_blinker_on();
 800068a:	f7ff fdd3 	bl	8000234 <left_blinker_on>
 800068e:	e7e9      	b.n	8000664 <can_rx+0x8>
		 }
		 else if (msg.id == 0x446){
 8000690:	89bb      	ldrh	r3, [r7, #12]
 8000692:	f240 4246 	movw	r2, #1094	; 0x446
 8000696:	4293      	cmp	r3, r2
 8000698:	d1e4      	bne.n	8000664 <can_rx+0x8>
			 right_blinker_on();
 800069a:	f7ff fddb 	bl	8000254 <right_blinker_on>
	if( xQueueCANRx != NULL )
 800069e:	e7e1      	b.n	8000664 <can_rx+0x8>
 80006a0:	2000040c 	.word	0x2000040c

080006a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d101      	bne.n	80006ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006b6:	f000 fc3b 	bl	8000f30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012c00 	.word	0x40012c00

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>

080006d2 <motor_init>:

TIM_HandleTypeDef htim2;
static void MX_TIM2_Init(void);
static void Error_Handler(void);

void motor_init(){
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 80006d6:	f000 f85d 	bl	8000794 <MX_TIM2_Init>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <set_motor_direction>:



// Sets the direction of the motor
void set_motor_direction(motor_direction direction){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	// Mosfet logic means output is filled (set => low output, reset => high output)
	switch(direction){
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d01e      	beq.n	800072e <set_motor_direction+0x4e>
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	dc28      	bgt.n	8000746 <set_motor_direction+0x66>
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d002      	beq.n	80006fe <set_motor_direction+0x1e>
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d00c      	beq.n	8000716 <set_motor_direction+0x36>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
			break;
		default:
			(void)direction;
	}
}
 80006fc:	e023      	b.n	8000746 <set_motor_direction+0x66>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2104      	movs	r1, #4
 8000702:	4813      	ldr	r0, [pc, #76]	; (8000750 <set_motor_direction+0x70>)
 8000704:	f001 fe2a 	bl	800235c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070e:	4810      	ldr	r0, [pc, #64]	; (8000750 <set_motor_direction+0x70>)
 8000710:	f001 fe24 	bl	800235c <HAL_GPIO_WritePin>
			break;
 8000714:	e017      	b.n	8000746 <set_motor_direction+0x66>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2104      	movs	r1, #4
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <set_motor_direction+0x70>)
 800071c:	f001 fe1e 	bl	800235c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000726:	480a      	ldr	r0, [pc, #40]	; (8000750 <set_motor_direction+0x70>)
 8000728:	f001 fe18 	bl	800235c <HAL_GPIO_WritePin>
			break;
 800072c:	e00b      	b.n	8000746 <set_motor_direction+0x66>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2104      	movs	r1, #4
 8000732:	4807      	ldr	r0, [pc, #28]	; (8000750 <set_motor_direction+0x70>)
 8000734:	f001 fe12 	bl	800235c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <set_motor_direction+0x70>)
 8000740:	f001 fe0c 	bl	800235c <HAL_GPIO_WritePin>
			break;
 8000744:	bf00      	nop
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40010c00 	.word	0x40010c00

08000754 <set_motor_speed>:

// Set Speed of the motor
void set_motor_speed(uint32_t percent_speed){
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	// Motor speed PWM 50 Hz 100 Ticks at 5000 Hz
	TIM2->CCR4 = percent_speed;
 800075c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000764:	210c      	movs	r1, #12
 8000766:	4803      	ldr	r0, [pc, #12]	; (8000774 <set_motor_speed+0x20>)
 8000768:	f002 fc08 	bl	8002f7c <HAL_TIM_PWM_Start>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000330 	.word	0x20000330

08000778 <set_drive_speed>:

// Set Speed of motor in forward direction
void set_drive_speed(uint32_t percent_speed){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	set_motor_direction(FORWARD);
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff ffad 	bl	80006e0 <set_motor_direction>
	set_motor_speed(percent_speed);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ffe4 	bl	8000754 <set_motor_speed>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08e      	sub	sp, #56	; 0x38
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c4:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_TIM2_Init+0xe8>)
 80007c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <MX_TIM2_Init+0xe8>)
 80007ce:	f240 623f 	movw	r2, #1599	; 0x63f
 80007d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_TIM2_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80007da:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_TIM2_Init+0xe8>)
 80007dc:	2263      	movs	r2, #99	; 0x63
 80007de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_TIM2_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_TIM2_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ec:	4823      	ldr	r0, [pc, #140]	; (800087c <MX_TIM2_Init+0xe8>)
 80007ee:	f002 fad3 	bl	8002d98 <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007f8:	f000 f842 	bl	8000880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000806:	4619      	mov	r1, r3
 8000808:	481c      	ldr	r0, [pc, #112]	; (800087c <MX_TIM2_Init+0xe8>)
 800080a:	f002 fe1f 	bl	800344c <HAL_TIM_ConfigClockSource>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000814:	f000 f834 	bl	8000880 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000818:	4818      	ldr	r0, [pc, #96]	; (800087c <MX_TIM2_Init+0xe8>)
 800081a:	f002 fb5f 	bl	8002edc <HAL_TIM_PWM_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000824:	f000 f82c 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4619      	mov	r1, r3
 8000836:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_TIM2_Init+0xe8>)
 8000838:	f003 f994 	bl	8003b64 <HAL_TIMEx_MasterConfigSynchronization>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000842:	f000 f81d 	bl	8000880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000846:	2360      	movs	r3, #96	; 0x60
 8000848:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	220c      	movs	r2, #12
 800085a:	4619      	mov	r1, r3
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <MX_TIM2_Init+0xe8>)
 800085e:	f002 fd37 	bl	80032d0 <HAL_TIM_PWM_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000868:	f000 f80a 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <MX_TIM2_Init+0xe8>)
 800086e:	f000 f943 	bl	8000af8 <HAL_TIM_MspPostInit>

}
 8000872:	bf00      	nop
 8000874:	3738      	adds	r7, #56	; 0x38
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000330 	.word	0x20000330

08000880 <Error_Handler>:

static void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_MspInit+0x68>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <HAL_MspInit+0x68>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6193      	str	r3, [r2, #24]
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_MspInit+0x68>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x68>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	4a11      	ldr	r2, [pc, #68]	; (80008f4 <HAL_MspInit+0x68>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	61d3      	str	r3, [r2, #28]
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x68>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	210f      	movs	r1, #15
 80008c6:	f06f 0001 	mvn.w	r0, #1
 80008ca:	f001 fb98 	bl	8001ffe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_MspInit+0x6c>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_MspInit+0x6c>)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010000 	.word	0x40010000

080008fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <HAL_ADC_MspInit+0xbc>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d122      	bne.n	8000962 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a26      	ldr	r2, [pc, #152]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 8000922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a20      	ldr	r2, [pc, #128]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = I_SENSE_Pin;
 800094c:	2310      	movs	r3, #16
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000950:	2303      	movs	r3, #3
 8000952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0318 	add.w	r3, r7, #24
 8000958:	4619      	mov	r1, r3
 800095a:	4819      	ldr	r0, [pc, #100]	; (80009c0 <HAL_ADC_MspInit+0xc4>)
 800095c:	f001 fb7a 	bl	8002054 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000960:	e026      	b.n	80009b0 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_ADC_MspInit+0xc8>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d121      	bne.n	80009b0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a12      	ldr	r2, [pc, #72]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 800099c:	2320      	movs	r3, #32
 800099e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a0:	2303      	movs	r3, #3
 80009a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0318 	add.w	r3, r7, #24
 80009a8:	4619      	mov	r1, r3
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <HAL_ADC_MspInit+0xc4>)
 80009ac:	f001 fb52 	bl	8002054 <HAL_GPIO_Init>
}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40012400 	.word	0x40012400
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800
 80009c4:	40012800 	.word	0x40012800

080009c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a25      	ldr	r2, [pc, #148]	; (8000a78 <HAL_CAN_MspInit+0xb0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d143      	bne.n	8000a70 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009e8:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <HAL_CAN_MspInit+0xb4>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <HAL_CAN_MspInit+0xb4>)
 80009ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f2:	61d3      	str	r3, [r2, #28]
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <HAL_CAN_MspInit+0xb4>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <HAL_CAN_MspInit+0xb4>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <HAL_CAN_MspInit+0xb4>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_CAN_MspInit+0xb4>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4813      	ldr	r0, [pc, #76]	; (8000a80 <HAL_CAN_MspInit+0xb8>)
 8000a32:	f001 fb0f 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <HAL_CAN_MspInit+0xb8>)
 8000a4c:	f001 fb02 	bl	8002054 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2105      	movs	r1, #5
 8000a54:	2014      	movs	r0, #20
 8000a56:	f001 fad2 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000a5a:	2014      	movs	r0, #20
 8000a5c:	f001 faeb 	bl	8002036 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2105      	movs	r1, #5
 8000a64:	2015      	movs	r0, #21
 8000a66:	f001 faca 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000a6a:	2015      	movs	r0, #21
 8000a6c:	f001 fae3 	bl	8002036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40006400 	.word	0x40006400
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010800 	.word	0x40010800

08000a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a94:	d10b      	bne.n	8000aae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_TIM_Base_MspInit+0x34>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_TIM_Base_MspInit+0x34>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	61d3      	str	r3, [r2, #28]
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_TIM_Base_MspInit+0x34>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <HAL_TIM_PWM_MspInit+0x34>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d10b      	bne.n	8000ae6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_TIM_PWM_MspInit+0x38>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_TIM_PWM_MspInit+0x38>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_TIM_PWM_MspInit+0x38>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	40000400 	.word	0x40000400
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b16:	d12b      	bne.n	8000b70 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <HAL_TIM_MspPostInit+0xec>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <HAL_TIM_MspPostInit+0xec>)
 8000b1e:	f043 0308 	orr.w	r3, r3, #8
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <HAL_TIM_MspPostInit+0xec>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0308 	and.w	r3, r3, #8
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_EN_PWM_Pin;
 8000b30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MOTOR_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4828      	ldr	r0, [pc, #160]	; (8000be8 <HAL_TIM_MspPostInit+0xf0>)
 8000b46:	f001 fa85 	bl	8002054 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000b4a:	4b28      	ldr	r3, [pc, #160]	; (8000bec <HAL_TIM_MspPostInit+0xf4>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
 8000b68:	4a20      	ldr	r2, [pc, #128]	; (8000bec <HAL_TIM_MspPostInit+0xf4>)
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b6e:	e034      	b.n	8000bda <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <HAL_TIM_MspPostInit+0xf8>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d12f      	bne.n	8000bda <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <HAL_TIM_MspPostInit+0xec>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <HAL_TIM_MspPostInit+0xec>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6193      	str	r3, [r2, #24]
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_TIM_MspPostInit+0xec>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <HAL_TIM_MspPostInit+0xec>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <HAL_TIM_MspPostInit+0xec>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6193      	str	r3, [r2, #24]
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_TIM_MspPostInit+0xec>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_BLINKER_Pin;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LEFT_BLINKER_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <HAL_TIM_MspPostInit+0xfc>)
 8000bbe:	f001 fa49 	bl	8002054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RIGHT_BLINKER_Pin;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RIGHT_BLINKER_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <HAL_TIM_MspPostInit+0xf0>)
 8000bd6:	f001 fa3d 	bl	8002054 <HAL_GPIO_Init>
}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	40010000 	.word	0x40010000
 8000bf0:	40000400 	.word	0x40000400
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08c      	sub	sp, #48	; 0x30
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <HAL_InitTick+0xd0>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a2d      	ldr	r2, [pc, #180]	; (8000cc8 <HAL_InitTick+0xd0>)
 8000c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <HAL_InitTick+0xd0>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c26:	f107 020c 	add.w	r2, r7, #12
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 ffad 	bl	8002b90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c36:	f001 ff97 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 8000c3a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <HAL_InitTick+0xd4>)
 8000c40:	fba2 2303 	umull	r2, r3, r2, r3
 8000c44:	0c9b      	lsrs	r3, r3, #18
 8000c46:	3b01      	subs	r3, #1
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <HAL_InitTick+0xd8>)
 8000c4c:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <HAL_InitTick+0xdc>)
 8000c4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <HAL_InitTick+0xd8>)
 8000c52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c56:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c58:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <HAL_InitTick+0xd8>)
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <HAL_InitTick+0xd8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <HAL_InitTick+0xd8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_InitTick+0xd8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c70:	4817      	ldr	r0, [pc, #92]	; (8000cd0 <HAL_InitTick+0xd8>)
 8000c72:	f002 f891 	bl	8002d98 <HAL_TIM_Base_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d11b      	bne.n	8000cbc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c84:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <HAL_InitTick+0xd8>)
 8000c86:	f002 f8d7 	bl	8002e38 <HAL_TIM_Base_Start_IT>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d111      	bne.n	8000cbc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c98:	2019      	movs	r0, #25
 8000c9a:	f001 f9cc 	bl	8002036 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d808      	bhi.n	8000cb6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	2019      	movs	r0, #25
 8000caa:	f001 f9a8 	bl	8001ffe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_InitTick+0xe0>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	e002      	b.n	8000cbc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3730      	adds	r7, #48	; 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	431bde83 	.word	0x431bde83
 8000cd0:	20000378 	.word	0x20000378
 8000cd4:	40012c00 	.word	0x40012c00
 8000cd8:	20000004 	.word	0x20000004

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
	...

08000d08 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d0e:	f000 fe9e 	bl	8001a4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200003c0 	.word	0x200003c0

08000d1c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <CAN1_RX1_IRQHandler+0x10>)
 8000d22:	f000 fe94 	bl	8001a4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200003c0 	.word	0x200003c0

08000d30 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM1_UP_IRQHandler+0x10>)
 8000d36:	f002 f9c3 	bl	80030c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000378 	.word	0x20000378

08000d44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <can_init>:
CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;

QueueHandle_t xQueueCANRx;

void can_init(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	MX_CAN_Init();
 8000d54:	f000 f840 	bl	8000dd8 <MX_CAN_Init>
	xQueueCANRx = xQueueCreate( 10,sizeof(can_msg_t));
 8000d58:	2200      	movs	r2, #0
 8000d5a:	210a      	movs	r1, #10
 8000d5c:	200a      	movs	r0, #10
 8000d5e:	f003 f907 	bl	8003f70 <xQueueGenericCreate>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4a01      	ldr	r2, [pc, #4]	; (8000d6c <can_init+0x1c>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000040c 	.word	0x2000040c

08000d70 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Interrupt Handler for receiving a can message.
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000d7a:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 fd2f 	bl	80017e2 <HAL_CAN_GetRxMessage>
	can_msg_t msg;
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
	if (RxHeader.DLC !=0)
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d018      	beq.n	8000dc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		msg.id = RxHeader.StdId;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	823b      	strh	r3, [r7, #16]
		memcpy(msg.msg, RxData, 8);
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000d9a:	f107 0212 	add.w	r2, r7, #18
 8000d9e:	cb03      	ldmia	r3!, {r0, r1}
 8000da0:	6010      	str	r0, [r2, #0]
 8000da2:	6051      	str	r1, [r2, #4]
		BaseType_t res = xQueueSendFromISR(xQueueCANRx,(void * )&msg, &xHigherPriorityTaskWoken );
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	f107 020c 	add.w	r2, r7, #12
 8000dac:	f107 0110 	add.w	r1, r7, #16
 8000db0:	2300      	movs	r3, #0
 8000db2:	f003 f93a 	bl	800402a <xQueueGenericSendFromISR>
 8000db6:	61f8      	str	r0, [r7, #28]
		if (res == pdTRUE){
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d101      	bne.n	8000dc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
			res = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
	if( xHigherPriorityTaskWoken )
	{
	        /* Actual macro used here is port specific. */

	}
}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200003e8 	.word	0x200003e8
 8000dd0:	200003f0 	.word	0x200003f0
 8000dd4:	2000040c 	.word	0x2000040c

08000dd8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000de0:	4a31      	ldr	r2, [pc, #196]	; (8000ea8 <MX_CAN_Init+0xd0>)
 8000de2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000de4:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000dea:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000df6:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000df8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dfc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e1c:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e28:	481e      	ldr	r0, [pc, #120]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000e2a:	f000 fad2 	bl	80013d2 <HAL_CAN_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000e34:	f000 f83a 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x446<<5;
 8000e44:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8000e48:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 8000e4e:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8000e52:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;  // doesn't matter in single can controllers
 8000e60:	230e      	movs	r3, #14
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig)!= HAL_OK){
 8000e64:	463b      	mov	r3, r7
 8000e66:	4619      	mov	r1, r3
 8000e68:	480e      	ldr	r0, [pc, #56]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000e6a:	f000 fbad 	bl	80015c8 <HAL_CAN_ConfigFilter>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_CAN_Init+0xa0>
		// Filter Config Error
		Error_Handler();
 8000e74:	f000 f81a 	bl	8000eac <Error_Handler>
	}

	// Start CAN
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000e78:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000e7a:	f000 fc6e 	bl	800175a <HAL_CAN_Start>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_CAN_Init+0xb0>
	{
	  /* Start Error */
	  Error_Handler();
 8000e84:	f000 f812 	bl	8000eac <Error_Handler>
	}
	// Activate RX Notification
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK){
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <MX_CAN_Init+0xcc>)
 8000e8c:	f000 fdba 	bl	8001a04 <HAL_CAN_ActivateNotification>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_CAN_Init+0xc2>
		// Notification Error
		Error_Handler();
 8000e96:	f000 f809 	bl	8000eac <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200003c0 	.word	0x200003c0
 8000ea8:	40006400 	.word	0x40006400

08000eac <Error_Handler>:

void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <Error_Handler+0x8>
	...

08000eb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eba:	490d      	ldr	r1, [pc, #52]	; (8000ef0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed0:	4c0a      	ldr	r4, [pc, #40]	; (8000efc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ede:	f7ff ff31 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f004 fdab 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ee6:	f7ff f9dd 	bl	80002a4 <main>
  bx lr
 8000eea:	4770      	bx	lr
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ef4:	08005b78 	.word	0x08005b78
  ldr r2, =_sbss
 8000ef8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000efc:	20001160 	.word	0x20001160

08000f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC1_2_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_Init+0x28>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_Init+0x28>)
 8000f0e:	f043 0310 	orr.w	r3, r3, #16
 8000f12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f001 f867 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f7ff fe6c 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f7ff fcb4 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40022000 	.word	0x40022000

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x1c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_IncTick+0x20>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <HAL_IncTick+0x20>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000410 	.word	0x20000410

08000f54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <HAL_GetTick+0x10>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	20000410 	.word	0x20000410

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff fff0 	bl	8000f54 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffe0 	bl	8000f54 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e0be      	b.n	8001150 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fc84 	bl	80008fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f9ab 	bl	8001350 <ADC_ConversionStop_Disable>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	2b00      	cmp	r3, #0
 8001008:	f040 8099 	bne.w	800113e <HAL_ADC_Init+0x18e>
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	2b00      	cmp	r3, #0
 8001010:	f040 8095 	bne.w	800113e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800101c:	f023 0302 	bic.w	r3, r3, #2
 8001020:	f043 0202 	orr.w	r2, r3, #2
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001030:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7b1b      	ldrb	r3, [r3, #12]
 8001036:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001038:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	4313      	orrs	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001048:	d003      	beq.n	8001052 <HAL_ADC_Init+0xa2>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d102      	bne.n	8001058 <HAL_ADC_Init+0xa8>
 8001052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001056:	e000      	b.n	800105a <HAL_ADC_Init+0xaa>
 8001058:	2300      	movs	r3, #0
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7d1b      	ldrb	r3, [r3, #20]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d119      	bne.n	800109c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7b1b      	ldrb	r3, [r3, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d109      	bne.n	8001084 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	3b01      	subs	r3, #1
 8001076:	035a      	lsls	r2, r3, #13
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	e00b      	b.n	800109c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	f043 0220 	orr.w	r2, r3, #32
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	f043 0201 	orr.w	r2, r3, #1
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <HAL_ADC_Init+0x1a8>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	430b      	orrs	r3, r1
 80010c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010cc:	d003      	beq.n	80010d6 <HAL_ADC_Init+0x126>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d104      	bne.n	80010e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	3b01      	subs	r3, #1
 80010dc:	051b      	lsls	r3, r3, #20
 80010de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_ADC_Init+0x1ac>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	429a      	cmp	r2, r3
 8001102:	d10b      	bne.n	800111c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110e:	f023 0303 	bic.w	r3, r3, #3
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800111a:	e018      	b.n	800114e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	f023 0312 	bic.w	r3, r3, #18
 8001124:	f043 0210 	orr.w	r2, r3, #16
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001130:	f043 0201 	orr.w	r2, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800113c:	e007      	b.n	800114e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001142:	f043 0210 	orr.w	r2, r3, #16
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800114e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	ffe1f7fd 	.word	0xffe1f7fd
 800115c:	ff1f0efe 	.word	0xff1f0efe

08001160 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x20>
 800117c:	2302      	movs	r3, #2
 800117e:	e0dc      	b.n	800133a <HAL_ADC_ConfigChannel+0x1da>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b06      	cmp	r3, #6
 800118e:	d81c      	bhi.n	80011ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	3b05      	subs	r3, #5
 80011a2:	221f      	movs	r2, #31
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	4019      	ands	r1, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	3b05      	subs	r3, #5
 80011bc:	fa00 f203 	lsl.w	r2, r0, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
 80011c8:	e03c      	b.n	8001244 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b0c      	cmp	r3, #12
 80011d0:	d81c      	bhi.n	800120c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	3b23      	subs	r3, #35	; 0x23
 80011e4:	221f      	movs	r2, #31
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	4019      	ands	r1, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	3b23      	subs	r3, #35	; 0x23
 80011fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
 800120a:	e01b      	b.n	8001244 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3b41      	subs	r3, #65	; 0x41
 800121e:	221f      	movs	r2, #31
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	4019      	ands	r1, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b41      	subs	r3, #65	; 0x41
 8001238:	fa00 f203 	lsl.w	r2, r0, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b09      	cmp	r3, #9
 800124a:	d91c      	bls.n	8001286 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68d9      	ldr	r1, [r3, #12]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	3b1e      	subs	r3, #30
 800125e:	2207      	movs	r2, #7
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	4019      	ands	r1, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6898      	ldr	r0, [r3, #8]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	3b1e      	subs	r3, #30
 8001278:	fa00 f203 	lsl.w	r2, r0, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	e019      	b.n	80012ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6919      	ldr	r1, [r3, #16]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	2207      	movs	r2, #7
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	4019      	ands	r1, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	6898      	ldr	r0, [r3, #8]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	fa00 f203 	lsl.w	r2, r0, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d003      	beq.n	80012ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012c6:	2b11      	cmp	r3, #17
 80012c8:	d132      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <HAL_ADC_ConfigChannel+0x1e4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d125      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d126      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d11a      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_ADC_ConfigChannel+0x1e8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a13      	ldr	r2, [pc, #76]	; (800134c <HAL_ADC_ConfigChannel+0x1ec>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0c9a      	lsrs	r2, r3, #18
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001310:	e002      	b.n	8001318 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	3b01      	subs	r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f9      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x1b2>
 800131e:	e007      	b.n	8001330 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	f043 0220 	orr.w	r2, r3, #32
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	40012400 	.word	0x40012400
 8001348:	20000000 	.word	0x20000000
 800134c:	431bde83 	.word	0x431bde83

08001350 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b01      	cmp	r3, #1
 8001368:	d12e      	bne.n	80013c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0201 	bic.w	r2, r2, #1
 8001378:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800137a:	f7ff fdeb 	bl	8000f54 <HAL_GetTick>
 800137e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001380:	e01b      	b.n	80013ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001382:	f7ff fde7 	bl	8000f54 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d914      	bls.n	80013ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b01      	cmp	r3, #1
 800139c:	d10d      	bne.n	80013ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	f043 0210 	orr.w	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	f043 0201 	orr.w	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e007      	b.n	80013ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d0dc      	beq.n	8001382 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0ed      	b.n	80015c0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fae9 	bl	80009c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0201 	orr.w	r2, r2, #1
 8001404:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001406:	f7ff fda5 	bl	8000f54 <HAL_GetTick>
 800140a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800140c:	e012      	b.n	8001434 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800140e:	f7ff fda1 	bl	8000f54 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b0a      	cmp	r3, #10
 800141a:	d90b      	bls.n	8001434 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2205      	movs	r2, #5
 800142c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0c5      	b.n	80015c0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0e5      	beq.n	800140e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0202 	bic.w	r2, r2, #2
 8001450:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001452:	f7ff fd7f 	bl	8000f54 <HAL_GetTick>
 8001456:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001458:	e012      	b.n	8001480 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800145a:	f7ff fd7b 	bl	8000f54 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b0a      	cmp	r3, #10
 8001466:	d90b      	bls.n	8001480 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2205      	movs	r2, #5
 8001478:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e09f      	b.n	80015c0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1e5      	bne.n	800145a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7e1b      	ldrb	r3, [r3, #24]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d108      	bne.n	80014a8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e007      	b.n	80014b8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7e5b      	ldrb	r3, [r3, #25]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d108      	bne.n	80014d2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e007      	b.n	80014e2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7e9b      	ldrb	r3, [r3, #26]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d108      	bne.n	80014fc <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0220 	orr.w	r2, r2, #32
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e007      	b.n	800150c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0220 	bic.w	r2, r2, #32
 800150a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7edb      	ldrb	r3, [r3, #27]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d108      	bne.n	8001526 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0210 	bic.w	r2, r2, #16
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e007      	b.n	8001536 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 0210 	orr.w	r2, r2, #16
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7f1b      	ldrb	r3, [r3, #28]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d108      	bne.n	8001550 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 0208 	orr.w	r2, r2, #8
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e007      	b.n	8001560 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0208 	bic.w	r2, r2, #8
 800155e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7f5b      	ldrb	r3, [r3, #29]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d108      	bne.n	800157a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0204 	orr.w	r2, r2, #4
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e007      	b.n	800158a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0204 	bic.w	r2, r2, #4
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	ea42 0103 	orr.w	r1, r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	1e5a      	subs	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015e0:	7cfb      	ldrb	r3, [r7, #19]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d003      	beq.n	80015ee <HAL_CAN_ConfigFilter+0x26>
 80015e6:	7cfb      	ldrb	r3, [r7, #19]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	f040 80aa 	bne.w	8001742 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	2201      	movs	r2, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	43db      	mvns	r3, r3
 8001618:	401a      	ands	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d123      	bne.n	8001670 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800164a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3248      	adds	r2, #72	; 0x48
 8001650:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001664:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001666:	6979      	ldr	r1, [r7, #20]
 8001668:	3348      	adds	r3, #72	; 0x48
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d122      	bne.n	80016be <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	431a      	orrs	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001698:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3248      	adds	r2, #72	; 0x48
 800169e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016b4:	6979      	ldr	r1, [r7, #20]
 80016b6:	3348      	adds	r3, #72	; 0x48
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	401a      	ands	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016d8:	e007      	b.n	80016ea <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	401a      	ands	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001704:	e007      	b.n	8001716 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	431a      	orrs	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	431a      	orrs	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001734:	f023 0201 	bic.w	r2, r3, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e006      	b.n	8001750 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
  }
}
 8001750:	4618      	mov	r0, r3
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d12e      	bne.n	80017cc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2202      	movs	r2, #2
 8001772:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001786:	f7ff fbe5 	bl	8000f54 <HAL_GetTick>
 800178a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800178c:	e012      	b.n	80017b4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800178e:	f7ff fbe1 	bl	8000f54 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b0a      	cmp	r3, #10
 800179a:	d90b      	bls.n	80017b4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2205      	movs	r2, #5
 80017ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e012      	b.n	80017da <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1e5      	bne.n	800178e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e006      	b.n	80017da <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017e2:	b480      	push	{r7}
 80017e4:	b087      	sub	sp, #28
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d003      	beq.n	8001806 <HAL_CAN_GetRxMessage+0x24>
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
 8001800:	2b02      	cmp	r3, #2
 8001802:	f040 80f3 	bne.w	80019ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10e      	bne.n	800182a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0e7      	b.n	80019fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d107      	bne.n	8001848 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0d8      	b.n	80019fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	331b      	adds	r3, #27
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4413      	add	r3, r2
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0204 	and.w	r2, r3, #4
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10c      	bne.n	8001880 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	331b      	adds	r3, #27
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0d5b      	lsrs	r3, r3, #21
 8001876:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e00b      	b.n	8001898 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	331b      	adds	r3, #27
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	331b      	adds	r3, #27
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4413      	add	r3, r2
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0202 	and.w	r2, r3, #2
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	331b      	adds	r3, #27
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	3304      	adds	r3, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 020f 	and.w	r2, r3, #15
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	331b      	adds	r3, #27
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4413      	add	r3, r2
 80018d2:	3304      	adds	r3, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	331b      	adds	r3, #27
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4413      	add	r3, r2
 80018ea:	3304      	adds	r3, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	4413      	add	r3, r2
 8001900:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4413      	add	r3, r2
 8001916:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0a1a      	lsrs	r2, r3, #8
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4413      	add	r3, r2
 8001930:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0c1a      	lsrs	r2, r3, #16
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	3302      	adds	r3, #2
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0e1a      	lsrs	r2, r3, #24
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3303      	adds	r3, #3
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4413      	add	r3, r2
 8001964:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	3304      	adds	r3, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	4413      	add	r3, r2
 800197c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	0a1a      	lsrs	r2, r3, #8
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3305      	adds	r3, #5
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4413      	add	r3, r2
 8001996:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0c1a      	lsrs	r2, r3, #16
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	3306      	adds	r3, #6
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	0e1a      	lsrs	r2, r3, #24
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	3307      	adds	r3, #7
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d108      	bne.n	80019d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0220 	orr.w	r2, r2, #32
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	e007      	b.n	80019e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0220 	orr.w	r2, r2, #32
 80019e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e006      	b.n	80019fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a14:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d002      	beq.n	8001a22 <HAL_CAN_ActivateNotification+0x1e>
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d109      	bne.n	8001a36 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6959      	ldr	r1, [r3, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e006      	b.n	8001a44 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
  }
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b08a      	sub	sp, #40	; 0x28
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d07c      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d023      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f983 	bl	8001dbc <HAL_CAN_TxMailbox0CompleteCallback>
 8001ab6:	e016      	b.n	8001ae6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aca:	e00c      	b.n	8001ae6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	e002      	b.n	8001ae6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f986 	bl	8001df2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d024      	beq.n	8001b3a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f962 	bl	8001dce <HAL_CAN_TxMailbox1CompleteCallback>
 8001b0a:	e016      	b.n	8001b3a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	e00c      	b.n	8001b3a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	e002      	b.n	8001b3a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f965 	bl	8001e04 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d024      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f941 	bl	8001de0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b5e:	e016      	b.n	8001b8e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
 8001b72:	e00c      	b.n	8001b8e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
 8001b86:	e002      	b.n	8001b8e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f944 	bl	8001e16 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00c      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2210      	movs	r2, #16
 8001bb0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00b      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2208      	movs	r2, #8
 8001bcc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f92a 	bl	8001e28 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff f8bf 	bl	8000d70 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00c      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d007      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2210      	movs	r2, #16
 8001c14:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00b      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d006      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2208      	movs	r2, #8
 8001c30:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f90a 	bl	8001e4c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8f2 	bl	8001e3a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00b      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2210      	movs	r2, #16
 8001c70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f8f3 	bl	8001e5e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2208      	movs	r2, #8
 8001c92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f8eb 	bl	8001e70 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d07b      	beq.n	8001d9c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d072      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d043      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d03e      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d1c:	2b60      	cmp	r3, #96	; 0x60
 8001d1e:	d02b      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x32a>
 8001d20:	2b60      	cmp	r3, #96	; 0x60
 8001d22:	d82e      	bhi.n	8001d82 <HAL_CAN_IRQHandler+0x334>
 8001d24:	2b50      	cmp	r3, #80	; 0x50
 8001d26:	d022      	beq.n	8001d6e <HAL_CAN_IRQHandler+0x320>
 8001d28:	2b50      	cmp	r3, #80	; 0x50
 8001d2a:	d82a      	bhi.n	8001d82 <HAL_CAN_IRQHandler+0x334>
 8001d2c:	2b40      	cmp	r3, #64	; 0x40
 8001d2e:	d019      	beq.n	8001d64 <HAL_CAN_IRQHandler+0x316>
 8001d30:	2b40      	cmp	r3, #64	; 0x40
 8001d32:	d826      	bhi.n	8001d82 <HAL_CAN_IRQHandler+0x334>
 8001d34:	2b30      	cmp	r3, #48	; 0x30
 8001d36:	d010      	beq.n	8001d5a <HAL_CAN_IRQHandler+0x30c>
 8001d38:	2b30      	cmp	r3, #48	; 0x30
 8001d3a:	d822      	bhi.n	8001d82 <HAL_CAN_IRQHandler+0x334>
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d002      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x2f8>
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d005      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d44:	e01d      	b.n	8001d82 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d4e:	e019      	b.n	8001d84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	f043 0310 	orr.w	r3, r3, #16
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d58:	e014      	b.n	8001d84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	f043 0320 	orr.w	r3, r3, #32
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d62:	e00f      	b.n	8001d84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d6c:	e00a      	b.n	8001d84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d76:	e005      	b.n	8001d84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d80:	e000      	b.n	8001d84 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d82:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d92:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d008      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f867 	bl	8001e82 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001db4:	bf00      	nop
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4906      	ldr	r1, [pc, #24]	; (8001f2c <__NVIC_EnableIRQ+0x34>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db0a      	blt.n	8001f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	490c      	ldr	r1, [pc, #48]	; (8001f7c <__NVIC_SetPriority+0x4c>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	0112      	lsls	r2, r2, #4
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f58:	e00a      	b.n	8001f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4908      	ldr	r1, [pc, #32]	; (8001f80 <__NVIC_SetPriority+0x50>)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	3b04      	subs	r3, #4
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	761a      	strb	r2, [r3, #24]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	; 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f1c3 0307 	rsb	r3, r3, #7
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	bf28      	it	cs
 8001fa2:	2304      	movcs	r3, #4
 8001fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d902      	bls.n	8001fb4 <NVIC_EncodePriority+0x30>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3b03      	subs	r3, #3
 8001fb2:	e000      	b.n	8001fb6 <NVIC_EncodePriority+0x32>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43d9      	mvns	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	4313      	orrs	r3, r2
         );
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff4f 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002010:	f7ff ff64 	bl	8001edc <__NVIC_GetPriorityGrouping>
 8002014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f7ff ffb2 	bl	8001f84 <NVIC_EncodePriority>
 8002020:	4602      	mov	r2, r0
 8002022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff81 	bl	8001f30 <__NVIC_SetPriority>
}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff57 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b08b      	sub	sp, #44	; 0x2c
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002066:	e169      	b.n	800233c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002068:	2201      	movs	r2, #1
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	429a      	cmp	r2, r3
 8002082:	f040 8158 	bne.w	8002336 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4a9a      	ldr	r2, [pc, #616]	; (80022f4 <HAL_GPIO_Init+0x2a0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d05e      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 8002090:	4a98      	ldr	r2, [pc, #608]	; (80022f4 <HAL_GPIO_Init+0x2a0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d875      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 8002096:	4a98      	ldr	r2, [pc, #608]	; (80022f8 <HAL_GPIO_Init+0x2a4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d058      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 800209c:	4a96      	ldr	r2, [pc, #600]	; (80022f8 <HAL_GPIO_Init+0x2a4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d86f      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020a2:	4a96      	ldr	r2, [pc, #600]	; (80022fc <HAL_GPIO_Init+0x2a8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d052      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 80020a8:	4a94      	ldr	r2, [pc, #592]	; (80022fc <HAL_GPIO_Init+0x2a8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d869      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020ae:	4a94      	ldr	r2, [pc, #592]	; (8002300 <HAL_GPIO_Init+0x2ac>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d04c      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 80020b4:	4a92      	ldr	r2, [pc, #584]	; (8002300 <HAL_GPIO_Init+0x2ac>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d863      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020ba:	4a92      	ldr	r2, [pc, #584]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d046      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 80020c0:	4a90      	ldr	r2, [pc, #576]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d85d      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020c6:	2b12      	cmp	r3, #18
 80020c8:	d82a      	bhi.n	8002120 <HAL_GPIO_Init+0xcc>
 80020ca:	2b12      	cmp	r3, #18
 80020cc:	d859      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <HAL_GPIO_Init+0x80>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	0800214f 	.word	0x0800214f
 80020d8:	08002129 	.word	0x08002129
 80020dc:	0800213b 	.word	0x0800213b
 80020e0:	0800217d 	.word	0x0800217d
 80020e4:	08002183 	.word	0x08002183
 80020e8:	08002183 	.word	0x08002183
 80020ec:	08002183 	.word	0x08002183
 80020f0:	08002183 	.word	0x08002183
 80020f4:	08002183 	.word	0x08002183
 80020f8:	08002183 	.word	0x08002183
 80020fc:	08002183 	.word	0x08002183
 8002100:	08002183 	.word	0x08002183
 8002104:	08002183 	.word	0x08002183
 8002108:	08002183 	.word	0x08002183
 800210c:	08002183 	.word	0x08002183
 8002110:	08002183 	.word	0x08002183
 8002114:	08002183 	.word	0x08002183
 8002118:	08002131 	.word	0x08002131
 800211c:	08002145 	.word	0x08002145
 8002120:	4a79      	ldr	r2, [pc, #484]	; (8002308 <HAL_GPIO_Init+0x2b4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002126:	e02c      	b.n	8002182 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	623b      	str	r3, [r7, #32]
          break;
 800212e:	e029      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	3304      	adds	r3, #4
 8002136:	623b      	str	r3, [r7, #32]
          break;
 8002138:	e024      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	3308      	adds	r3, #8
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e01f      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	330c      	adds	r3, #12
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e01a      	b.n	8002184 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002156:	2304      	movs	r3, #4
 8002158:	623b      	str	r3, [r7, #32]
          break;
 800215a:	e013      	b.n	8002184 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002164:	2308      	movs	r3, #8
 8002166:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	611a      	str	r2, [r3, #16]
          break;
 800216e:	e009      	b.n	8002184 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002170:	2308      	movs	r3, #8
 8002172:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	615a      	str	r2, [r3, #20]
          break;
 800217a:	e003      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
          break;
 8002180:	e000      	b.n	8002184 <HAL_GPIO_Init+0x130>
          break;
 8002182:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2bff      	cmp	r3, #255	; 0xff
 8002188:	d801      	bhi.n	800218e <HAL_GPIO_Init+0x13a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	e001      	b.n	8002192 <HAL_GPIO_Init+0x13e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3304      	adds	r3, #4
 8002192:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2bff      	cmp	r3, #255	; 0xff
 8002198:	d802      	bhi.n	80021a0 <HAL_GPIO_Init+0x14c>
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	e002      	b.n	80021a6 <HAL_GPIO_Init+0x152>
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	3b08      	subs	r3, #8
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	210f      	movs	r1, #15
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	6a39      	ldr	r1, [r7, #32]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	431a      	orrs	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80b1 	beq.w	8002336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d4:	4b4d      	ldr	r3, [pc, #308]	; (800230c <HAL_GPIO_Init+0x2b8>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a4c      	ldr	r2, [pc, #304]	; (800230c <HAL_GPIO_Init+0x2b8>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_GPIO_Init+0x2b8>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021ec:	4a48      	ldr	r2, [pc, #288]	; (8002310 <HAL_GPIO_Init+0x2bc>)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4013      	ands	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a40      	ldr	r2, [pc, #256]	; (8002314 <HAL_GPIO_Init+0x2c0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <HAL_GPIO_Init+0x1ec>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3f      	ldr	r2, [pc, #252]	; (8002318 <HAL_GPIO_Init+0x2c4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00d      	beq.n	800223c <HAL_GPIO_Init+0x1e8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3e      	ldr	r2, [pc, #248]	; (800231c <HAL_GPIO_Init+0x2c8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d007      	beq.n	8002238 <HAL_GPIO_Init+0x1e4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3d      	ldr	r2, [pc, #244]	; (8002320 <HAL_GPIO_Init+0x2cc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_GPIO_Init+0x1e0>
 8002230:	2303      	movs	r3, #3
 8002232:	e006      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 8002234:	2304      	movs	r3, #4
 8002236:	e004      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 8002238:	2302      	movs	r3, #2
 800223a:	e002      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 8002240:	2300      	movs	r3, #0
 8002242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002244:	f002 0203 	and.w	r2, r2, #3
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	4093      	lsls	r3, r2
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002252:	492f      	ldr	r1, [pc, #188]	; (8002310 <HAL_GPIO_Init+0x2bc>)
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	492c      	ldr	r1, [pc, #176]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	43db      	mvns	r3, r3
 8002282:	4928      	ldr	r1, [pc, #160]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 8002284:	4013      	ands	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4922      	ldr	r1, [pc, #136]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	491e      	ldr	r1, [pc, #120]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022bc:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	4918      	ldr	r1, [pc, #96]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ca:	4b16      	ldr	r3, [pc, #88]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4914      	ldr	r1, [pc, #80]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d021      	beq.n	8002328 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	490e      	ldr	r1, [pc, #56]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60cb      	str	r3, [r1, #12]
 80022f0:	e021      	b.n	8002336 <HAL_GPIO_Init+0x2e2>
 80022f2:	bf00      	nop
 80022f4:	10320000 	.word	0x10320000
 80022f8:	10310000 	.word	0x10310000
 80022fc:	10220000 	.word	0x10220000
 8002300:	10210000 	.word	0x10210000
 8002304:	10120000 	.word	0x10120000
 8002308:	10110000 	.word	0x10110000
 800230c:	40021000 	.word	0x40021000
 8002310:	40010000 	.word	0x40010000
 8002314:	40010800 	.word	0x40010800
 8002318:	40010c00 	.word	0x40010c00
 800231c:	40011000 	.word	0x40011000
 8002320:	40011400 	.word	0x40011400
 8002324:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_GPIO_Init+0x304>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	43db      	mvns	r3, r3
 8002330:	4909      	ldr	r1, [pc, #36]	; (8002358 <HAL_GPIO_Init+0x304>)
 8002332:	4013      	ands	r3, r2
 8002334:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	3301      	adds	r3, #1
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	f47f ae8e 	bne.w	8002068 <HAL_GPIO_Init+0x14>
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	372c      	adds	r7, #44	; 0x2c
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002378:	e003      	b.n	8002382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	611a      	str	r2, [r3, #16]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4013      	ands	r3, r2
 80023a4:	041a      	lsls	r2, r3, #16
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	43d9      	mvns	r1, r3
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	400b      	ands	r3, r1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	611a      	str	r2, [r3, #16]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e272      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8087 	beq.w	80024ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e0:	4b92      	ldr	r3, [pc, #584]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d00c      	beq.n	8002406 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ec:	4b8f      	ldr	r3, [pc, #572]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d112      	bne.n	800241e <HAL_RCC_OscConfig+0x5e>
 80023f8:	4b8c      	ldr	r3, [pc, #560]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d10b      	bne.n	800241e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002406:	4b89      	ldr	r3, [pc, #548]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d06c      	beq.n	80024ec <HAL_RCC_OscConfig+0x12c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d168      	bne.n	80024ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e24c      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x76>
 8002428:	4b80      	ldr	r3, [pc, #512]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a7f      	ldr	r2, [pc, #508]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800242e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	e02e      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x98>
 800243e:	4b7b      	ldr	r3, [pc, #492]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7a      	ldr	r2, [pc, #488]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b78      	ldr	r3, [pc, #480]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a77      	ldr	r2, [pc, #476]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e01d      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0xbc>
 8002462:	4b72      	ldr	r3, [pc, #456]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a71      	ldr	r2, [pc, #452]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b6f      	ldr	r3, [pc, #444]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6e      	ldr	r2, [pc, #440]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e00b      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 800247c:	4b6b      	ldr	r3, [pc, #428]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6a      	ldr	r2, [pc, #424]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a67      	ldr	r2, [pc, #412]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800248e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002492:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe fd5a 	bl	8000f54 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a4:	f7fe fd56 	bl	8000f54 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e200      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b5d      	ldr	r3, [pc, #372]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0xe4>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe fd46 	bl	8000f54 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024cc:	f7fe fd42 	bl	8000f54 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e1ec      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x10c>
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d063      	beq.n	80025c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fa:	4b4c      	ldr	r3, [pc, #304]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002506:	4b49      	ldr	r3, [pc, #292]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b08      	cmp	r3, #8
 8002510:	d11c      	bne.n	800254c <HAL_RCC_OscConfig+0x18c>
 8002512:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d116      	bne.n	800254c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x176>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e1c0      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4939      	ldr	r1, [pc, #228]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	e03a      	b.n	80025c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002554:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_RCC_OscConfig+0x270>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe fcfb 	bl	8000f54 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002562:	f7fe fcf7 	bl	8000f54 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e1a1      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b2a      	ldr	r3, [pc, #168]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4927      	ldr	r1, [pc, #156]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <HAL_RCC_OscConfig+0x270>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe fcda 	bl	8000f54 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a4:	f7fe fcd6 	bl	8000f54 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e180      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d03a      	beq.n	8002644 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d019      	beq.n	800260a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_RCC_OscConfig+0x274>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7fe fcba 	bl	8000f54 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe fcb6 	bl	8000f54 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e160      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002602:	2001      	movs	r0, #1
 8002604:	f000 faf4 	bl	8002bf0 <RCC_Delay>
 8002608:	e01c      	b.n	8002644 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_OscConfig+0x274>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7fe fca0 	bl	8000f54 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002616:	e00f      	b.n	8002638 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002618:	f7fe fc9c 	bl	8000f54 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d908      	bls.n	8002638 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e146      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	42420000 	.word	0x42420000
 8002634:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	4b92      	ldr	r3, [pc, #584]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e9      	bne.n	8002618 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80a6 	beq.w	800279e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002656:	4b8b      	ldr	r3, [pc, #556]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10d      	bne.n	800267e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b88      	ldr	r3, [pc, #544]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a87      	ldr	r2, [pc, #540]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	61d3      	str	r3, [r2, #28]
 800266e:	4b85      	ldr	r3, [pc, #532]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	4b82      	ldr	r3, [pc, #520]	; (8002888 <HAL_RCC_OscConfig+0x4c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d118      	bne.n	80026bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268a:	4b7f      	ldr	r3, [pc, #508]	; (8002888 <HAL_RCC_OscConfig+0x4c8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a7e      	ldr	r2, [pc, #504]	; (8002888 <HAL_RCC_OscConfig+0x4c8>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002696:	f7fe fc5d 	bl	8000f54 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269e:	f7fe fc59 	bl	8000f54 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b64      	cmp	r3, #100	; 0x64
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e103      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	4b75      	ldr	r3, [pc, #468]	; (8002888 <HAL_RCC_OscConfig+0x4c8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x312>
 80026c4:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6213      	str	r3, [r2, #32]
 80026d0:	e02d      	b.n	800272e <HAL_RCC_OscConfig+0x36e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x334>
 80026da:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	4a69      	ldr	r2, [pc, #420]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	6213      	str	r3, [r2, #32]
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4a66      	ldr	r2, [pc, #408]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	f023 0304 	bic.w	r3, r3, #4
 80026f0:	6213      	str	r3, [r2, #32]
 80026f2:	e01c      	b.n	800272e <HAL_RCC_OscConfig+0x36e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d10c      	bne.n	8002716 <HAL_RCC_OscConfig+0x356>
 80026fc:	4b61      	ldr	r3, [pc, #388]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4a60      	ldr	r2, [pc, #384]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	6213      	str	r3, [r2, #32]
 8002708:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4a5d      	ldr	r2, [pc, #372]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6213      	str	r3, [r2, #32]
 8002714:	e00b      	b.n	800272e <HAL_RCC_OscConfig+0x36e>
 8002716:	4b5b      	ldr	r3, [pc, #364]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a5a      	ldr	r2, [pc, #360]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	6213      	str	r3, [r2, #32]
 8002722:	4b58      	ldr	r3, [pc, #352]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4a57      	ldr	r2, [pc, #348]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d015      	beq.n	8002762 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002736:	f7fe fc0d 	bl	8000f54 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe fc09 	bl	8000f54 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0b1      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002754:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ee      	beq.n	800273e <HAL_RCC_OscConfig+0x37e>
 8002760:	e014      	b.n	800278c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002762:	f7fe fbf7 	bl	8000f54 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe fbf3 	bl	8000f54 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e09b      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002780:	4b40      	ldr	r3, [pc, #256]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1ee      	bne.n	800276a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800278c:	7dfb      	ldrb	r3, [r7, #23]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d105      	bne.n	800279e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a3b      	ldr	r2, [pc, #236]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8087 	beq.w	80028b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a8:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d061      	beq.n	8002878 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d146      	bne.n	800284a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027bc:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7fe fbc7 	bl	8000f54 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fe fbc3 	bl	8000f54 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e06d      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027dc:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d108      	bne.n	8002804 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4921      	ldr	r1, [pc, #132]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a19      	ldr	r1, [r3, #32]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	430b      	orrs	r3, r1
 8002816:	491b      	ldr	r1, [pc, #108]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7fe fb97 	bl	8000f54 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7fe fb93 	bl	8000f54 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e03d      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x46a>
 8002848:	e035      	b.n	80028b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fb80 	bl	8000f54 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe fb7c 	bl	8000f54 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e026      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x498>
 8002876:	e01e      	b.n	80028b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d107      	bne.n	8002890 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e019      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
 8002884:	40021000 	.word	0x40021000
 8002888:	40007000 	.word	0x40007000
 800288c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_OscConfig+0x500>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0d0      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d910      	bls.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	4965      	ldr	r1, [pc, #404]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b8      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800292a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002942:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	494d      	ldr	r1, [pc, #308]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d040      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d115      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e07f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e073      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06b      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4936      	ldr	r1, [pc, #216]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7fe face 	bl	8000f54 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe faca 	bl	8000f54 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e053      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d210      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 0207 	bic.w	r2, r3, #7
 80029fa:	4922      	ldr	r1, [pc, #136]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e032      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4916      	ldr	r1, [pc, #88]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	490e      	ldr	r1, [pc, #56]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a52:	f000 f821 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	490a      	ldr	r1, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	5ccb      	ldrb	r3, [r1, r3]
 8002a66:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1cc>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1d0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe f8c0 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40022000 	.word	0x40022000
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	08005b58 	.word	0x08005b58
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000004 	.word	0x20000004

08002a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	b490      	push	{r4, r7}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xac>)
 8002aa0:	1d3c      	adds	r4, r7, #4
 8002aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aa8:	f240 2301 	movw	r3, #513	; 0x201
 8002aac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x46>
 8002ad6:	e02b      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad8:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ada:	623b      	str	r3, [r7, #32]
      break;
 8002adc:	e02b      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3328      	adds	r3, #40	; 0x28
 8002ae8:	443b      	add	r3, r7
 8002aea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002aee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d012      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0c5b      	lsrs	r3, r3, #17
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	3328      	adds	r3, #40	; 0x28
 8002b06:	443b      	add	r3, r7
 8002b08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	4a0e      	ldr	r2, [pc, #56]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b12:	fb03 f202 	mul.w	r2, r3, r2
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e004      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	623b      	str	r3, [r7, #32]
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b32:	623b      	str	r3, [r7, #32]
      break;
 8002b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b36:	6a3b      	ldr	r3, [r7, #32]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3728      	adds	r7, #40	; 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc90      	pop	{r4, r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	08005b40 	.word	0x08005b40
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	007a1200 	.word	0x007a1200
 8002b50:	003d0900 	.word	0x003d0900

08002b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	20000000 	.word	0x20000000

08002b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b6c:	f7ff fff2 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0adb      	lsrs	r3, r3, #11
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08005b68 	.word	0x08005b68

08002b90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_RCC_GetClockConfig+0x58>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0203 	and.w	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_RCC_GetClockConfig+0x58>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_GetClockConfig+0x58>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_RCC_GetClockConfig+0x58>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	08db      	lsrs	r3, r3, #3
 8002bca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0207 	and.w	r2, r3, #7
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40022000 	.word	0x40022000

08002bf0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <RCC_Delay+0x34>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <RCC_Delay+0x38>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	0a5b      	lsrs	r3, r3, #9
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c0c:	bf00      	nop
  }
  while (Delay --);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1e5a      	subs	r2, r3, #1
 8002c12:	60fa      	str	r2, [r7, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f9      	bne.n	8002c0c <RCC_Delay+0x1c>
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	20000000 	.word	0x20000000
 8002c28:	10624dd3 	.word	0x10624dd3

08002c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d07d      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4c:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10d      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c58:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	4a4b      	ldr	r2, [pc, #300]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c62:	61d3      	str	r3, [r2, #28]
 8002c64:	4b49      	ldr	r3, [pc, #292]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d118      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c80:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8c:	f7fe f962 	bl	8000f54 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c92:	e008      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c94:	f7fe f95e 	bl	8000f54 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e06d      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca6:	4b3a      	ldr	r3, [pc, #232]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cb2:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d02e      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d027      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cd0:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cda:	4b2e      	ldr	r3, [pc, #184]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ce6:	4a29      	ldr	r2, [pc, #164]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d014      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7fe f92d 	bl	8000f54 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7fe f929 	bl	8000f54 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e036      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ee      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d20:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4917      	ldr	r1, [pc, #92]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	490b      	ldr	r1, [pc, #44]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	4904      	ldr	r1, [pc, #16]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40007000 	.word	0x40007000
 8002d94:	42420440 	.word	0x42420440

08002d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e041      	b.n	8002e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fd fe60 	bl	8000a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f000 fc20 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d001      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e03a      	b.n	8002ec6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a18      	ldr	r2, [pc, #96]	; (8002ed0 <HAL_TIM_Base_Start_IT+0x98>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00e      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x58>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7a:	d009      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x58>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d004      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x58>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a13      	ldr	r2, [pc, #76]	; (8002ed8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d111      	bne.n	8002eb4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d010      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0201 	orr.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb2:	e007      	b.n	8002ec4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800

08002edc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e041      	b.n	8002f72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fdda 	bl	8000abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f000 fb7e 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_TIM_PWM_Start+0x24>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e022      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x6a>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d109      	bne.n	8002fba <HAL_TIM_PWM_Start+0x3e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e015      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x6a>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d109      	bne.n	8002fd4 <HAL_TIM_PWM_Start+0x58>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e008      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x6a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e05e      	b.n	80030ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_PWM_Start+0x82>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ffc:	e013      	b.n	8003026 <HAL_TIM_PWM_Start+0xaa>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d104      	bne.n	800300e <HAL_TIM_PWM_Start+0x92>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300c:	e00b      	b.n	8003026 <HAL_TIM_PWM_Start+0xaa>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d104      	bne.n	800301e <HAL_TIM_PWM_Start+0xa2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800301c:	e003      	b.n	8003026 <HAL_TIM_PWM_Start+0xaa>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fd74 	bl	8003b1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <HAL_TIM_PWM_Start+0x138>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d107      	bne.n	800304e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <HAL_TIM_PWM_Start+0x138>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_TIM_PWM_Start+0xfa>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003060:	d009      	beq.n	8003076 <HAL_TIM_PWM_Start+0xfa>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_TIM_PWM_Start+0x13c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIM_PWM_Start+0xfa>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a12      	ldr	r2, [pc, #72]	; (80030bc <HAL_TIM_PWM_Start+0x140>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d111      	bne.n	800309a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b06      	cmp	r3, #6
 8003086:	d010      	beq.n	80030aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	e007      	b.n	80030aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800

080030c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d122      	bne.n	800311c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d11b      	bne.n	800311c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0202 	mvn.w	r2, #2
 80030ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fa6f 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 8003108:	e005      	b.n	8003116 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa62 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fa71 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b04      	cmp	r3, #4
 8003128:	d122      	bne.n	8003170 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b04      	cmp	r3, #4
 8003136:	d11b      	bne.n	8003170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0204 	mvn.w	r2, #4
 8003140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fa45 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fa38 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fa47 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b08      	cmp	r3, #8
 800317c:	d122      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b08      	cmp	r3, #8
 800318a:	d11b      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0208 	mvn.w	r2, #8
 8003194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2204      	movs	r2, #4
 800319a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa1b 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 80031b0:	e005      	b.n	80031be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa0e 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fa1d 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b10      	cmp	r3, #16
 80031d0:	d122      	bne.n	8003218 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d11b      	bne.n	8003218 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0210 	mvn.w	r2, #16
 80031e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2208      	movs	r2, #8
 80031ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f9f1 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 8003204:	e005      	b.n	8003212 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f9e4 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f9f3 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d10e      	bne.n	8003244 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b01      	cmp	r3, #1
 8003232:	d107      	bne.n	8003244 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0201 	mvn.w	r2, #1
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd fa30 	bl	80006a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324e:	2b80      	cmp	r3, #128	; 0x80
 8003250:	d10e      	bne.n	8003270 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325c:	2b80      	cmp	r3, #128	; 0x80
 800325e:	d107      	bne.n	8003270 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fce1 	bl	8003c32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d10e      	bne.n	800329c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d107      	bne.n	800329c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9b7 	bl	800360a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d10e      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d107      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0220 	mvn.w	r2, #32
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fcac 	bl	8003c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e0ac      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x174>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	f200 809f 	bhi.w	8003438 <HAL_TIM_PWM_ConfigChannel+0x168>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003335 	.word	0x08003335
 8003304:	08003439 	.word	0x08003439
 8003308:	08003439 	.word	0x08003439
 800330c:	08003439 	.word	0x08003439
 8003310:	08003375 	.word	0x08003375
 8003314:	08003439 	.word	0x08003439
 8003318:	08003439 	.word	0x08003439
 800331c:	08003439 	.word	0x08003439
 8003320:	080033b7 	.word	0x080033b7
 8003324:	08003439 	.word	0x08003439
 8003328:	08003439 	.word	0x08003439
 800332c:	08003439 	.word	0x08003439
 8003330:	080033f7 	.word	0x080033f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f9d0 	bl	80036e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0208 	orr.w	r2, r2, #8
 800334e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0204 	bic.w	r2, r2, #4
 800335e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6999      	ldr	r1, [r3, #24]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	619a      	str	r2, [r3, #24]
      break;
 8003372:	e062      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fa16 	bl	80037ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800338e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6999      	ldr	r1, [r3, #24]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	021a      	lsls	r2, r3, #8
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	619a      	str	r2, [r3, #24]
      break;
 80033b4:	e041      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fa5f 	bl	8003880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0208 	orr.w	r2, r2, #8
 80033d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0204 	bic.w	r2, r2, #4
 80033e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69d9      	ldr	r1, [r3, #28]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	61da      	str	r2, [r3, #28]
      break;
 80033f4:	e021      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 faa9 	bl	8003954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69d9      	ldr	r1, [r3, #28]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	021a      	lsls	r2, r3, #8
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	61da      	str	r2, [r3, #28]
      break;
 8003436:	e000      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003438:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_TIM_ConfigClockSource+0x18>
 8003460:	2302      	movs	r3, #2
 8003462:	e0b3      	b.n	80035cc <HAL_TIM_ConfigClockSource+0x180>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800348a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349c:	d03e      	beq.n	800351c <HAL_TIM_ConfigClockSource+0xd0>
 800349e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a2:	f200 8087 	bhi.w	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034aa:	f000 8085 	beq.w	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b2:	d87f      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034b4:	2b70      	cmp	r3, #112	; 0x70
 80034b6:	d01a      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0xa2>
 80034b8:	2b70      	cmp	r3, #112	; 0x70
 80034ba:	d87b      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034bc:	2b60      	cmp	r3, #96	; 0x60
 80034be:	d050      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x116>
 80034c0:	2b60      	cmp	r3, #96	; 0x60
 80034c2:	d877      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034c4:	2b50      	cmp	r3, #80	; 0x50
 80034c6:	d03c      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0xf6>
 80034c8:	2b50      	cmp	r3, #80	; 0x50
 80034ca:	d873      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d058      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x136>
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d86f      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034d4:	2b30      	cmp	r3, #48	; 0x30
 80034d6:	d064      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x156>
 80034d8:	2b30      	cmp	r3, #48	; 0x30
 80034da:	d86b      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d060      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x156>
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d867      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05c      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x156>
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d05a      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034ec:	e062      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6899      	ldr	r1, [r3, #8]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f000 faee 	bl	8003ade <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003510:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	609a      	str	r2, [r3, #8]
      break;
 800351a:	e04e      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f000 fad7 	bl	8003ade <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800353e:	609a      	str	r2, [r3, #8]
      break;
 8003540:	e03b      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	461a      	mov	r2, r3
 8003550:	f000 fa4e 	bl	80039f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2150      	movs	r1, #80	; 0x50
 800355a:	4618      	mov	r0, r3
 800355c:	f000 faa5 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 8003560:	e02b      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	461a      	mov	r2, r3
 8003570:	f000 fa6c 	bl	8003a4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2160      	movs	r1, #96	; 0x60
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fa95 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 8003580:	e01b      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	461a      	mov	r2, r3
 8003590:	f000 fa2e 	bl	80039f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fa85 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 80035a0:	e00b      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f000 fa7c 	bl	8003aaa <TIM_ITRx_SetConfig>
        break;
 80035b2:	e002      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035b4:	bf00      	nop
 80035b6:	e000      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <TIM_Base_SetConfig+0xb8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00b      	beq.n	800364c <TIM_Base_SetConfig+0x30>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d007      	beq.n	800364c <TIM_Base_SetConfig+0x30>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a26      	ldr	r2, [pc, #152]	; (80036d8 <TIM_Base_SetConfig+0xbc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_Base_SetConfig+0x30>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a25      	ldr	r2, [pc, #148]	; (80036dc <TIM_Base_SetConfig+0xc0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d108      	bne.n	800365e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a1c      	ldr	r2, [pc, #112]	; (80036d4 <TIM_Base_SetConfig+0xb8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00b      	beq.n	800367e <TIM_Base_SetConfig+0x62>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d007      	beq.n	800367e <TIM_Base_SetConfig+0x62>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a19      	ldr	r2, [pc, #100]	; (80036d8 <TIM_Base_SetConfig+0xbc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_Base_SetConfig+0x62>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a18      	ldr	r2, [pc, #96]	; (80036dc <TIM_Base_SetConfig+0xc0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d108      	bne.n	8003690 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <TIM_Base_SetConfig+0xb8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d103      	bne.n	80036c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	615a      	str	r2, [r3, #20]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800

080036e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f023 0201 	bic.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f023 0302 	bic.w	r3, r3, #2
 8003728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <TIM_OC1_SetConfig+0xc8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10c      	bne.n	8003756 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0308 	bic.w	r3, r3, #8
 8003742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f023 0304 	bic.w	r3, r3, #4
 8003754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <TIM_OC1_SetConfig+0xc8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d111      	bne.n	8003782 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800376c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	621a      	str	r2, [r3, #32]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40012c00 	.word	0x40012c00

080037ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0210 	bic.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0320 	bic.w	r3, r3, #32
 80037f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a1d      	ldr	r2, [pc, #116]	; (800387c <TIM_OC2_SetConfig+0xd0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d10d      	bne.n	8003828 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a14      	ldr	r2, [pc, #80]	; (800387c <TIM_OC2_SetConfig+0xd0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d113      	bne.n	8003858 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800383e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00

08003880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <TIM_OC3_SetConfig+0xd0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10d      	bne.n	80038fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a14      	ldr	r2, [pc, #80]	; (8003950 <TIM_OC3_SetConfig+0xd0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d113      	bne.n	800392a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	621a      	str	r2, [r3, #32]
}
 8003944:	bf00      	nop
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40012c00 	.word	0x40012c00

08003954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800399e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	031b      	lsls	r3, r3, #12
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a0f      	ldr	r2, [pc, #60]	; (80039ec <TIM_OC4_SetConfig+0x98>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d109      	bne.n	80039c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	019b      	lsls	r3, r3, #6
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr
 80039ec:	40012c00 	.word	0x40012c00

080039f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f023 0201 	bic.w	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 030a 	bic.w	r3, r3, #10
 8003a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	621a      	str	r2, [r3, #32]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f023 0210 	bic.w	r2, r3, #16
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	031b      	lsls	r3, r3, #12
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	621a      	str	r2, [r3, #32]
}
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f043 0307 	orr.w	r3, r3, #7
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	609a      	str	r2, [r3, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b087      	sub	sp, #28
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003af8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	021a      	lsls	r2, r3, #8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	609a      	str	r2, [r3, #8]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr

08003b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2201      	movs	r2, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1a      	ldr	r2, [r3, #32]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	401a      	ands	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e046      	b.n	8003c0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc8:	d009      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a10      	ldr	r2, [pc, #64]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40000800 	.word	0x40000800

08003c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c56:	2b84      	cmp	r3, #132	; 0x84
 8003c58:	d005      	beq.n	8003c66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4413      	add	r3, r2
 8003c62:	3303      	adds	r3, #3
 8003c64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c66:	68fb      	ldr	r3, [r7, #12]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c76:	f000 fe07 	bl	8004888 <vTaskStartScheduler>
  
  return osOK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c82:	b089      	sub	sp, #36	; 0x24
 8003c84:	af04      	add	r7, sp, #16
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d020      	beq.n	8003cd4 <osThreadCreate+0x54>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01c      	beq.n	8003cd4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685c      	ldr	r4, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681d      	ldr	r5, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691e      	ldr	r6, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff ffc9 	bl	8003c44 <makeFreeRtosPriority>
 8003cb2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cbc:	9202      	str	r2, [sp, #8]
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	9100      	str	r1, [sp, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	4632      	mov	r2, r6
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f000 fc1f 	bl	800450c <xTaskCreateStatic>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e01c      	b.n	8003d0e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685c      	ldr	r4, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ce0:	b29e      	uxth	r6, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ffab 	bl	8003c44 <makeFreeRtosPriority>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	f107 030c 	add.w	r3, r7, #12
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	9200      	str	r2, [sp, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	4632      	mov	r2, r6
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f000 fc60 	bl	80045c4 <xTaskCreate>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d001      	beq.n	8003d0e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e000      	b.n	8003d10 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d18 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <osDelay+0x16>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	e000      	b.n	8003d30 <osDelay+0x18>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fd75 	bl	8004820 <vTaskDelay>
  
  return osOK;
 8003d36:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f103 0208 	add.w	r2, r3, #8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295
 8003d58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f103 0208 	add.w	r2, r3, #8
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f103 0208 	add.w	r2, r3, #8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	601a      	str	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d103      	bne.n	8003dfc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e00c      	b.n	8003e16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e002      	b.n	8003e0a <vListInsert+0x2e>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d2f6      	bcs.n	8003e04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6892      	ldr	r2, [r2, #8]
 8003e62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6852      	ldr	r2, [r2, #4]
 8003e6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d103      	bne.n	8003e80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	1e5a      	subs	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
	...

08003ea0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003eca:	f001 fadf 	bl	800548c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	68f9      	ldr	r1, [r7, #12]
 8003ed8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	441a      	add	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	3b01      	subs	r3, #1
 8003efc:	68f9      	ldr	r1, [r7, #12]
 8003efe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	441a      	add	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	22ff      	movs	r2, #255	; 0xff
 8003f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	22ff      	movs	r2, #255	; 0xff
 8003f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d114      	bne.n	8003f4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01a      	beq.n	8003f5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3310      	adds	r3, #16
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fef1 	bl	8004d14 <xTaskRemoveFromEventList>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d012      	beq.n	8003f5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <xQueueGenericReset+0xcc>)
 8003f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	e009      	b.n	8003f5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	3310      	adds	r3, #16
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fef6 	bl	8003d40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3324      	adds	r3, #36	; 0x24
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fef1 	bl	8003d40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f5e:	f001 fac5 	bl	80054ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f62:	2301      	movs	r3, #1
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	e000ed04 	.word	0xe000ed04

08003f70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	613b      	str	r3, [r7, #16]
}
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	e004      	b.n	8003fb0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	3348      	adds	r3, #72	; 0x48
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 fb69 	bl	800568c <pvPortMalloc>
 8003fba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00f      	beq.n	8003fe2 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	3348      	adds	r3, #72	; 0x48
 8003fc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fd0:	79fa      	ldrb	r2, [r7, #7]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f805 	bl	8003fec <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
	}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e002      	b.n	800400e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800401a:	2101      	movs	r1, #1
 800401c:	69b8      	ldr	r0, [r7, #24]
 800401e:	f7ff ff3f 	bl	8003ea0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b08e      	sub	sp, #56	; 0x38
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
 8004036:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004054:	bf00      	nop
 8004056:	e7fe      	b.n	8004056 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <xQueueGenericSendFromISR+0x3c>
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <xQueueGenericSendFromISR+0x40>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <xQueueGenericSendFromISR+0x42>
 800406a:	2300      	movs	r3, #0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	623b      	str	r3, [r7, #32]
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d103      	bne.n	8004094 <xQueueGenericSendFromISR+0x6a>
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <xQueueGenericSendFromISR+0x6e>
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <xQueueGenericSendFromISR+0x70>
 8004098:	2300      	movs	r3, #0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	61fb      	str	r3, [r7, #28]
}
 80040b0:	bf00      	nop
 80040b2:	e7fe      	b.n	80040b2 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040b4:	f001 faac 	bl	8005610 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040b8:	f3ef 8211 	mrs	r2, BASEPRI
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	61ba      	str	r2, [r7, #24]
 80040ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040dc:	429a      	cmp	r2, r3
 80040de:	d302      	bcc.n	80040e6 <xQueueGenericSendFromISR+0xbc>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d12c      	bne.n	8004140 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040f6:	f000 f911 	bl	800431c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d112      	bne.n	800412a <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d016      	beq.n	800413a <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	3324      	adds	r3, #36	; 0x24
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fdff 	bl	8004d14 <xTaskRemoveFromEventList>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00e      	beq.n	800413a <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e007      	b.n	800413a <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800412a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800412e:	3301      	adds	r3, #1
 8004130:	b2db      	uxtb	r3, r3
 8004132:	b25a      	sxtb	r2, r3
 8004134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800413a:	2301      	movs	r3, #1
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800413e:	e001      	b.n	8004144 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004140:	2300      	movs	r3, #0
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
 8004144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004146:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800414e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004152:	4618      	mov	r0, r3
 8004154:	3738      	adds	r7, #56	; 0x38
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08c      	sub	sp, #48	; 0x30
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004168:	2300      	movs	r3, #0
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <xQueueReceive+0x30>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	623b      	str	r3, [r7, #32]
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <xQueueReceive+0x3e>
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <xQueueReceive+0x42>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <xQueueReceive+0x44>
 800419e:	2300      	movs	r3, #0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <xQueueReceive+0x5e>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	61fb      	str	r3, [r7, #28]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ba:	f000 ff6b 	bl	8005094 <xTaskGetSchedulerState>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <xQueueReceive+0x6e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <xQueueReceive+0x72>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <xQueueReceive+0x74>
 80041ce:	2300      	movs	r3, #0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xQueueReceive+0x8e>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	61bb      	str	r3, [r7, #24]
}
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80041ea:	f001 f94f 	bl	800548c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01f      	beq.n	800423a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041fe:	f000 f8f7 	bl	80043f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	1e5a      	subs	r2, r3, #1
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00f      	beq.n	8004232 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	3310      	adds	r3, #16
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fd7c 	bl	8004d14 <xTaskRemoveFromEventList>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004222:	4b3d      	ldr	r3, [pc, #244]	; (8004318 <xQueueReceive+0x1bc>)
 8004224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004232:	f001 f95b 	bl	80054ec <vPortExitCritical>
				return pdPASS;
 8004236:	2301      	movs	r3, #1
 8004238:	e069      	b.n	800430e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d103      	bne.n	8004248 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004240:	f001 f954 	bl	80054ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004244:	2300      	movs	r3, #0
 8004246:	e062      	b.n	800430e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800424e:	f107 0310 	add.w	r3, r7, #16
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fdc0 	bl	8004dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004258:	2301      	movs	r3, #1
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800425c:	f001 f946 	bl	80054ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004260:	f000 fb72 	bl	8004948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004264:	f001 f912 	bl	800548c <vPortEnterCritical>
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800426e:	b25b      	sxtb	r3, r3
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d103      	bne.n	800427e <xQueueReceive+0x122>
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004284:	b25b      	sxtb	r3, r3
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d103      	bne.n	8004294 <xQueueReceive+0x138>
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004294:	f001 f92a 	bl	80054ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004298:	1d3a      	adds	r2, r7, #4
 800429a:	f107 0310 	add.w	r3, r7, #16
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fdaf 	bl	8004e04 <xTaskCheckForTimeOut>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d123      	bne.n	80042f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ae:	f000 f917 	bl	80044e0 <prvIsQueueEmpty>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d017      	beq.n	80042e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	3324      	adds	r3, #36	; 0x24
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fd03 	bl	8004ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042c8:	f000 f8b8 	bl	800443c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042cc:	f000 fb4a 	bl	8004964 <xTaskResumeAll>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d189      	bne.n	80041ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <xQueueReceive+0x1bc>)
 80042d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	e780      	b.n	80041ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ea:	f000 f8a7 	bl	800443c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042ee:	f000 fb39 	bl	8004964 <xTaskResumeAll>
 80042f2:	e77a      	b.n	80041ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f6:	f000 f8a1 	bl	800443c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042fa:	f000 fb33 	bl	8004964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004300:	f000 f8ee 	bl	80044e0 <prvIsQueueEmpty>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	f43f af6f 	beq.w	80041ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800430c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800430e:	4618      	mov	r0, r3
 8004310:	3730      	adds	r7, #48	; 0x30
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10d      	bne.n	8004356 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d14d      	bne.n	80043de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fec2 	bl	80050d0 <xTaskPriorityDisinherit>
 800434c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	e043      	b.n	80043de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d119      	bne.n	8004390 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6898      	ldr	r0, [r3, #8]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	461a      	mov	r2, r3
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	f001 fb8c 	bl	8005a84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	441a      	add	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	d32b      	bcc.n	80043de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	609a      	str	r2, [r3, #8]
 800438e:	e026      	b.n	80043de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68d8      	ldr	r0, [r3, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	461a      	mov	r2, r3
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	f001 fb72 	bl	8005a84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	425b      	negs	r3, r3
 80043aa:	441a      	add	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d207      	bcs.n	80043cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	425b      	negs	r3, r3
 80043c6:	441a      	add	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d105      	bne.n	80043de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	3b01      	subs	r3, #1
 80043dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043e6:	697b      	ldr	r3, [r7, #20]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d018      	beq.n	8004434 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	441a      	add	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d303      	bcc.n	8004424 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68d9      	ldr	r1, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	461a      	mov	r2, r3
 800442e:	6838      	ldr	r0, [r7, #0]
 8004430:	f001 fb28 	bl	8005a84 <memcpy>
	}
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004444:	f001 f822 	bl	800548c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800444e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004450:	e011      	b.n	8004476 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	2b00      	cmp	r3, #0
 8004458:	d012      	beq.n	8004480 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3324      	adds	r3, #36	; 0x24
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fc58 	bl	8004d14 <xTaskRemoveFromEventList>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800446a:	f000 fd2d 	bl	8004ec8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	3b01      	subs	r3, #1
 8004472:	b2db      	uxtb	r3, r3
 8004474:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	dce9      	bgt.n	8004452 <prvUnlockQueue+0x16>
 800447e:	e000      	b.n	8004482 <prvUnlockQueue+0x46>
					break;
 8004480:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	22ff      	movs	r2, #255	; 0xff
 8004486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800448a:	f001 f82f 	bl	80054ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800448e:	f000 fffd 	bl	800548c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004498:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800449a:	e011      	b.n	80044c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3310      	adds	r3, #16
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fc33 	bl	8004d14 <xTaskRemoveFromEventList>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80044b4:	f000 fd08 	bl	8004ec8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80044b8:	7bbb      	ldrb	r3, [r7, #14]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	dce9      	bgt.n	800449c <prvUnlockQueue+0x60>
 80044c8:	e000      	b.n	80044cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	22ff      	movs	r2, #255	; 0xff
 80044d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80044d4:	f001 f80a 	bl	80054ec <vPortExitCritical>
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044e8:	f000 ffd0 	bl	800548c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d102      	bne.n	80044fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	e001      	b.n	80044fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044fe:	f000 fff5 	bl	80054ec <vPortExitCritical>

	return xReturn;
 8004502:	68fb      	ldr	r3, [r7, #12]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08e      	sub	sp, #56	; 0x38
 8004510:	af04      	add	r7, sp, #16
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800451a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	623b      	str	r3, [r7, #32]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <xTaskCreateStatic+0x46>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	61fb      	str	r3, [r7, #28]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004552:	2354      	movs	r3, #84	; 0x54
 8004554:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b54      	cmp	r3, #84	; 0x54
 800455a:	d00a      	beq.n	8004572 <xTaskCreateStatic+0x66>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	61bb      	str	r3, [r7, #24]
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01e      	beq.n	80045b6 <xTaskCreateStatic+0xaa>
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01b      	beq.n	80045b6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004586:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004590:	2300      	movs	r3, #0
 8004592:	9303      	str	r3, [sp, #12]
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	9302      	str	r3, [sp, #8]
 8004598:	f107 0314 	add.w	r3, r7, #20
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f850 	bl	800464e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045b0:	f000 f8cc 	bl	800474c <prvAddNewTaskToReadyList>
 80045b4:	e001      	b.n	80045ba <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045ba:	697b      	ldr	r3, [r7, #20]
	}
 80045bc:	4618      	mov	r0, r3
 80045be:	3728      	adds	r7, #40	; 0x28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08c      	sub	sp, #48	; 0x30
 80045c8:	af04      	add	r7, sp, #16
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	4613      	mov	r3, r2
 80045d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4618      	mov	r0, r3
 80045da:	f001 f857 	bl	800568c <pvPortMalloc>
 80045de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00e      	beq.n	8004604 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80045e6:	2054      	movs	r0, #84	; 0x54
 80045e8:	f001 f850 	bl	800568c <pvPortMalloc>
 80045ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30
 80045fa:	e005      	b.n	8004608 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045fc:	6978      	ldr	r0, [r7, #20]
 80045fe:	f001 f909 	bl	8005814 <vPortFree>
 8004602:	e001      	b.n	8004608 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d017      	beq.n	800463e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	2300      	movs	r3, #0
 800461a:	9303      	str	r3, [sp, #12]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	9302      	str	r3, [sp, #8]
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f80e 	bl	800464e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004632:	69f8      	ldr	r0, [r7, #28]
 8004634:	f000 f88a 	bl	800474c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004638:	2301      	movs	r3, #1
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	e002      	b.n	8004644 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004644:	69bb      	ldr	r3, [r7, #24]
	}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b088      	sub	sp, #32
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004666:	3b01      	subs	r3, #1
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	f023 0307 	bic.w	r3, r3, #7
 8004674:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	617b      	str	r3, [r7, #20]
}
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	e012      	b.n	80046c2 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	7819      	ldrb	r1, [r3, #0]
 80046a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	3334      	adds	r3, #52	; 0x34
 80046ac:	460a      	mov	r2, r1
 80046ae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d006      	beq.n	80046ca <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	3301      	adds	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b0f      	cmp	r3, #15
 80046c6:	d9e9      	bls.n	800469c <prvInitialiseNewTask+0x4e>
 80046c8:	e000      	b.n	80046cc <prvInitialiseNewTask+0x7e>
		{
			break;
 80046ca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	2b06      	cmp	r3, #6
 80046d8:	d901      	bls.n	80046de <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046da:	2306      	movs	r3, #6
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	2200      	movs	r2, #0
 80046ee:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	3304      	adds	r3, #4
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fb42 	bl	8003d7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	3318      	adds	r3, #24
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fb3d 	bl	8003d7e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004708:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	f1c3 0207 	rsb	r2, r3, #7
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004718:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	2200      	movs	r2, #0
 800471e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	69b8      	ldr	r0, [r7, #24]
 800472e:	f000 fdbb 	bl	80052a8 <pxPortInitialiseStack>
 8004732:	4602      	mov	r2, r0
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004742:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004744:	bf00      	nop
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004754:	f000 fe9a 	bl	800548c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004758:	4b2a      	ldr	r3, [pc, #168]	; (8004804 <prvAddNewTaskToReadyList+0xb8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3301      	adds	r3, #1
 800475e:	4a29      	ldr	r2, [pc, #164]	; (8004804 <prvAddNewTaskToReadyList+0xb8>)
 8004760:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004762:	4b29      	ldr	r3, [pc, #164]	; (8004808 <prvAddNewTaskToReadyList+0xbc>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800476a:	4a27      	ldr	r2, [pc, #156]	; (8004808 <prvAddNewTaskToReadyList+0xbc>)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004770:	4b24      	ldr	r3, [pc, #144]	; (8004804 <prvAddNewTaskToReadyList+0xb8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d110      	bne.n	800479a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004778:	f000 fbca 	bl	8004f10 <prvInitialiseTaskLists>
 800477c:	e00d      	b.n	800479a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <prvAddNewTaskToReadyList+0xc0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <prvAddNewTaskToReadyList+0xbc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	429a      	cmp	r2, r3
 8004792:	d802      	bhi.n	800479a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <prvAddNewTaskToReadyList+0xbc>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800479a:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <prvAddNewTaskToReadyList+0xc4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3301      	adds	r3, #1
 80047a0:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <prvAddNewTaskToReadyList+0xc4>)
 80047a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	2201      	movs	r2, #1
 80047aa:	409a      	lsls	r2, r3
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <prvAddNewTaskToReadyList+0xc8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	4a18      	ldr	r2, [pc, #96]	; (8004814 <prvAddNewTaskToReadyList+0xc8>)
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4a15      	ldr	r2, [pc, #84]	; (8004818 <prvAddNewTaskToReadyList+0xcc>)
 80047c4:	441a      	add	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f7ff fae2 	bl	8003d96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047d2:	f000 fe8b 	bl	80054ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047d6:	4b0d      	ldr	r3, [pc, #52]	; (800480c <prvAddNewTaskToReadyList+0xc0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00e      	beq.n	80047fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <prvAddNewTaskToReadyList+0xbc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d207      	bcs.n	80047fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <prvAddNewTaskToReadyList+0xd0>)
 80047ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000514 	.word	0x20000514
 8004808:	20000414 	.word	0x20000414
 800480c:	20000520 	.word	0x20000520
 8004810:	20000530 	.word	0x20000530
 8004814:	2000051c 	.word	0x2000051c
 8004818:	20000418 	.word	0x20000418
 800481c:	e000ed04 	.word	0xe000ed04

08004820 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d017      	beq.n	8004862 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004832:	4b13      	ldr	r3, [pc, #76]	; (8004880 <vTaskDelay+0x60>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <vTaskDelay+0x30>
	__asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	60bb      	str	r3, [r7, #8]
}
 800484c:	bf00      	nop
 800484e:	e7fe      	b.n	800484e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004850:	f000 f87a 	bl	8004948 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004854:	2100      	movs	r1, #0
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fcc0 	bl	80051dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800485c:	f000 f882 	bl	8004964 <xTaskResumeAll>
 8004860:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d107      	bne.n	8004878 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <vTaskDelay+0x64>)
 800486a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	2000053c 	.word	0x2000053c
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004896:	463a      	mov	r2, r7
 8004898:	1d39      	adds	r1, r7, #4
 800489a:	f107 0308 	add.w	r3, r7, #8
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fb fce8 	bl	8000274 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	9202      	str	r2, [sp, #8]
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	2300      	movs	r3, #0
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	2300      	movs	r3, #0
 80048b4:	460a      	mov	r2, r1
 80048b6:	491e      	ldr	r1, [pc, #120]	; (8004930 <vTaskStartScheduler+0xa8>)
 80048b8:	481e      	ldr	r0, [pc, #120]	; (8004934 <vTaskStartScheduler+0xac>)
 80048ba:	f7ff fe27 	bl	800450c <xTaskCreateStatic>
 80048be:	4603      	mov	r3, r0
 80048c0:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <vTaskStartScheduler+0xb0>)
 80048c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048c4:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <vTaskStartScheduler+0xb0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048cc:	2301      	movs	r3, #1
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	e001      	b.n	80048d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d116      	bne.n	800490a <vTaskStartScheduler+0x82>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	613b      	str	r3, [r7, #16]
}
 80048ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048f0:	4b12      	ldr	r3, [pc, #72]	; (800493c <vTaskStartScheduler+0xb4>)
 80048f2:	f04f 32ff 	mov.w	r2, #4294967295
 80048f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048f8:	4b11      	ldr	r3, [pc, #68]	; (8004940 <vTaskStartScheduler+0xb8>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80048fe:	4b11      	ldr	r3, [pc, #68]	; (8004944 <vTaskStartScheduler+0xbc>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004904:	f000 fd50 	bl	80053a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004908:	e00e      	b.n	8004928 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d10a      	bne.n	8004928 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60fb      	str	r3, [r7, #12]
}
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <vTaskStartScheduler+0x9e>
}
 8004928:	bf00      	nop
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	08005b50 	.word	0x08005b50
 8004934:	08004ee1 	.word	0x08004ee1
 8004938:	20000538 	.word	0x20000538
 800493c:	20000534 	.word	0x20000534
 8004940:	20000520 	.word	0x20000520
 8004944:	20000518 	.word	0x20000518

08004948 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <vTaskSuspendAll+0x18>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	4a03      	ldr	r2, [pc, #12]	; (8004960 <vTaskSuspendAll+0x18>)
 8004954:	6013      	str	r3, [r2, #0]
}
 8004956:	bf00      	nop
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	2000053c 	.word	0x2000053c

08004964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800496e:	2300      	movs	r3, #0
 8004970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004972:	4b41      	ldr	r3, [pc, #260]	; (8004a78 <xTaskResumeAll+0x114>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <xTaskResumeAll+0x2c>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	603b      	str	r3, [r7, #0]
}
 800498c:	bf00      	nop
 800498e:	e7fe      	b.n	800498e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004990:	f000 fd7c 	bl	800548c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004994:	4b38      	ldr	r3, [pc, #224]	; (8004a78 <xTaskResumeAll+0x114>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3b01      	subs	r3, #1
 800499a:	4a37      	ldr	r2, [pc, #220]	; (8004a78 <xTaskResumeAll+0x114>)
 800499c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800499e:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <xTaskResumeAll+0x114>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d161      	bne.n	8004a6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049a6:	4b35      	ldr	r3, [pc, #212]	; (8004a7c <xTaskResumeAll+0x118>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d05d      	beq.n	8004a6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049ae:	e02e      	b.n	8004a0e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049b0:	4b33      	ldr	r3, [pc, #204]	; (8004a80 <xTaskResumeAll+0x11c>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3318      	adds	r3, #24
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fa45 	bl	8003e4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fa40 	bl	8003e4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	2201      	movs	r2, #1
 80049d2:	409a      	lsls	r2, r3
 80049d4:	4b2b      	ldr	r3, [pc, #172]	; (8004a84 <xTaskResumeAll+0x120>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4313      	orrs	r3, r2
 80049da:	4a2a      	ldr	r2, [pc, #168]	; (8004a84 <xTaskResumeAll+0x120>)
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4a27      	ldr	r2, [pc, #156]	; (8004a88 <xTaskResumeAll+0x124>)
 80049ec:	441a      	add	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f7ff f9ce 	bl	8003d96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	4b23      	ldr	r3, [pc, #140]	; (8004a8c <xTaskResumeAll+0x128>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d302      	bcc.n	8004a0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004a08:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <xTaskResumeAll+0x12c>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <xTaskResumeAll+0x11c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1cc      	bne.n	80049b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a1c:	f000 fb16 	bl	800504c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a20:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <xTaskResumeAll+0x130>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d010      	beq.n	8004a4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a2c:	f000 f836 	bl	8004a9c <xTaskIncrementTick>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004a36:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <xTaskResumeAll+0x12c>)
 8004a38:	2201      	movs	r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f1      	bne.n	8004a2c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004a48:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <xTaskResumeAll+0x130>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a4e:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <xTaskResumeAll+0x12c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a56:	2301      	movs	r3, #1
 8004a58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a5a:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <xTaskResumeAll+0x134>)
 8004a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a6a:	f000 fd3f 	bl	80054ec <vPortExitCritical>

	return xAlreadyYielded;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	2000053c 	.word	0x2000053c
 8004a7c:	20000514 	.word	0x20000514
 8004a80:	200004d4 	.word	0x200004d4
 8004a84:	2000051c 	.word	0x2000051c
 8004a88:	20000418 	.word	0x20000418
 8004a8c:	20000414 	.word	0x20000414
 8004a90:	20000528 	.word	0x20000528
 8004a94:	20000524 	.word	0x20000524
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aa6:	4b51      	ldr	r3, [pc, #324]	; (8004bec <xTaskIncrementTick+0x150>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 808d 	bne.w	8004bca <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ab0:	4b4f      	ldr	r3, [pc, #316]	; (8004bf0 <xTaskIncrementTick+0x154>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ab8:	4a4d      	ldr	r2, [pc, #308]	; (8004bf0 <xTaskIncrementTick+0x154>)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d120      	bne.n	8004b06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ac4:	4b4b      	ldr	r3, [pc, #300]	; (8004bf4 <xTaskIncrementTick+0x158>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	603b      	str	r3, [r7, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	e7fe      	b.n	8004ae2 <xTaskIncrementTick+0x46>
 8004ae4:	4b43      	ldr	r3, [pc, #268]	; (8004bf4 <xTaskIncrementTick+0x158>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	4b43      	ldr	r3, [pc, #268]	; (8004bf8 <xTaskIncrementTick+0x15c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a41      	ldr	r2, [pc, #260]	; (8004bf4 <xTaskIncrementTick+0x158>)
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4a41      	ldr	r2, [pc, #260]	; (8004bf8 <xTaskIncrementTick+0x15c>)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4b40      	ldr	r3, [pc, #256]	; (8004bfc <xTaskIncrementTick+0x160>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3301      	adds	r3, #1
 8004afe:	4a3f      	ldr	r2, [pc, #252]	; (8004bfc <xTaskIncrementTick+0x160>)
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	f000 faa3 	bl	800504c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b06:	4b3e      	ldr	r3, [pc, #248]	; (8004c00 <xTaskIncrementTick+0x164>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d34d      	bcc.n	8004bac <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b10:	4b38      	ldr	r3, [pc, #224]	; (8004bf4 <xTaskIncrementTick+0x158>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <xTaskIncrementTick+0x82>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <xTaskIncrementTick+0x84>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b24:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <xTaskIncrementTick+0x164>)
 8004b26:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2a:	601a      	str	r2, [r3, #0]
					break;
 8004b2c:	e03e      	b.n	8004bac <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b2e:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <xTaskIncrementTick+0x158>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d203      	bcs.n	8004b4e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b46:	4a2e      	ldr	r2, [pc, #184]	; (8004c00 <xTaskIncrementTick+0x164>)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6013      	str	r3, [r2, #0]
						break;
 8004b4c:	e02e      	b.n	8004bac <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	3304      	adds	r3, #4
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff f97a 	bl	8003e4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	3318      	adds	r3, #24
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff f971 	bl	8003e4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	2201      	movs	r2, #1
 8004b70:	409a      	lsls	r2, r3
 8004b72:	4b24      	ldr	r3, [pc, #144]	; (8004c04 <xTaskIncrementTick+0x168>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	4a22      	ldr	r2, [pc, #136]	; (8004c04 <xTaskIncrementTick+0x168>)
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4a1f      	ldr	r2, [pc, #124]	; (8004c08 <xTaskIncrementTick+0x16c>)
 8004b8a:	441a      	add	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f7ff f8ff 	bl	8003d96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <xTaskIncrementTick+0x170>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d3b4      	bcc.n	8004b10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004baa:	e7b1      	b.n	8004b10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bac:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <xTaskIncrementTick+0x170>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb2:	4915      	ldr	r1, [pc, #84]	; (8004c08 <xTaskIncrementTick+0x16c>)
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d907      	bls.n	8004bd4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	e004      	b.n	8004bd4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <xTaskIncrementTick+0x174>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <xTaskIncrementTick+0x174>)
 8004bd2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <xTaskIncrementTick+0x178>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004be0:	697b      	ldr	r3, [r7, #20]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	2000053c 	.word	0x2000053c
 8004bf0:	20000518 	.word	0x20000518
 8004bf4:	200004cc 	.word	0x200004cc
 8004bf8:	200004d0 	.word	0x200004d0
 8004bfc:	2000052c 	.word	0x2000052c
 8004c00:	20000534 	.word	0x20000534
 8004c04:	2000051c 	.word	0x2000051c
 8004c08:	20000418 	.word	0x20000418
 8004c0c:	20000414 	.word	0x20000414
 8004c10:	20000524 	.word	0x20000524
 8004c14:	20000528 	.word	0x20000528

08004c18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c1e:	4b26      	ldr	r3, [pc, #152]	; (8004cb8 <vTaskSwitchContext+0xa0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c26:	4b25      	ldr	r3, [pc, #148]	; (8004cbc <vTaskSwitchContext+0xa4>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c2c:	e03f      	b.n	8004cae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004c2e:	4b23      	ldr	r3, [pc, #140]	; (8004cbc <vTaskSwitchContext+0xa4>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c34:	4b22      	ldr	r3, [pc, #136]	; (8004cc0 <vTaskSwitchContext+0xa8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	fab3 f383 	clz	r3, r3
 8004c40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c42:	7afb      	ldrb	r3, [r7, #11]
 8004c44:	f1c3 031f 	rsb	r3, r3, #31
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	491e      	ldr	r1, [pc, #120]	; (8004cc4 <vTaskSwitchContext+0xac>)
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	607b      	str	r3, [r7, #4]
}
 8004c70:	bf00      	nop
 8004c72:	e7fe      	b.n	8004c72 <vTaskSwitchContext+0x5a>
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4a11      	ldr	r2, [pc, #68]	; (8004cc4 <vTaskSwitchContext+0xac>)
 8004c80:	4413      	add	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	3308      	adds	r3, #8
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d104      	bne.n	8004ca4 <vTaskSwitchContext+0x8c>
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	605a      	str	r2, [r3, #4]
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	4a07      	ldr	r2, [pc, #28]	; (8004cc8 <vTaskSwitchContext+0xb0>)
 8004cac:	6013      	str	r3, [r2, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr
 8004cb8:	2000053c 	.word	0x2000053c
 8004cbc:	20000528 	.word	0x20000528
 8004cc0:	2000051c 	.word	0x2000051c
 8004cc4:	20000418 	.word	0x20000418
 8004cc8:	20000414 	.word	0x20000414

08004ccc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10a      	bne.n	8004cf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60fb      	str	r3, [r7, #12]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cf2:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <vTaskPlaceOnEventList+0x44>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3318      	adds	r3, #24
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff f86e 	bl	8003ddc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d00:	2101      	movs	r1, #1
 8004d02:	6838      	ldr	r0, [r7, #0]
 8004d04:	f000 fa6a 	bl	80051dc <prvAddCurrentTaskToDelayedList>
}
 8004d08:	bf00      	nop
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000414 	.word	0x20000414

08004d14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10a      	bne.n	8004d40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	60fb      	str	r3, [r7, #12]
}
 8004d3c:	bf00      	nop
 8004d3e:	e7fe      	b.n	8004d3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	3318      	adds	r3, #24
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff f881 	bl	8003e4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d4a:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <xTaskRemoveFromEventList+0xac>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d11c      	bne.n	8004d8c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff f878 	bl	8003e4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	2201      	movs	r2, #1
 8004d62:	409a      	lsls	r2, r3
 8004d64:	4b17      	ldr	r3, [pc, #92]	; (8004dc4 <xTaskRemoveFromEventList+0xb0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	4a16      	ldr	r2, [pc, #88]	; (8004dc4 <xTaskRemoveFromEventList+0xb0>)
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <xTaskRemoveFromEventList+0xb4>)
 8004d7c:	441a      	add	r2, r3
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3304      	adds	r3, #4
 8004d82:	4619      	mov	r1, r3
 8004d84:	4610      	mov	r0, r2
 8004d86:	f7ff f806 	bl	8003d96 <vListInsertEnd>
 8004d8a:	e005      	b.n	8004d98 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	3318      	adds	r3, #24
 8004d90:	4619      	mov	r1, r3
 8004d92:	480e      	ldr	r0, [pc, #56]	; (8004dcc <xTaskRemoveFromEventList+0xb8>)
 8004d94:	f7fe ffff 	bl	8003d96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <xTaskRemoveFromEventList+0xbc>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d905      	bls.n	8004db2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004da6:	2301      	movs	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004daa:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <xTaskRemoveFromEventList+0xc0>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e001      	b.n	8004db6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004db6:	697b      	ldr	r3, [r7, #20]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	2000053c 	.word	0x2000053c
 8004dc4:	2000051c 	.word	0x2000051c
 8004dc8:	20000418 	.word	0x20000418
 8004dcc:	200004d4 	.word	0x200004d4
 8004dd0:	20000414 	.word	0x20000414
 8004dd4:	20000528 	.word	0x20000528

08004dd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004de0:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <vTaskInternalSetTimeOutState+0x24>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <vTaskInternalSetTimeOutState+0x28>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	605a      	str	r2, [r3, #4]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	2000052c 	.word	0x2000052c
 8004e00:	20000518 	.word	0x20000518

08004e04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	613b      	str	r3, [r7, #16]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	60fb      	str	r3, [r7, #12]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004e46:	f000 fb21 	bl	800548c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ec0 <xTaskCheckForTimeOut+0xbc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d102      	bne.n	8004e6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	e023      	b.n	8004eb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <xTaskCheckForTimeOut+0xc0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d007      	beq.n	8004e86 <xTaskCheckForTimeOut+0x82>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d302      	bcc.n	8004e86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	e015      	b.n	8004eb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d20b      	bcs.n	8004ea8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	1ad2      	subs	r2, r2, r3
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff ff9b 	bl	8004dd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
 8004ea6:	e004      	b.n	8004eb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004eb2:	f000 fb1b 	bl	80054ec <vPortExitCritical>

	return xReturn;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000518 	.word	0x20000518
 8004ec4:	2000052c 	.word	0x2000052c

08004ec8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <vTaskMissedYield+0x14>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000528 	.word	0x20000528

08004ee0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ee8:	f000 f852 	bl	8004f90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <prvIdleTask+0x28>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d9f9      	bls.n	8004ee8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ef4:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <prvIdleTask+0x2c>)
 8004ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f04:	e7f0      	b.n	8004ee8 <prvIdleTask+0x8>
 8004f06:	bf00      	nop
 8004f08:	20000418 	.word	0x20000418
 8004f0c:	e000ed04 	.word	0xe000ed04

08004f10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f16:	2300      	movs	r3, #0
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	e00c      	b.n	8004f36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4a12      	ldr	r2, [pc, #72]	; (8004f70 <prvInitialiseTaskLists+0x60>)
 8004f28:	4413      	add	r3, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe ff08 	bl	8003d40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3301      	adds	r3, #1
 8004f34:	607b      	str	r3, [r7, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b06      	cmp	r3, #6
 8004f3a:	d9ef      	bls.n	8004f1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f3c:	480d      	ldr	r0, [pc, #52]	; (8004f74 <prvInitialiseTaskLists+0x64>)
 8004f3e:	f7fe feff 	bl	8003d40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f42:	480d      	ldr	r0, [pc, #52]	; (8004f78 <prvInitialiseTaskLists+0x68>)
 8004f44:	f7fe fefc 	bl	8003d40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f48:	480c      	ldr	r0, [pc, #48]	; (8004f7c <prvInitialiseTaskLists+0x6c>)
 8004f4a:	f7fe fef9 	bl	8003d40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f4e:	480c      	ldr	r0, [pc, #48]	; (8004f80 <prvInitialiseTaskLists+0x70>)
 8004f50:	f7fe fef6 	bl	8003d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f54:	480b      	ldr	r0, [pc, #44]	; (8004f84 <prvInitialiseTaskLists+0x74>)
 8004f56:	f7fe fef3 	bl	8003d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f5a:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <prvInitialiseTaskLists+0x78>)
 8004f5c:	4a05      	ldr	r2, [pc, #20]	; (8004f74 <prvInitialiseTaskLists+0x64>)
 8004f5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <prvInitialiseTaskLists+0x7c>)
 8004f62:	4a05      	ldr	r2, [pc, #20]	; (8004f78 <prvInitialiseTaskLists+0x68>)
 8004f64:	601a      	str	r2, [r3, #0]
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000418 	.word	0x20000418
 8004f74:	200004a4 	.word	0x200004a4
 8004f78:	200004b8 	.word	0x200004b8
 8004f7c:	200004d4 	.word	0x200004d4
 8004f80:	200004e8 	.word	0x200004e8
 8004f84:	20000500 	.word	0x20000500
 8004f88:	200004cc 	.word	0x200004cc
 8004f8c:	200004d0 	.word	0x200004d0

08004f90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f96:	e019      	b.n	8004fcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f98:	f000 fa78 	bl	800548c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f9c:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <prvCheckTasksWaitingTermination+0x50>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fe ff4f 	bl	8003e4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fae:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <prvCheckTasksWaitingTermination+0x54>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	4a0b      	ldr	r2, [pc, #44]	; (8004fe4 <prvCheckTasksWaitingTermination+0x54>)
 8004fb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <prvCheckTasksWaitingTermination+0x58>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	4a0a      	ldr	r2, [pc, #40]	; (8004fe8 <prvCheckTasksWaitingTermination+0x58>)
 8004fc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fc2:	f000 fa93 	bl	80054ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f810 	bl	8004fec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <prvCheckTasksWaitingTermination+0x58>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e1      	bne.n	8004f98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	200004e8 	.word	0x200004e8
 8004fe4:	20000514 	.word	0x20000514
 8004fe8:	200004fc 	.word	0x200004fc

08004fec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d108      	bne.n	8005010 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fc06 	bl	8005814 <vPortFree>
				vPortFree( pxTCB );
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fc03 	bl	8005814 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800500e:	e018      	b.n	8005042 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005016:	2b01      	cmp	r3, #1
 8005018:	d103      	bne.n	8005022 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fbfa 	bl	8005814 <vPortFree>
	}
 8005020:	e00f      	b.n	8005042 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005028:	2b02      	cmp	r3, #2
 800502a:	d00a      	beq.n	8005042 <prvDeleteTCB+0x56>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	60fb      	str	r3, [r7, #12]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <prvDeleteTCB+0x54>
	}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005052:	4b0e      	ldr	r3, [pc, #56]	; (800508c <prvResetNextTaskUnblockTime+0x40>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <prvResetNextTaskUnblockTime+0x14>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <prvResetNextTaskUnblockTime+0x16>
 8005060:	2300      	movs	r3, #0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005066:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <prvResetNextTaskUnblockTime+0x44>)
 8005068:	f04f 32ff 	mov.w	r2, #4294967295
 800506c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800506e:	e008      	b.n	8005082 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005070:	4b06      	ldr	r3, [pc, #24]	; (800508c <prvResetNextTaskUnblockTime+0x40>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4a04      	ldr	r2, [pc, #16]	; (8005090 <prvResetNextTaskUnblockTime+0x44>)
 8005080:	6013      	str	r3, [r2, #0]
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr
 800508c:	200004cc 	.word	0x200004cc
 8005090:	20000534 	.word	0x20000534

08005094 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <xTaskGetSchedulerState+0x34>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050a2:	2301      	movs	r3, #1
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	e008      	b.n	80050ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a8:	4b08      	ldr	r3, [pc, #32]	; (80050cc <xTaskGetSchedulerState+0x38>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d102      	bne.n	80050b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050b0:	2302      	movs	r3, #2
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	e001      	b.n	80050ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050ba:	687b      	ldr	r3, [r7, #4]
	}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20000520 	.word	0x20000520
 80050cc:	2000053c 	.word	0x2000053c

080050d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d06e      	beq.n	80051c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050e6:	4b3a      	ldr	r3, [pc, #232]	; (80051d0 <xTaskPriorityDisinherit+0x100>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d00a      	beq.n	8005106 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	60fb      	str	r3, [r7, #12]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	60bb      	str	r3, [r7, #8]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005128:	1e5a      	subs	r2, r3, #1
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005136:	429a      	cmp	r2, r3
 8005138:	d044      	beq.n	80051c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800513e:	2b00      	cmp	r3, #0
 8005140:	d140      	bne.n	80051c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	3304      	adds	r3, #4
 8005146:	4618      	mov	r0, r3
 8005148:	f7fe fe80 	bl	8003e4c <uxListRemove>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d115      	bne.n	800517e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005156:	491f      	ldr	r1, [pc, #124]	; (80051d4 <xTaskPriorityDisinherit+0x104>)
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <xTaskPriorityDisinherit+0xae>
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	2201      	movs	r2, #1
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43da      	mvns	r2, r3
 8005174:	4b18      	ldr	r3, [pc, #96]	; (80051d8 <xTaskPriorityDisinherit+0x108>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4013      	ands	r3, r2
 800517a:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <xTaskPriorityDisinherit+0x108>)
 800517c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	f1c3 0207 	rsb	r2, r3, #7
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	2201      	movs	r2, #1
 8005198:	409a      	lsls	r2, r3
 800519a:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <xTaskPriorityDisinherit+0x108>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	4a0d      	ldr	r2, [pc, #52]	; (80051d8 <xTaskPriorityDisinherit+0x108>)
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4a08      	ldr	r2, [pc, #32]	; (80051d4 <xTaskPriorityDisinherit+0x104>)
 80051b2:	441a      	add	r2, r3
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	3304      	adds	r3, #4
 80051b8:	4619      	mov	r1, r3
 80051ba:	4610      	mov	r0, r2
 80051bc:	f7fe fdeb 	bl	8003d96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051c4:	697b      	ldr	r3, [r7, #20]
	}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20000414 	.word	0x20000414
 80051d4:	20000418 	.word	0x20000418
 80051d8:	2000051c 	.word	0x2000051c

080051dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051e6:	4b29      	ldr	r3, [pc, #164]	; (800528c <prvAddCurrentTaskToDelayedList+0xb0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051ec:	4b28      	ldr	r3, [pc, #160]	; (8005290 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3304      	adds	r3, #4
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fe fe2a 	bl	8003e4c <uxListRemove>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80051fe:	4b24      	ldr	r3, [pc, #144]	; (8005290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	2201      	movs	r2, #1
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43da      	mvns	r2, r3
 800520c:	4b21      	ldr	r3, [pc, #132]	; (8005294 <prvAddCurrentTaskToDelayedList+0xb8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4013      	ands	r3, r2
 8005212:	4a20      	ldr	r2, [pc, #128]	; (8005294 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005214:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d10a      	bne.n	8005234 <prvAddCurrentTaskToDelayedList+0x58>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005224:	4b1a      	ldr	r3, [pc, #104]	; (8005290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3304      	adds	r3, #4
 800522a:	4619      	mov	r1, r3
 800522c:	481a      	ldr	r0, [pc, #104]	; (8005298 <prvAddCurrentTaskToDelayedList+0xbc>)
 800522e:	f7fe fdb2 	bl	8003d96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005232:	e026      	b.n	8005282 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800523c:	4b14      	ldr	r3, [pc, #80]	; (8005290 <prvAddCurrentTaskToDelayedList+0xb4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	429a      	cmp	r2, r3
 800524a:	d209      	bcs.n	8005260 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800524c:	4b13      	ldr	r3, [pc, #76]	; (800529c <prvAddCurrentTaskToDelayedList+0xc0>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3304      	adds	r3, #4
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f7fe fdbf 	bl	8003ddc <vListInsert>
}
 800525e:	e010      	b.n	8005282 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005260:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3304      	adds	r3, #4
 800526a:	4619      	mov	r1, r3
 800526c:	4610      	mov	r0, r2
 800526e:	f7fe fdb5 	bl	8003ddc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005272:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	429a      	cmp	r2, r3
 800527a:	d202      	bcs.n	8005282 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800527c:	4a09      	ldr	r2, [pc, #36]	; (80052a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	6013      	str	r3, [r2, #0]
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000518 	.word	0x20000518
 8005290:	20000414 	.word	0x20000414
 8005294:	2000051c 	.word	0x2000051c
 8005298:	20000500 	.word	0x20000500
 800529c:	200004d0 	.word	0x200004d0
 80052a0:	200004cc 	.word	0x200004cc
 80052a4:	20000534 	.word	0x20000534

080052a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3b04      	subs	r3, #4
 80052b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3b04      	subs	r3, #4
 80052c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f023 0201 	bic.w	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3b04      	subs	r3, #4
 80052d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052d8:	4a08      	ldr	r2, [pc, #32]	; (80052fc <pxPortInitialiseStack+0x54>)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3b14      	subs	r3, #20
 80052e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3b20      	subs	r3, #32
 80052ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052f0:	68fb      	ldr	r3, [r7, #12]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr
 80052fc:	08005301 	.word	0x08005301

08005300 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005306:	2300      	movs	r3, #0
 8005308:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800530a:	4b12      	ldr	r3, [pc, #72]	; (8005354 <prvTaskExitError+0x54>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d00a      	beq.n	800532a <prvTaskExitError+0x2a>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	60fb      	str	r3, [r7, #12]
}
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <prvTaskExitError+0x28>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	60bb      	str	r3, [r7, #8]
}
 800533c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800533e:	bf00      	nop
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0fc      	beq.n	8005340 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005346:	bf00      	nop
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	2000000c 	.word	0x2000000c
	...

08005360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005360:	4b07      	ldr	r3, [pc, #28]	; (8005380 <pxCurrentTCBConst2>)
 8005362:	6819      	ldr	r1, [r3, #0]
 8005364:	6808      	ldr	r0, [r1, #0]
 8005366:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800536a:	f380 8809 	msr	PSP, r0
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8811 	msr	BASEPRI, r0
 800537a:	f04e 0e0d 	orr.w	lr, lr, #13
 800537e:	4770      	bx	lr

08005380 <pxCurrentTCBConst2>:
 8005380:	20000414 	.word	0x20000414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop

08005388 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005388:	4806      	ldr	r0, [pc, #24]	; (80053a4 <prvPortStartFirstTask+0x1c>)
 800538a:	6800      	ldr	r0, [r0, #0]
 800538c:	6800      	ldr	r0, [r0, #0]
 800538e:	f380 8808 	msr	MSP, r0
 8005392:	b662      	cpsie	i
 8005394:	b661      	cpsie	f
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	df00      	svc	0
 80053a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053a2:	bf00      	nop
 80053a4:	e000ed08 	.word	0xe000ed08

080053a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053ae:	4b32      	ldr	r3, [pc, #200]	; (8005478 <xPortStartScheduler+0xd0>)
 80053b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	22ff      	movs	r2, #255	; 0xff
 80053be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	4b2a      	ldr	r3, [pc, #168]	; (800547c <xPortStartScheduler+0xd4>)
 80053d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053d6:	4b2a      	ldr	r3, [pc, #168]	; (8005480 <xPortStartScheduler+0xd8>)
 80053d8:	2207      	movs	r2, #7
 80053da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053dc:	e009      	b.n	80053f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80053de:	4b28      	ldr	r3, [pc, #160]	; (8005480 <xPortStartScheduler+0xd8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	4a26      	ldr	r2, [pc, #152]	; (8005480 <xPortStartScheduler+0xd8>)
 80053e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b80      	cmp	r3, #128	; 0x80
 80053fc:	d0ef      	beq.n	80053de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053fe:	4b20      	ldr	r3, [pc, #128]	; (8005480 <xPortStartScheduler+0xd8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1c3 0307 	rsb	r3, r3, #7
 8005406:	2b04      	cmp	r3, #4
 8005408:	d00a      	beq.n	8005420 <xPortStartScheduler+0x78>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60bb      	str	r3, [r7, #8]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005420:	4b17      	ldr	r3, [pc, #92]	; (8005480 <xPortStartScheduler+0xd8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	4a16      	ldr	r2, [pc, #88]	; (8005480 <xPortStartScheduler+0xd8>)
 8005428:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800542a:	4b15      	ldr	r3, [pc, #84]	; (8005480 <xPortStartScheduler+0xd8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005432:	4a13      	ldr	r2, [pc, #76]	; (8005480 <xPortStartScheduler+0xd8>)
 8005434:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	b2da      	uxtb	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800543e:	4b11      	ldr	r3, [pc, #68]	; (8005484 <xPortStartScheduler+0xdc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a10      	ldr	r2, [pc, #64]	; (8005484 <xPortStartScheduler+0xdc>)
 8005444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005448:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800544a:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <xPortStartScheduler+0xdc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a0d      	ldr	r2, [pc, #52]	; (8005484 <xPortStartScheduler+0xdc>)
 8005450:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005454:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005456:	f000 f8b9 	bl	80055cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <xPortStartScheduler+0xe0>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005460:	f7ff ff92 	bl	8005388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005464:	f7ff fbd8 	bl	8004c18 <vTaskSwitchContext>
	prvTaskExitError();
 8005468:	f7ff ff4a 	bl	8005300 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	e000e400 	.word	0xe000e400
 800547c:	20000540 	.word	0x20000540
 8005480:	20000544 	.word	0x20000544
 8005484:	e000ed20 	.word	0xe000ed20
 8005488:	2000000c 	.word	0x2000000c

0800548c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	607b      	str	r3, [r7, #4]
}
 80054a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054a6:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <vPortEnterCritical+0x58>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	4a0d      	ldr	r2, [pc, #52]	; (80054e4 <vPortEnterCritical+0x58>)
 80054ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054b0:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <vPortEnterCritical+0x58>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d10f      	bne.n	80054d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054b8:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <vPortEnterCritical+0x5c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	603b      	str	r3, [r7, #0]
}
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <vPortEnterCritical+0x4a>
	}
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	2000000c 	.word	0x2000000c
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054f2:	4b11      	ldr	r3, [pc, #68]	; (8005538 <vPortExitCritical+0x4c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <vPortExitCritical+0x24>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	607b      	str	r3, [r7, #4]
}
 800550c:	bf00      	nop
 800550e:	e7fe      	b.n	800550e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005510:	4b09      	ldr	r3, [pc, #36]	; (8005538 <vPortExitCritical+0x4c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3b01      	subs	r3, #1
 8005516:	4a08      	ldr	r2, [pc, #32]	; (8005538 <vPortExitCritical+0x4c>)
 8005518:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800551a:	4b07      	ldr	r3, [pc, #28]	; (8005538 <vPortExitCritical+0x4c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d105      	bne.n	800552e <vPortExitCritical+0x42>
 8005522:	2300      	movs	r3, #0
 8005524:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	f383 8811 	msr	BASEPRI, r3
}
 800552c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr
 8005538:	2000000c 	.word	0x2000000c
 800553c:	00000000 	.word	0x00000000

08005540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005540:	f3ef 8009 	mrs	r0, PSP
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	4b0d      	ldr	r3, [pc, #52]	; (8005580 <pxCurrentTCBConst>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005550:	6010      	str	r0, [r2, #0]
 8005552:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005556:	f04f 0050 	mov.w	r0, #80	; 0x50
 800555a:	f380 8811 	msr	BASEPRI, r0
 800555e:	f7ff fb5b 	bl	8004c18 <vTaskSwitchContext>
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f380 8811 	msr	BASEPRI, r0
 800556a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800556e:	6819      	ldr	r1, [r3, #0]
 8005570:	6808      	ldr	r0, [r1, #0]
 8005572:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005576:	f380 8809 	msr	PSP, r0
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	4770      	bx	lr

08005580 <pxCurrentTCBConst>:
 8005580:	20000414 	.word	0x20000414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop

08005588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
}
 80055a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055a2:	f7ff fa7b 	bl	8004a9c <xTaskIncrementTick>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <SysTick_Handler+0x40>)
 80055ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	2300      	movs	r3, #0
 80055b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	f383 8811 	msr	BASEPRI, r3
}
 80055be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055d0:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <vPortSetupTimerInterrupt+0x30>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055d6:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <vPortSetupTimerInterrupt+0x34>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <vPortSetupTimerInterrupt+0x38>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a09      	ldr	r2, [pc, #36]	; (8005608 <vPortSetupTimerInterrupt+0x3c>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	4a08      	ldr	r2, [pc, #32]	; (800560c <vPortSetupTimerInterrupt+0x40>)
 80055ea:	3b01      	subs	r3, #1
 80055ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ee:	4b03      	ldr	r3, [pc, #12]	; (80055fc <vPortSetupTimerInterrupt+0x30>)
 80055f0:	2207      	movs	r2, #7
 80055f2:	601a      	str	r2, [r3, #0]
}
 80055f4:	bf00      	nop
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr
 80055fc:	e000e010 	.word	0xe000e010
 8005600:	e000e018 	.word	0xe000e018
 8005604:	20000000 	.word	0x20000000
 8005608:	10624dd3 	.word	0x10624dd3
 800560c:	e000e014 	.word	0xe000e014

08005610 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005616:	f3ef 8305 	mrs	r3, IPSR
 800561a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b0f      	cmp	r3, #15
 8005620:	d914      	bls.n	800564c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005622:	4a16      	ldr	r2, [pc, #88]	; (800567c <vPortValidateInterruptPriority+0x6c>)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800562c:	4b14      	ldr	r3, [pc, #80]	; (8005680 <vPortValidateInterruptPriority+0x70>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	7afa      	ldrb	r2, [r7, #11]
 8005632:	429a      	cmp	r2, r3
 8005634:	d20a      	bcs.n	800564c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	607b      	str	r3, [r7, #4]
}
 8005648:	bf00      	nop
 800564a:	e7fe      	b.n	800564a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800564c:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <vPortValidateInterruptPriority+0x74>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <vPortValidateInterruptPriority+0x78>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d90a      	bls.n	8005672 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	603b      	str	r3, [r7, #0]
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <vPortValidateInterruptPriority+0x60>
	}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr
 800567c:	e000e3f0 	.word	0xe000e3f0
 8005680:	20000540 	.word	0x20000540
 8005684:	e000ed0c 	.word	0xe000ed0c
 8005688:	20000544 	.word	0x20000544

0800568c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	; 0x28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005694:	2300      	movs	r3, #0
 8005696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005698:	f7ff f956 	bl	8004948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800569c:	4b58      	ldr	r3, [pc, #352]	; (8005800 <pvPortMalloc+0x174>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056a4:	f000 f910 	bl	80058c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056a8:	4b56      	ldr	r3, [pc, #344]	; (8005804 <pvPortMalloc+0x178>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f040 808e 	bne.w	80057d2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01d      	beq.n	80056f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80056bc:	2208      	movs	r2, #8
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d014      	beq.n	80056f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f023 0307 	bic.w	r3, r3, #7
 80056d4:	3308      	adds	r3, #8
 80056d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <pvPortMalloc+0x6c>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	617b      	str	r3, [r7, #20]
}
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d069      	beq.n	80057d2 <pvPortMalloc+0x146>
 80056fe:	4b42      	ldr	r3, [pc, #264]	; (8005808 <pvPortMalloc+0x17c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	429a      	cmp	r2, r3
 8005706:	d864      	bhi.n	80057d2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005708:	4b40      	ldr	r3, [pc, #256]	; (800580c <pvPortMalloc+0x180>)
 800570a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800570c:	4b3f      	ldr	r3, [pc, #252]	; (800580c <pvPortMalloc+0x180>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005712:	e004      	b.n	800571e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	429a      	cmp	r2, r3
 8005726:	d903      	bls.n	8005730 <pvPortMalloc+0xa4>
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f1      	bne.n	8005714 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005730:	4b33      	ldr	r3, [pc, #204]	; (8005800 <pvPortMalloc+0x174>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005736:	429a      	cmp	r2, r3
 8005738:	d04b      	beq.n	80057d2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2208      	movs	r2, #8
 8005740:	4413      	add	r3, r2
 8005742:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	1ad2      	subs	r2, r2, r3
 8005754:	2308      	movs	r3, #8
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	429a      	cmp	r2, r3
 800575a:	d91f      	bls.n	800579c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800575c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4413      	add	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <pvPortMalloc+0xf8>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	613b      	str	r3, [r7, #16]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	1ad2      	subs	r2, r2, r3
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005796:	69b8      	ldr	r0, [r7, #24]
 8005798:	f000 f8f8 	bl	800598c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800579c:	4b1a      	ldr	r3, [pc, #104]	; (8005808 <pvPortMalloc+0x17c>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	4a18      	ldr	r2, [pc, #96]	; (8005808 <pvPortMalloc+0x17c>)
 80057a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057aa:	4b17      	ldr	r3, [pc, #92]	; (8005808 <pvPortMalloc+0x17c>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4b18      	ldr	r3, [pc, #96]	; (8005810 <pvPortMalloc+0x184>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d203      	bcs.n	80057be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057b6:	4b14      	ldr	r3, [pc, #80]	; (8005808 <pvPortMalloc+0x17c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a15      	ldr	r2, [pc, #84]	; (8005810 <pvPortMalloc+0x184>)
 80057bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	4b10      	ldr	r3, [pc, #64]	; (8005804 <pvPortMalloc+0x178>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057d2:	f7ff f8c7 	bl	8004964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <pvPortMalloc+0x16a>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	60fb      	str	r3, [r7, #12]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <pvPortMalloc+0x168>
	return pvReturn;
 80057f6:	69fb      	ldr	r3, [r7, #28]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3728      	adds	r7, #40	; 0x28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20001150 	.word	0x20001150
 8005804:	2000115c 	.word	0x2000115c
 8005808:	20001154 	.word	0x20001154
 800580c:	20001148 	.word	0x20001148
 8005810:	20001158 	.word	0x20001158

08005814 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d048      	beq.n	80058b8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005826:	2308      	movs	r3, #8
 8005828:	425b      	negs	r3, r3
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4413      	add	r3, r2
 800582e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	4b21      	ldr	r3, [pc, #132]	; (80058c0 <vPortFree+0xac>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10a      	bne.n	8005858 <vPortFree+0x44>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	60fb      	str	r3, [r7, #12]
}
 8005854:	bf00      	nop
 8005856:	e7fe      	b.n	8005856 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <vPortFree+0x62>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60bb      	str	r3, [r7, #8]
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <vPortFree+0xac>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4013      	ands	r3, r2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d019      	beq.n	80058b8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d115      	bne.n	80058b8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <vPortFree+0xac>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	43db      	mvns	r3, r3
 8005896:	401a      	ands	r2, r3
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800589c:	f7ff f854 	bl	8004948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <vPortFree+0xb0>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4413      	add	r3, r2
 80058aa:	4a06      	ldr	r2, [pc, #24]	; (80058c4 <vPortFree+0xb0>)
 80058ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058ae:	6938      	ldr	r0, [r7, #16]
 80058b0:	f000 f86c 	bl	800598c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80058b4:	f7ff f856 	bl	8004964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058b8:	bf00      	nop
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	2000115c 	.word	0x2000115c
 80058c4:	20001154 	.word	0x20001154

080058c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80058d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058d4:	4b27      	ldr	r3, [pc, #156]	; (8005974 <prvHeapInit+0xac>)
 80058d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00c      	beq.n	80058fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3307      	adds	r3, #7
 80058e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0307 	bic.w	r3, r3, #7
 80058ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	4a1f      	ldr	r2, [pc, #124]	; (8005974 <prvHeapInit+0xac>)
 80058f8:	4413      	add	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005900:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <prvHeapInit+0xb0>)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005906:	4b1c      	ldr	r3, [pc, #112]	; (8005978 <prvHeapInit+0xb0>)
 8005908:	2200      	movs	r2, #0
 800590a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	4413      	add	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005914:	2208      	movs	r2, #8
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0307 	bic.w	r3, r3, #7
 8005922:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4a15      	ldr	r2, [pc, #84]	; (800597c <prvHeapInit+0xb4>)
 8005928:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800592a:	4b14      	ldr	r3, [pc, #80]	; (800597c <prvHeapInit+0xb4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2200      	movs	r2, #0
 8005930:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005932:	4b12      	ldr	r3, [pc, #72]	; (800597c <prvHeapInit+0xb4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2200      	movs	r2, #0
 8005938:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	1ad2      	subs	r2, r2, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005948:	4b0c      	ldr	r3, [pc, #48]	; (800597c <prvHeapInit+0xb4>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	4a0a      	ldr	r2, [pc, #40]	; (8005980 <prvHeapInit+0xb8>)
 8005956:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	4a09      	ldr	r2, [pc, #36]	; (8005984 <prvHeapInit+0xbc>)
 800595e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005960:	4b09      	ldr	r3, [pc, #36]	; (8005988 <prvHeapInit+0xc0>)
 8005962:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005966:	601a      	str	r2, [r3, #0]
}
 8005968:	bf00      	nop
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000548 	.word	0x20000548
 8005978:	20001148 	.word	0x20001148
 800597c:	20001150 	.word	0x20001150
 8005980:	20001158 	.word	0x20001158
 8005984:	20001154 	.word	0x20001154
 8005988:	2000115c 	.word	0x2000115c

0800598c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005994:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <prvInsertBlockIntoFreeList+0xa8>)
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	e002      	b.n	80059a0 <prvInsertBlockIntoFreeList+0x14>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d8f7      	bhi.n	800599a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	4413      	add	r3, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d108      	bne.n	80059ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	441a      	add	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	441a      	add	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d118      	bne.n	8005a14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <prvInsertBlockIntoFreeList+0xac>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d00d      	beq.n	8005a0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	441a      	add	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	e008      	b.n	8005a1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <prvInsertBlockIntoFreeList+0xac>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e003      	b.n	8005a1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d002      	beq.n	8005a2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a2a:	bf00      	nop
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	20001148 	.word	0x20001148
 8005a38:	20001150 	.word	0x20001150

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	2600      	movs	r6, #0
 8005a40:	4d0c      	ldr	r5, [pc, #48]	; (8005a74 <__libc_init_array+0x38>)
 8005a42:	4c0d      	ldr	r4, [pc, #52]	; (8005a78 <__libc_init_array+0x3c>)
 8005a44:	1b64      	subs	r4, r4, r5
 8005a46:	10a4      	asrs	r4, r4, #2
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	f000 f830 	bl	8005ab0 <_init>
 8005a50:	2600      	movs	r6, #0
 8005a52:	4d0a      	ldr	r5, [pc, #40]	; (8005a7c <__libc_init_array+0x40>)
 8005a54:	4c0a      	ldr	r4, [pc, #40]	; (8005a80 <__libc_init_array+0x44>)
 8005a56:	1b64      	subs	r4, r4, r5
 8005a58:	10a4      	asrs	r4, r4, #2
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	08005b70 	.word	0x08005b70
 8005a78:	08005b70 	.word	0x08005b70
 8005a7c:	08005b70 	.word	0x08005b70
 8005a80:	08005b74 	.word	0x08005b74

08005a84 <memcpy>:
 8005a84:	440a      	add	r2, r1
 8005a86:	4291      	cmp	r1, r2
 8005a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a8c:	d100      	bne.n	8005a90 <memcpy+0xc>
 8005a8e:	4770      	bx	lr
 8005a90:	b510      	push	{r4, lr}
 8005a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a96:	4291      	cmp	r1, r2
 8005a98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a9c:	d1f9      	bne.n	8005a92 <memcpy+0xe>
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <memset>:
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4402      	add	r2, r0
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d100      	bne.n	8005aaa <memset+0xa>
 8005aa8:	4770      	bx	lr
 8005aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8005aae:	e7f9      	b.n	8005aa4 <memset+0x4>

08005ab0 <_init>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	bf00      	nop
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr

08005abc <_fini>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	bf00      	nop
 8005ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac2:	bc08      	pop	{r3}
 8005ac4:	469e      	mov	lr, r3
 8005ac6:	4770      	bx	lr
