
Dev Board CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006438  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800661c  0800661c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800661c  0800661c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800661c  0800661c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800661c  0800661c  0001661c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006620  08006620  00016620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d4  20000010  08006634  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011e4  08006634  000211e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149fe  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000391c  00000000  00000000  00034a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  00038358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  000396a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f27  00000000  00000000  0003a850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152f8  00000000  00000000  00054777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097816  00000000  00000000  00069a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e1c  00000000  00000000  001012d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006530 	.word	0x08006530

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006530 	.word	0x08006530

08000150 <servo_init>:

static TIM_HandleTypeDef htim2;
static void MX_TIM2_Init(void);
static void Error_Handler(void);

void servo_init(){
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 8000154:	f000 f802 	bl	800015c <MX_TIM2_Init>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08e      	sub	sp, #56	; 0x38
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000170:	f107 0320 	add.w	r3, r7, #32
 8000174:	2200      	movs	r2, #0
 8000176:	601a      	str	r2, [r3, #0]
 8000178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800017a:	1d3b      	adds	r3, r7, #4
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	60da      	str	r2, [r3, #12]
 8000186:	611a      	str	r2, [r3, #16]
 8000188:	615a      	str	r2, [r3, #20]
 800018a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800018c:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <MX_TIM2_Init+0xe8>)
 800018e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8000194:	4b2b      	ldr	r3, [pc, #172]	; (8000244 <MX_TIM2_Init+0xe8>)
 8000196:	229f      	movs	r2, #159	; 0x9f
 8000198:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800019a:	4b2a      	ldr	r3, [pc, #168]	; (8000244 <MX_TIM2_Init+0xe8>)
 800019c:	2200      	movs	r2, #0
 800019e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80001a0:	4b28      	ldr	r3, [pc, #160]	; (8000244 <MX_TIM2_Init+0xe8>)
 80001a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80001a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80001a8:	4b26      	ldr	r3, [pc, #152]	; (8000244 <MX_TIM2_Init+0xe8>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80001ae:	4b25      	ldr	r3, [pc, #148]	; (8000244 <MX_TIM2_Init+0xe8>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80001b4:	4823      	ldr	r0, [pc, #140]	; (8000244 <MX_TIM2_Init+0xe8>)
 80001b6:	f003 f9b9 	bl	800352c <HAL_TIM_Base_Init>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d001      	beq.n	80001c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80001c0:	f000 f842 	bl	8000248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80001c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	4619      	mov	r1, r3
 80001d0:	481c      	ldr	r0, [pc, #112]	; (8000244 <MX_TIM2_Init+0xe8>)
 80001d2:	f003 fd69 	bl	8003ca8 <HAL_TIM_ConfigClockSource>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80001dc:	f000 f834 	bl	8000248 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80001e0:	4818      	ldr	r0, [pc, #96]	; (8000244 <MX_TIM2_Init+0xe8>)
 80001e2:	f003 fa45 	bl	8003670 <HAL_TIM_PWM_Init>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80001ec:	f000 f82c 	bl	8000248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80001f0:	2300      	movs	r3, #0
 80001f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80001f4:	2300      	movs	r3, #0
 80001f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80001f8:	f107 0320 	add.w	r3, r7, #32
 80001fc:	4619      	mov	r1, r3
 80001fe:	4811      	ldr	r0, [pc, #68]	; (8000244 <MX_TIM2_Init+0xe8>)
 8000200:	f004 f8de 	bl	80043c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800020a:	f000 f81d 	bl	8000248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800020e:	2360      	movs	r3, #96	; 0x60
 8000210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000216:	2300      	movs	r3, #0
 8000218:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	220c      	movs	r2, #12
 8000222:	4619      	mov	r1, r3
 8000224:	4807      	ldr	r0, [pc, #28]	; (8000244 <MX_TIM2_Init+0xe8>)
 8000226:	f003 fc81 	bl	8003b2c <HAL_TIM_PWM_ConfigChannel>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000230:	f000 f80a 	bl	8000248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000234:	4803      	ldr	r0, [pc, #12]	; (8000244 <MX_TIM2_Init+0xe8>)
 8000236:	f000 ff15 	bl	8001064 <HAL_TIM_MspPostInit>

}
 800023a:	bf00      	nop
 800023c:	3738      	adds	r7, #56	; 0x38
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	2000002c 	.word	0x2000002c

08000248 <Error_Handler>:

static void Error_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800024c:	b672      	cpsid	i
}
 800024e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000250:	e7fe      	b.n	8000250 <Error_Handler+0x8>

08000252 <current_sense_init>:
static void Error_Handler(void);

ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

void current_sense_init(){
 8000252:	b580      	push	{r7, lr}
 8000254:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8000256:	f000 f809 	bl	800026c <MX_ADC1_Init>
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}

0800025e <pot_sense_init>:
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	raw = HAL_ADC_GetValue(&hadc1);
	return raw;
}

void pot_sense_init(){
 800025e:	b580      	push	{r7, lr}
 8000260:	af00      	add	r7, sp, #0
	MX_ADC2_Init();
 8000262:	f000 f841 	bl	80002e8 <MX_ADC2_Init>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800027c:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <MX_ADC1_Init+0x74>)
 800027e:	4a19      	ldr	r2, [pc, #100]	; (80002e4 <MX_ADC1_Init+0x78>)
 8000280:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_ADC1_Init+0x74>)
 8000284:	2200      	movs	r2, #0
 8000286:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_ADC1_Init+0x74>)
 800028a:	2200      	movs	r2, #0
 800028c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_ADC1_Init+0x74>)
 8000290:	2200      	movs	r2, #0
 8000292:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_ADC1_Init+0x74>)
 8000296:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800029a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <MX_ADC1_Init+0x74>)
 800029e:	2200      	movs	r2, #0
 80002a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_ADC1_Init+0x74>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <MX_ADC1_Init+0x74>)
 80002aa:	f001 f95b 	bl	8001564 <HAL_ADC_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002b4:	f000 f856 	bl	8000364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002b8:	2304      	movs	r3, #4
 80002ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002bc:	2301      	movs	r3, #1
 80002be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4619      	mov	r1, r3
 80002c8:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_ADC1_Init+0x74>)
 80002ca:	f001 fa23 	bl	8001714 <HAL_ADC_ConfigChannel>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002d4:	f000 f846 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000074 	.word	0x20000074
 80002e4:	40012400 	.word	0x40012400

080002e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <MX_ADC2_Init+0x74>)
 80002fa:	4a19      	ldr	r2, [pc, #100]	; (8000360 <MX_ADC2_Init+0x78>)
 80002fc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fe:	4b17      	ldr	r3, [pc, #92]	; (800035c <MX_ADC2_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <MX_ADC2_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <MX_ADC2_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_ADC2_Init+0x74>)
 8000312:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000316:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000318:	4b10      	ldr	r3, [pc, #64]	; (800035c <MX_ADC2_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_ADC2_Init+0x74>)
 8000320:	2201      	movs	r2, #1
 8000322:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <MX_ADC2_Init+0x74>)
 8000326:	f001 f91d 	bl	8001564 <HAL_ADC_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000330:	f000 f818 	bl	8000364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000334:	2305      	movs	r3, #5
 8000336:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000338:	2301      	movs	r3, #1
 800033a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4619      	mov	r1, r3
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_ADC2_Init+0x74>)
 8000346:	f001 f9e5 	bl	8001714 <HAL_ADC_ConfigChannel>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000350:	f000 f808 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200000a4 	.word	0x200000a4
 8000360:	40012800 	.word	0x40012800

08000364 <Error_Handler>:

static void Error_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	e7fe      	b.n	800036c <Error_Handler+0x8>

0800036e <Error_Handler>:
#include "stm32f1xx_hal.h"
#include "cmsis_os.h"


static void Error_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000372:	b672      	cpsid	i
}
 8000374:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000376:	e7fe      	b.n	8000376 <Error_Handler+0x8>

08000378 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b08a      	sub	sp, #40	; 0x28
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037e:	f107 0320 	add.w	r3, r7, #32
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]
 8000396:	615a      	str	r2, [r3, #20]
 8000398:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800039a:	4b28      	ldr	r3, [pc, #160]	; (800043c <MX_TIM3_Init+0xc4>)
 800039c:	4a28      	ldr	r2, [pc, #160]	; (8000440 <MX_TIM3_Init+0xc8>)
 800039e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 80003a0:	4b26      	ldr	r3, [pc, #152]	; (800043c <MX_TIM3_Init+0xc4>)
 80003a2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a8:	4b24      	ldr	r3, [pc, #144]	; (800043c <MX_TIM3_Init+0xc4>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80003ae:	4b23      	ldr	r3, [pc, #140]	; (800043c <MX_TIM3_Init+0xc4>)
 80003b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b6:	4b21      	ldr	r3, [pc, #132]	; (800043c <MX_TIM3_Init+0xc4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003bc:	4b1f      	ldr	r3, [pc, #124]	; (800043c <MX_TIM3_Init+0xc4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003c2:	481e      	ldr	r0, [pc, #120]	; (800043c <MX_TIM3_Init+0xc4>)
 80003c4:	f003 f954 	bl	8003670 <HAL_TIM_PWM_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80003ce:	f7ff ffce 	bl	800036e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d2:	2300      	movs	r3, #0
 80003d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003da:	f107 0320 	add.w	r3, r7, #32
 80003de:	4619      	mov	r1, r3
 80003e0:	4816      	ldr	r0, [pc, #88]	; (800043c <MX_TIM3_Init+0xc4>)
 80003e2:	f003 ffed 	bl	80043c0 <HAL_TIMEx_MasterConfigSynchronization>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80003ec:	f7ff ffbf 	bl	800036e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003f0:	2360      	movs	r3, #96	; 0x60
 80003f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2204      	movs	r2, #4
 8000404:	4619      	mov	r1, r3
 8000406:	480d      	ldr	r0, [pc, #52]	; (800043c <MX_TIM3_Init+0xc4>)
 8000408:	f003 fb90 	bl	8003b2c <HAL_TIM_PWM_ConfigChannel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000412:	f7ff ffac 	bl	800036e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	220c      	movs	r2, #12
 800041a:	4619      	mov	r1, r3
 800041c:	4807      	ldr	r0, [pc, #28]	; (800043c <MX_TIM3_Init+0xc4>)
 800041e:	f003 fb85 	bl	8003b2c <HAL_TIM_PWM_ConfigChannel>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000428:	f7ff ffa1 	bl	800036e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <MX_TIM3_Init+0xc4>)
 800042e:	f000 fe19 	bl	8001064 <HAL_TIM_MspPostInit>

}
 8000432:	bf00      	nop
 8000434:	3728      	adds	r7, #40	; 0x28
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	200000d4 	.word	0x200000d4
 8000440:	40000400 	.word	0x40000400

08000444 <blinkers_init>:
uint8_t left_state  = 0;
uint8_t right_state = 0;



void blinkers_init(){
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 8000448:	f7ff ff96 	bl	8000378 <MX_TIM3_Init>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}

08000450 <set_blinkers>:

void set_blinkers(uint8_t hazard, uint8_t right, uint8_t left){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
 800045a:	460b      	mov	r3, r1
 800045c:	71bb      	strb	r3, [r7, #6]
 800045e:	4613      	mov	r3, r2
 8000460:	717b      	strb	r3, [r7, #5]
	if (hazard == 1 && hazard_state == 0){
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d106      	bne.n	8000476 <set_blinkers+0x26>
 8000468:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <set_blinkers+0x98>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d102      	bne.n	8000476 <set_blinkers+0x26>
		hazards_on();
 8000470:	f000 f88c 	bl	800058c <hazards_on>
 8000474:	e033      	b.n	80004de <set_blinkers+0x8e>
	}
	else if (hazard == 0 && hazard_state == 1){
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d106      	bne.n	800048a <set_blinkers+0x3a>
 800047c:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <set_blinkers+0x98>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d102      	bne.n	800048a <set_blinkers+0x3a>
		hazards_off();
 8000484:	f000 f890 	bl	80005a8 <hazards_off>
 8000488:	e029      	b.n	80004de <set_blinkers+0x8e>
	}
	else if (hazard == 0){
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d126      	bne.n	80004de <set_blinkers+0x8e>
		if (left == 1 && left_state == 0){
 8000490:	797b      	ldrb	r3, [r7, #5]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d106      	bne.n	80004a4 <set_blinkers+0x54>
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <set_blinkers+0x9c>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d102      	bne.n	80004a4 <set_blinkers+0x54>
			left_blinker_on();
 800049e:	f000 f829 	bl	80004f4 <left_blinker_on>
 80004a2:	e008      	b.n	80004b6 <set_blinkers+0x66>
		}
		else if (left == 0 && left_state == 1){
 80004a4:	797b      	ldrb	r3, [r7, #5]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d105      	bne.n	80004b6 <set_blinkers+0x66>
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <set_blinkers+0x9c>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d101      	bne.n	80004b6 <set_blinkers+0x66>
			left_blinker_off();
 80004b2:	f000 f835 	bl	8000520 <left_blinker_off>
		}
		if (right == 1 && right_state == 0){
 80004b6:	79bb      	ldrb	r3, [r7, #6]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d106      	bne.n	80004ca <set_blinkers+0x7a>
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <set_blinkers+0xa0>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d102      	bne.n	80004ca <set_blinkers+0x7a>
			right_blinker_on();
 80004c4:	f000 f83c 	bl	8000540 <right_blinker_on>
 80004c8:	e009      	b.n	80004de <set_blinkers+0x8e>
		}
		else if (right == 0 && right_state == 1){
 80004ca:	79bb      	ldrb	r3, [r7, #6]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d106      	bne.n	80004de <set_blinkers+0x8e>
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <set_blinkers+0xa0>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d102      	bne.n	80004de <set_blinkers+0x8e>
			right_blinker_off();
 80004d8:	f000 f848 	bl	800056c <right_blinker_off>
		}
	}
}
 80004dc:	e7ff      	b.n	80004de <set_blinkers+0x8e>
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2000011c 	.word	0x2000011c
 80004ec:	2000011d 	.word	0x2000011d
 80004f0:	2000011e 	.word	0x2000011e

080004f4 <left_blinker_on>:


void left_blinker_on(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	TIM3->CCR2 = 500;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <left_blinker_on+0x20>)
 80004fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004fe:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000500:	2104      	movs	r1, #4
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <left_blinker_on+0x24>)
 8000504:	f003 f904 	bl	8003710 <HAL_TIM_PWM_Start>
	left_state = 1;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <left_blinker_on+0x28>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40000400 	.word	0x40000400
 8000518:	200000d4 	.word	0x200000d4
 800051c:	2000011d 	.word	0x2000011d

08000520 <left_blinker_off>:

void left_blinker_off(){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000524:	2104      	movs	r1, #4
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <left_blinker_off+0x18>)
 8000528:	f003 f994 	bl	8003854 <HAL_TIM_PWM_Stop>
	left_state = 0;
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <left_blinker_off+0x1c>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000d4 	.word	0x200000d4
 800053c:	2000011d 	.word	0x2000011d

08000540 <right_blinker_on>:

void right_blinker_on(){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	TIM3->CCR4 = 500;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <right_blinker_on+0x20>)
 8000546:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800054a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800054c:	210c      	movs	r1, #12
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <right_blinker_on+0x24>)
 8000550:	f003 f8de 	bl	8003710 <HAL_TIM_PWM_Start>
	right_state = 1;
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <right_blinker_on+0x28>)
 8000556:	2201      	movs	r2, #1
 8000558:	701a      	strb	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40000400 	.word	0x40000400
 8000564:	200000d4 	.word	0x200000d4
 8000568:	2000011e 	.word	0x2000011e

0800056c <right_blinker_off>:

void right_blinker_off(){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8000570:	210c      	movs	r1, #12
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <right_blinker_off+0x18>)
 8000574:	f003 f96e 	bl	8003854 <HAL_TIM_PWM_Stop>
	right_state = 0;
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <right_blinker_off+0x1c>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000d4 	.word	0x200000d4
 8000588:	2000011e 	.word	0x2000011e

0800058c <hazards_on>:


void hazards_on(){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	left_blinker_on();
 8000590:	f7ff ffb0 	bl	80004f4 <left_blinker_on>
	right_blinker_on();
 8000594:	f7ff ffd4 	bl	8000540 <right_blinker_on>
	hazard_state = 1;
 8000598:	4b02      	ldr	r3, [pc, #8]	; (80005a4 <hazards_on+0x18>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000011c 	.word	0x2000011c

080005a8 <hazards_off>:

void hazards_off(){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	left_blinker_off();
 80005ac:	f7ff ffb8 	bl	8000520 <left_blinker_off>
	right_blinker_off();
 80005b0:	f7ff ffdc 	bl	800056c <right_blinker_off>
	hazard_state = 0;
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <hazards_off+0x18>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000011c 	.word	0x2000011c

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a06      	ldr	r2, [pc, #24]	; (80005ec <vApplicationGetIdleTaskMemory+0x28>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000120 	.word	0x20000120
 80005f0:	20000174 	.word	0x20000174

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b09e      	sub	sp, #120	; 0x78
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80005fa:	f000 ff5d 	bl	80014b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f88f 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8dd 	bl	80007c0 <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_1_GPIO_Port, GPIO_1_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060c:	483a      	ldr	r0, [pc, #232]	; (80006f8 <main+0x104>)
 800060e:	f002 fa70 	bl	8002af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIO_3_GPIO_Port, GPIO_3_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	4837      	ldr	r0, [pc, #220]	; (80006f8 <main+0x104>)
 800061a:	f002 fa6a 	bl	8002af2 <HAL_GPIO_WritePin>
  GPIO_PinState zone_indicator = HAL_GPIO_ReadPin(GPIO_2_GPIO_Port,GPIO_2_Pin);
 800061e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000622:	4835      	ldr	r0, [pc, #212]	; (80006f8 <main+0x104>)
 8000624:	f002 fa4e 	bl	8002ac4 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  /* USER CODE BEGIN 2 */
  blinkers_init();
 800062e:	f7ff ff09 	bl	8000444 <blinkers_init>
  can_init();
 8000632:	f000 fe43 	bl	80012bc <can_init>
  // Front Zone is reset and Rear is set
  if (zone_indicator == GPIO_PIN_SET){ // Rear
 8000636:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800063a:	2b01      	cmp	r3, #1
 800063c:	d111      	bne.n	8000662 <main+0x6e>
	osThreadDef(motorControl, motor_controller, osPriorityHigh, 0, 128);
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <main+0x108>)
 8000640:	1d3c      	adds	r4, r7, #4
 8000642:	461d      	mov	r5, r3
 8000644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	motorControlHandle = osThreadCreate(osThread(motorControl), NULL);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f003 ff41 	bl	80044dc <osThreadCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a28      	ldr	r2, [pc, #160]	; (8000700 <main+0x10c>)
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	e005      	b.n	800066e <main+0x7a>
  }
  else{ // Front
	servo_init();
 8000662:	f7ff fd75 	bl	8000150 <servo_init>
	current_sense_init();
 8000666:	f7ff fdf4 	bl	8000252 <current_sense_init>
	pot_sense_init();
 800066a:	f7ff fdf8 	bl	800025e <pot_sense_init>
//  mcuStatusHandle = osThreadCreate(osThread(mcuStatus), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(canRecieve, can_rx, osPriorityHigh, 0, 128);
 800066e:	4b25      	ldr	r3, [pc, #148]	; (8000704 <main+0x110>)
 8000670:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000674:	461d      	mov	r5, r3
 8000676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canRecieveHandle = osThreadCreate(osThread(canRecieve), NULL);
 8000682:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f003 ff27 	bl	80044dc <osThreadCreate>
 800068e:	4603      	mov	r3, r0
 8000690:	4a1d      	ldr	r2, [pc, #116]	; (8000708 <main+0x114>)
 8000692:	6013      	str	r3, [r2, #0]


  osThreadDef(selfTest, self_test, osPriorityNormal, 0, 128);
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <main+0x118>)
 8000696:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800069a:	461d      	mov	r5, r3
 800069c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  selfTestHandle = osThreadCreate(osThread(selfTest), NULL);
 80006a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 ff14 	bl	80044dc <osThreadCreate>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <main+0x11c>)
 80006b8:	6013      	str	r3, [r2, #0]

  osThreadDef(canTransmit, can_tx, osPriorityNormal, 0, 128);
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <main+0x120>)
 80006bc:	f107 0420 	add.w	r4, r7, #32
 80006c0:	461d      	mov	r5, r3
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTransmitHandle = osThreadCreate(osThread(canTransmit), NULL);
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 ff01 	bl	80044dc <osThreadCreate>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <main+0x124>)
 80006de:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006e0:	f003 fef5 	bl	80044ce <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 80006e4:	2104      	movs	r1, #4
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <main+0x128>)
 80006e8:	f002 fa1b 	bl	8002b22 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80006ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f0:	f000 ff14 	bl	800151c <HAL_Delay>
	  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 80006f4:	e7f6      	b.n	80006e4 <main+0xf0>
 80006f6:	bf00      	nop
 80006f8:	40010c00 	.word	0x40010c00
 80006fc:	0800657c 	.word	0x0800657c
 8000700:	20000374 	.word	0x20000374
 8000704:	08006598 	.word	0x08006598
 8000708:	20000378 	.word	0x20000378
 800070c:	080065b4 	.word	0x080065b4
 8000710:	20000380 	.word	0x20000380
 8000714:	080065d0 	.word	0x080065d0
 8000718:	2000037c 	.word	0x2000037c
 800071c:	40010800 	.word	0x40010800

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072a:	2228      	movs	r2, #40	; 0x28
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f005 fef6 	bl	8006520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000750:	2301      	movs	r3, #1
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075a:	2300      	movs	r3, #0
 800075c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000762:	4618      	mov	r0, r3
 8000764:	f002 f9f6 	bl	8002b54 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x52>
  {
    Error_Handler();
 800076e:	f000 fa51 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000776:	2301      	movs	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fc63 	bl	8003058 <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000798:	f000 fa3c 	bl	8000c14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800079c:	2302      	movs	r3, #2
 800079e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fe0a 	bl	80033c0 <HAL_RCCEx_PeriphCLKConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007b2:	f000 fa2f 	bl	8000c14 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d4:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <MX_GPIO_Init+0xe8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a33      	ldr	r2, [pc, #204]	; (80008a8 <MX_GPIO_Init+0xe8>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <MX_GPIO_Init+0xe8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0310 	and.w	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ec:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_GPIO_Init+0xe8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a2d      	ldr	r2, [pc, #180]	; (80008a8 <MX_GPIO_Init+0xe8>)
 80007f2:	f043 0320 	orr.w	r3, r3, #32
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_GPIO_Init+0xe8>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0320 	and.w	r3, r3, #32
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_GPIO_Init+0xe8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a27      	ldr	r2, [pc, #156]	; (80008a8 <MX_GPIO_Init+0xe8>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_GPIO_Init+0xe8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_GPIO_Init+0xe8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <MX_GPIO_Init+0xe8>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_GPIO_Init+0xe8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0308 	and.w	r3, r3, #8
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_IND_GPIO_Port, MCU_IND_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2104      	movs	r1, #4
 8000838:	481c      	ldr	r0, [pc, #112]	; (80008ac <MX_GPIO_Init+0xec>)
 800083a:	f002 f95a 	bl	8002af2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN2_Pin|MOTOR_IN1_Pin|GPIO_1_Pin|GPIO_2_Pin
 800083e:	2200      	movs	r2, #0
 8000840:	f247 4104 	movw	r1, #29700	; 0x7404
 8000844:	481a      	ldr	r0, [pc, #104]	; (80008b0 <MX_GPIO_Init+0xf0>)
 8000846:	f002 f954 	bl	8002af2 <HAL_GPIO_WritePin>
                          |GPIO_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800084a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	4619      	mov	r1, r3
 800085e:	4815      	ldr	r0, [pc, #84]	; (80008b4 <MX_GPIO_Init+0xf4>)
 8000860:	f001 ffac 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_IND_Pin */
  GPIO_InitStruct.Pin = MCU_IND_Pin;
 8000864:	2304      	movs	r3, #4
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2302      	movs	r3, #2
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_IND_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	480c      	ldr	r0, [pc, #48]	; (80008ac <MX_GPIO_Init+0xec>)
 800087c:	f001 ff9e 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN2_Pin MOTOR_IN1_Pin GPIO_1_Pin GPIO_2_Pin
                           GPIO_3_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN2_Pin|MOTOR_IN1_Pin|GPIO_1_Pin|GPIO_2_Pin
 8000880:	f247 4304 	movw	r3, #29700	; 0x7404
 8000884:	613b      	str	r3, [r7, #16]
                          |GPIO_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2302      	movs	r3, #2
 8000890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_GPIO_Init+0xf0>)
 800089a:	f001 ff8f 	bl	80027bc <HAL_GPIO_Init>

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010800 	.word	0x40010800
 80008b0:	40010c00 	.word	0x40010c00
 80008b4:	40011000 	.word	0x40011000

080008b8 <can_rx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink */
void can_rx(void const * argument)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink */
	can_msg_t msg;
	xQueueMotor = xQueueCreate( 10,sizeof(pi_motor_command));
 80008c0:	2200      	movs	r2, #0
 80008c2:	2102      	movs	r1, #2
 80008c4:	200a      	movs	r0, #10
 80008c6:	f003 ff81 	bl	80047cc <xQueueGenericCreate>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a1a      	ldr	r2, [pc, #104]	; (8000938 <can_rx+0x80>)
 80008ce:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	if( xQueueCANRx != NULL )
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <can_rx+0x84>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d02a      	beq.n	800092e <can_rx+0x76>
	{
	  if( xQueueReceive( xQueueCANRx,
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <can_rx+0x84>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f107 010c 	add.w	r1, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f004 f966 	bl	8004bb4 <xQueueReceive>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d01f      	beq.n	800092e <can_rx+0x76>
						 &( msg ),
						 ( TickType_t ) 0 ))
	  {
		 if (msg.id == 0x100){
 80008ee:	89bb      	ldrh	r3, [r7, #12]
 80008f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f4:	d112      	bne.n	800091c <can_rx+0x64>
			 set_blinkers(msg.msg[3],msg.msg[4],msg.msg[5]);
 80008f6:	7c7b      	ldrb	r3, [r7, #17]
 80008f8:	7cb9      	ldrb	r1, [r7, #18]
 80008fa:	7cfa      	ldrb	r2, [r7, #19]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fda7 	bl	8000450 <set_blinkers>
			 pi_motor_command motor_command;
			 motor_command.brake = msg.msg[0];
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	723b      	strb	r3, [r7, #8]
			 motor_command.throttle = msg.msg[1];
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	727b      	strb	r3, [r7, #9]
			 xQueueSend(xQueueMotor, &motor_command,( TickType_t ) 10);
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <can_rx+0x80>)
 800090c:	6818      	ldr	r0, [r3, #0]
 800090e:	f107 0108 	add.w	r1, r7, #8
 8000912:	2300      	movs	r3, #0
 8000914:	220a      	movs	r2, #10
 8000916:	f003 ffb7 	bl	8004888 <xQueueGenericSend>
 800091a:	e008      	b.n	800092e <can_rx+0x76>
		 }
		 else if (msg.id == 0x446){
 800091c:	89bb      	ldrh	r3, [r7, #12]
 800091e:	f240 4246 	movw	r2, #1094	; 0x446
 8000922:	4293      	cmp	r3, r2
 8000924:	d103      	bne.n	800092e <can_rx+0x76>
			 HAL_GPIO_TogglePin(MCU_IND_GPIO_Port, MCU_IND_Pin);
 8000926:	2104      	movs	r1, #4
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <can_rx+0x88>)
 800092a:	f002 f8fa 	bl	8002b22 <HAL_GPIO_TogglePin>
		 }
	  }
	}
	osDelay(10);
 800092e:	200a      	movs	r0, #10
 8000930:	f003 fe20 	bl	8004574 <osDelay>
	if( xQueueCANRx != NULL )
 8000934:	e7cc      	b.n	80008d0 <can_rx+0x18>
 8000936:	bf00      	nop
 8000938:	20000384 	.word	0x20000384
 800093c:	20000488 	.word	0x20000488
 8000940:	40010800 	.word	0x40010800

08000944 <can_tx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink */
void can_tx(void const * argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	uint8_t data[8];
	uint8_t id = (uint8_t)0x300;
 800094c:	2300      	movs	r3, #0
 800094e:	75bb      	strb	r3, [r7, #22]
  zone_state_e zone_state = NORMAL;
 8000950:	2304      	movs	r3, #4
 8000952:	75fb      	strb	r3, [r7, #23]
  zone_state_e zone_state_queue = NORMAL;
 8000954:	2304      	movs	r3, #4
 8000956:	72fb      	strb	r3, [r7, #11]
  for(;;)
  {
	if (xQueueCANState != NULL){
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <can_tx+0x90>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00c      	beq.n	800097a <can_tx+0x36>
		if (xQueueReceive(xQueueCANState, &zone_state_queue, ( TickType_t ) 0) == pdPASS){
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <can_tx+0x90>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f107 010b 	add.w	r1, r7, #11
 8000968:	2200      	movs	r2, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f004 f922 	bl	8004bb4 <xQueueReceive>
 8000970:	4603      	mov	r3, r0
 8000972:	2b01      	cmp	r3, #1
 8000974:	d101      	bne.n	800097a <can_tx+0x36>
			zone_state = zone_state_queue;
 8000976:	7afb      	ldrb	r3, [r7, #11]
 8000978:	75fb      	strb	r3, [r7, #23]
		}
	}
	switch(zone_state){
 800097a:	7dfb      	ldrb	r3, [r7, #23]
 800097c:	3b01      	subs	r3, #1
 800097e:	2b04      	cmp	r3, #4
 8000980:	d824      	bhi.n	80009cc <can_tx+0x88>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <can_tx+0x44>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	080009cd 	.word	0x080009cd
 800098c:	080009cd 	.word	0x080009cd
 8000990:	080009bd 	.word	0x080009bd
 8000994:	0800099d 	.word	0x0800099d
 8000998:	080009ad 	.word	0x080009ad
	case NORMAL:
		throuple_can_tx(id, data);
 800099c:	f107 020c 	add.w	r2, r7, #12
 80009a0:	7dbb      	ldrb	r3, [r7, #22]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fd37 	bl	8001418 <throuple_can_tx>
		break;
 80009aa:	e00f      	b.n	80009cc <can_tx+0x88>
	case NORMAL_PUSHED:
		throuple_can_tx(id, data);
 80009ac:	f107 020c 	add.w	r2, r7, #12
 80009b0:	7dbb      	ldrb	r3, [r7, #22]
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fd2f 	bl	8001418 <throuple_can_tx>
		break;
 80009ba:	e007      	b.n	80009cc <can_tx+0x88>
	case ERROR_BUTTON:
		break;
	case ERROR_BUTTON_RELEASED:
		break;
	case ERROR_HB:
		throuple_can_tx(id, data);
 80009bc:	f107 020c 	add.w	r2, r7, #12
 80009c0:	7dbb      	ldrb	r3, [r7, #22]
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fd27 	bl	8001418 <throuple_can_tx>
		break;
 80009ca:	bf00      	nop
	}
	osDelay(20);
 80009cc:	2014      	movs	r0, #20
 80009ce:	f003 fdd1 	bl	8004574 <osDelay>
	if (xQueueCANState != NULL){
 80009d2:	e7c1      	b.n	8000958 <can_tx+0x14>
 80009d4:	2000038c 	.word	0x2000038c

080009d8 <motor_control>:
  }
}

void motor_control(zone_state_e state) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	pi_motor_command motor_command;
	motor_direction dir;
	uint8_t speed;
	// Receive CAN
	if (xQueueMotor != NULL){
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <motor_control+0x84>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d02b      	beq.n	8000a42 <motor_control+0x6a>
		if (xQueueReceive(xQueueMotor, &motor_command, ( TickType_t ) 0)){
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <motor_control+0x84>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f107 010c 	add.w	r1, r7, #12
 80009f2:	2200      	movs	r2, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f004 f8dd 	bl	8004bb4 <xQueueReceive>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d020      	beq.n	8000a42 <motor_control+0x6a>
			// Received motor message
			if (motor_command.brake!= 0){
 8000a00:	7b3b      	ldrb	r3, [r7, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d004      	beq.n	8000a10 <motor_control+0x38>
				dir = BRAKE;
 8000a06:	2304      	movs	r3, #4
 8000a08:	73fb      	strb	r3, [r7, #15]
				speed = motor_command.brake;
 8000a0a:	7b3b      	ldrb	r3, [r7, #12]
 8000a0c:	73bb      	strb	r3, [r7, #14]
 8000a0e:	e003      	b.n	8000a18 <motor_control+0x40>
			}
			else {
				dir = FORWARD;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73fb      	strb	r3, [r7, #15]
				speed = motor_command.throttle;
 8000a14:	7b7b      	ldrb	r3, [r7, #13]
 8000a16:	73bb      	strb	r3, [r7, #14]
			}
			// Adjust motor speed
			if (state == NORMAL || state == NORMAL_PUSHED){
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d002      	beq.n	8000a24 <motor_control+0x4c>
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b05      	cmp	r3, #5
 8000a22:	d10e      	bne.n	8000a42 <motor_control+0x6a>
				if (dir == FORWARD){
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d104      	bne.n	8000a34 <motor_control+0x5c>
					set_drive_speed(speed);
 8000a2a:	7bbb      	ldrb	r3, [r7, #14]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f94b 	bl	8000cc8 <set_drive_speed>
 8000a32:	e006      	b.n	8000a42 <motor_control+0x6a>
				}
				else if (dir == BRAKE){
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d103      	bne.n	8000a42 <motor_control+0x6a>
					set_brake_speed(speed);
 8000a3a:	7bbb      	ldrb	r3, [r7, #14]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f951 	bl	8000ce4 <set_brake_speed>
				}
			}
		}
	}
	if (!(state == NORMAL || state == NORMAL_PUSHED)){
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d005      	beq.n	8000a54 <motor_control+0x7c>
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b05      	cmp	r3, #5
 8000a4c:	d002      	beq.n	8000a54 <motor_control+0x7c>
		set_brake_speed(100);
 8000a4e:	2064      	movs	r0, #100	; 0x64
 8000a50:	f000 f948 	bl	8000ce4 <set_brake_speed>
	}
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000384 	.word	0x20000384

08000a60 <motor_controller>:

// Motor Controller Task
void motor_controller(void const * argument){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	motor_init();
 8000a68:	f000 f8d9 	bl	8000c1e <motor_init>
	zone_state_e zone_state_queue = NORMAL;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	73bb      	strb	r3, [r7, #14]
	zone_state_e zone_state = NORMAL;
 8000a70:	2304      	movs	r3, #4
 8000a72:	73fb      	strb	r3, [r7, #15]

	for(;;){
		// Receive State
		if (xQueueMotorState != NULL){
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <motor_controller+0x48>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00c      	beq.n	8000a96 <motor_controller+0x36>
			if (xQueueReceive(xQueueMotorState, &zone_state_queue, ( TickType_t ) 0) == pdPASS){
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <motor_controller+0x48>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f107 010e 	add.w	r1, r7, #14
 8000a84:	2200      	movs	r2, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f004 f894 	bl	8004bb4 <xQueueReceive>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d101      	bne.n	8000a96 <motor_controller+0x36>
				zone_state = zone_state_queue;
 8000a92:	7bbb      	ldrb	r3, [r7, #14]
 8000a94:	73fb      	strb	r3, [r7, #15]
			}
		}
		motor_control(zone_state);
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff9d 	bl	80009d8 <motor_control>

		osDelay(10);
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f003 fd68 	bl	8004574 <osDelay>
		if (xQueueMotorState != NULL){
 8000aa4:	e7e6      	b.n	8000a74 <motor_controller+0x14>
 8000aa6:	bf00      	nop
 8000aa8:	20000388 	.word	0x20000388

08000aac <self_test>:
	}
}

// Self-Test Button Task
void self_test(void const * argument){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	zone_state_e zone_state = NORMAL;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	733b      	strb	r3, [r7, #12]
	uint8_t button_debounce = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73fb      	strb	r3, [r7, #15]
	uint8_t button_state = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73bb      	strb	r3, [r7, #14]

	xQueueMotorState = xQueueCreate( 10,sizeof(zone_state_e));
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	200a      	movs	r0, #10
 8000ac6:	f003 fe81 	bl	80047cc <xQueueGenericCreate>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a44      	ldr	r2, [pc, #272]	; (8000be0 <self_test+0x134>)
 8000ace:	6013      	str	r3, [r2, #0]
	xQueueCANState = xQueueCreate( 10,sizeof(zone_state_e));
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	200a      	movs	r0, #10
 8000ad6:	f003 fe79 	bl	80047cc <xQueueGenericCreate>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a41      	ldr	r2, [pc, #260]	; (8000be4 <self_test+0x138>)
 8000ade:	6013      	str	r3, [r2, #0]


	for (;;){
		GPIO_PinState button = HAL_GPIO_ReadPin(BUTTON_GPIO_Port,BUTTON_Pin);
 8000ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae4:	4840      	ldr	r0, [pc, #256]	; (8000be8 <self_test+0x13c>)
 8000ae6:	f001 ffed 	bl	8002ac4 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	737b      	strb	r3, [r7, #13]
		// debounce button
		if (button == GPIO_PIN_SET){
 8000aee:	7b7b      	ldrb	r3, [r7, #13]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d107      	bne.n	8000b04 <self_test+0x58>
			button_debounce = (button_debounce << 1) | 1;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	73fb      	strb	r3, [r7, #15]
 8000b02:	e002      	b.n	8000b0a <self_test+0x5e>
		}
		else {
			button_debounce = button_debounce << 1;
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
		}
		if (button_debounce == 0xFF && button_state == 0){
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2bff      	cmp	r3, #255	; 0xff
 8000b0e:	d105      	bne.n	8000b1c <self_test+0x70>
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <self_test+0x70>
			button_state = 1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73bb      	strb	r3, [r7, #14]
 8000b1a:	e007      	b.n	8000b2c <self_test+0x80>
		}
		else if (button_debounce == 0 && button_state == 1){
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d104      	bne.n	8000b2c <self_test+0x80>
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d101      	bne.n	8000b2c <self_test+0x80>
			button_state = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73bb      	strb	r3, [r7, #14]
		}
		switch (zone_state) {
 8000b2c:	7b3b      	ldrb	r3, [r7, #12]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d840      	bhi.n	8000bb6 <self_test+0x10a>
 8000b34:	a201      	add	r2, pc, #4	; (adr r2, 8000b3c <self_test+0x90>)
 8000b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3a:	bf00      	nop
 8000b3c:	08000b7d 	.word	0x08000b7d
 8000b40:	08000b93 	.word	0x08000b93
 8000b44:	08000bb7 	.word	0x08000bb7
 8000b48:	08000b51 	.word	0x08000b51
 8000b4c:	08000b67 	.word	0x08000b67
			case NORMAL:
				if (button_state == 1) {
 8000b50:	7bbb      	ldrb	r3, [r7, #14]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d128      	bne.n	8000ba8 <self_test+0xfc>
					HAL_GPIO_WritePin(MCU_IND_GPIO_Port,MCU_IND_Pin,GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2104      	movs	r1, #4
 8000b5a:	4824      	ldr	r0, [pc, #144]	; (8000bec <self_test+0x140>)
 8000b5c:	f001 ffc9 	bl	8002af2 <HAL_GPIO_WritePin>
					zone_state = ERROR_BUTTON;
 8000b60:	2301      	movs	r3, #1
 8000b62:	733b      	strb	r3, [r7, #12]
				}
				break;
 8000b64:	e020      	b.n	8000ba8 <self_test+0xfc>
			case NORMAL_PUSHED:
				if (button_state == 0){
 8000b66:	7bbb      	ldrb	r3, [r7, #14]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d11f      	bne.n	8000bac <self_test+0x100>
					zone_state = NORMAL;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	733b      	strb	r3, [r7, #12]
					HAL_GPIO_WritePin(MCU_IND_GPIO_Port,MCU_IND_Pin,GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2104      	movs	r1, #4
 8000b74:	481d      	ldr	r0, [pc, #116]	; (8000bec <self_test+0x140>)
 8000b76:	f001 ffbc 	bl	8002af2 <HAL_GPIO_WritePin>
				}
				break;
 8000b7a:	e017      	b.n	8000bac <self_test+0x100>
			case ERROR_BUTTON:
				if (button_state == 0) {
 8000b7c:	7bbb      	ldrb	r3, [r7, #14]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d116      	bne.n	8000bb0 <self_test+0x104>
					zone_state = ERROR_BUTTON_RELEASED;
 8000b82:	2302      	movs	r3, #2
 8000b84:	733b      	strb	r3, [r7, #12]
					HAL_GPIO_WritePin(MCU_IND_GPIO_Port,MCU_IND_Pin,GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4818      	ldr	r0, [pc, #96]	; (8000bec <self_test+0x140>)
 8000b8c:	f001 ffb1 	bl	8002af2 <HAL_GPIO_WritePin>
				}
				break;
 8000b90:	e00e      	b.n	8000bb0 <self_test+0x104>
			case ERROR_BUTTON_RELEASED:
				if (button_state == 1){
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d10d      	bne.n	8000bb4 <self_test+0x108>
					zone_state = NORMAL_PUSHED;
 8000b98:	2305      	movs	r3, #5
 8000b9a:	733b      	strb	r3, [r7, #12]
					HAL_GPIO_WritePin(MCU_IND_GPIO_Port,MCU_IND_Pin,GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	4812      	ldr	r0, [pc, #72]	; (8000bec <self_test+0x140>)
 8000ba2:	f001 ffa6 	bl	8002af2 <HAL_GPIO_WritePin>
				}
				break;
 8000ba6:	e005      	b.n	8000bb4 <self_test+0x108>
				break;
 8000ba8:	bf00      	nop
 8000baa:	e004      	b.n	8000bb6 <self_test+0x10a>
				break;
 8000bac:	bf00      	nop
 8000bae:	e002      	b.n	8000bb6 <self_test+0x10a>
				break;
 8000bb0:	bf00      	nop
 8000bb2:	e000      	b.n	8000bb6 <self_test+0x10a>
				break;
 8000bb4:	bf00      	nop
		}
		xQueueSend(xQueueMotorState, &zone_state,( TickType_t ) 10);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <self_test+0x134>)
 8000bb8:	6818      	ldr	r0, [r3, #0]
 8000bba:	f107 010c 	add.w	r1, r7, #12
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	220a      	movs	r2, #10
 8000bc2:	f003 fe61 	bl	8004888 <xQueueGenericSend>
		xQueueSend(xQueueCANState, &zone_state,( TickType_t ) 10);
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <self_test+0x138>)
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	f107 010c 	add.w	r1, r7, #12
 8000bce:	2300      	movs	r3, #0
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	f003 fe59 	bl	8004888 <xQueueGenericSend>
		osDelay(10);
 8000bd6:	200a      	movs	r0, #10
 8000bd8:	f003 fccc 	bl	8004574 <osDelay>
	for (;;){
 8000bdc:	e780      	b.n	8000ae0 <self_test+0x34>
 8000bde:	bf00      	nop
 8000be0:	20000388 	.word	0x20000388
 8000be4:	2000038c 	.word	0x2000038c
 8000be8:	40011000 	.word	0x40011000
 8000bec:	40010800 	.word	0x40010800

08000bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c02:	f000 fc6f 	bl	80014e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40012c00 	.word	0x40012c00

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>

08000c1e <motor_init>:

static TIM_HandleTypeDef htim2;
static void MX_TIM2_Init(void);
static void Error_Handler(void);

void motor_init(){
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 8000c22:	f000 f86d 	bl	8000d00 <MX_TIM2_Init>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <set_motor_direction>:



// Sets the direction of the motor
void set_motor_direction(motor_direction direction){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	// Mosfet logic means output is filled (set => low output, reset => high output)
	switch(direction){
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b04      	cmp	r3, #4
 8000c3a:	d01e      	beq.n	8000c7a <set_motor_direction+0x4e>
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	dc28      	bgt.n	8000c92 <set_motor_direction+0x66>
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d002      	beq.n	8000c4a <set_motor_direction+0x1e>
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d00c      	beq.n	8000c62 <set_motor_direction+0x36>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
			break;
		default:
			(void)direction;
	}
}
 8000c48:	e023      	b.n	8000c92 <set_motor_direction+0x66>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4813      	ldr	r0, [pc, #76]	; (8000c9c <set_motor_direction+0x70>)
 8000c50:	f001 ff4f 	bl	8002af2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5a:	4810      	ldr	r0, [pc, #64]	; (8000c9c <set_motor_direction+0x70>)
 8000c5c:	f001 ff49 	bl	8002af2 <HAL_GPIO_WritePin>
			break;
 8000c60:	e017      	b.n	8000c92 <set_motor_direction+0x66>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2104      	movs	r1, #4
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <set_motor_direction+0x70>)
 8000c68:	f001 ff43 	bl	8002af2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c72:	480a      	ldr	r0, [pc, #40]	; (8000c9c <set_motor_direction+0x70>)
 8000c74:	f001 ff3d 	bl	8002af2 <HAL_GPIO_WritePin>
			break;
 8000c78:	e00b      	b.n	8000c92 <set_motor_direction+0x66>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	4807      	ldr	r0, [pc, #28]	; (8000c9c <set_motor_direction+0x70>)
 8000c80:	f001 ff37 	bl	8002af2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8a:	4804      	ldr	r0, [pc, #16]	; (8000c9c <set_motor_direction+0x70>)
 8000c8c:	f001 ff31 	bl	8002af2 <HAL_GPIO_WritePin>
			break;
 8000c90:	bf00      	nop
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010c00 	.word	0x40010c00

08000ca0 <set_motor_speed>:

// Set Speed of the motor
void set_motor_speed(uint32_t percent_speed){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	// Motor speed PWM 50 Hz 100 Ticks at 5000 Hz
	TIM2->CCR4 = 100-percent_speed;
 8000ca8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000cb2:	6413      	str	r3, [r2, #64]	; 0x40
      	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <set_motor_speed+0x24>)
 8000cb8:	f002 fd2a 	bl	8003710 <HAL_TIM_PWM_Start>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000390 	.word	0x20000390

08000cc8 <set_drive_speed>:

// Set Speed of motor in forward direction
void set_drive_speed(uint32_t percent_speed){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	set_motor_direction(FORWARD);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff ffab 	bl	8000c2c <set_motor_direction>
	set_motor_speed(percent_speed);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffe2 	bl	8000ca0 <set_motor_speed>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <set_brake_speed>:
	set_motor_direction(BACKWARD);
	set_motor_speed(percent_speed);
}

// Set Speed of motor in brake direction
void set_brake_speed(uint32_t percent_speed){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	set_motor_direction(BRAKE);
 8000cec:	2004      	movs	r0, #4
 8000cee:	f7ff ff9d 	bl	8000c2c <set_motor_direction>
	set_motor_speed(percent_speed);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffd4 	bl	8000ca0 <set_motor_speed>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	; 0x38
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d3a:	f240 623f 	movw	r2, #1599	; 0x63f
 8000d3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000d46:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d48:	2263      	movs	r2, #99	; 0x63
 8000d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d58:	4823      	ldr	r0, [pc, #140]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d5a:	f002 fbe7 	bl	800352c <HAL_TIM_Base_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d64:	f000 f842 	bl	8000dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d72:	4619      	mov	r1, r3
 8000d74:	481c      	ldr	r0, [pc, #112]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d76:	f002 ff97 	bl	8003ca8 <HAL_TIM_ConfigClockSource>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d80:	f000 f834 	bl	8000dec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d84:	4818      	ldr	r0, [pc, #96]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d86:	f002 fc73 	bl	8003670 <HAL_TIM_PWM_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d90:	f000 f82c 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	4619      	mov	r1, r3
 8000da2:	4811      	ldr	r0, [pc, #68]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000da4:	f003 fb0c 	bl	80043c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000dae:	f000 f81d 	bl	8000dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db2:	2360      	movs	r3, #96	; 0x60
 8000db4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	220c      	movs	r2, #12
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000dca:	f002 feaf 	bl	8003b2c <HAL_TIM_PWM_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000dd4:	f000 f80a 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000dda:	f000 f943 	bl	8001064 <HAL_TIM_MspPostInit>

}
 8000dde:	bf00      	nop
 8000de0:	3738      	adds	r7, #56	; 0x38
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000390 	.word	0x20000390

08000dec <Error_Handler>:

static void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_MspInit+0x68>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_MspInit+0x68>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6193      	str	r3, [r2, #24]
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_MspInit+0x68>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_MspInit+0x68>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <HAL_MspInit+0x68>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e20:	61d3      	str	r3, [r2, #28]
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x68>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	210f      	movs	r1, #15
 8000e32:	f06f 0001 	mvn.w	r0, #1
 8000e36:	f001 fc96 	bl	8002766 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_MspInit+0x6c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_MspInit+0x6c>)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010000 	.word	0x40010000

08000e68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0318 	add.w	r3, r7, #24
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_ADC_MspInit+0xbc>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d122      	bne.n	8000ece <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <HAL_ADC_MspInit+0xc0>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a26      	ldr	r2, [pc, #152]	; (8000f28 <HAL_ADC_MspInit+0xc0>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <HAL_ADC_MspInit+0xc0>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <HAL_ADC_MspInit+0xc0>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a20      	ldr	r2, [pc, #128]	; (8000f28 <HAL_ADC_MspInit+0xc0>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <HAL_ADC_MspInit+0xc0>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = I_SENSE_Pin;
 8000eb8:	2310      	movs	r3, #16
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0318 	add.w	r3, r7, #24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4819      	ldr	r0, [pc, #100]	; (8000f2c <HAL_ADC_MspInit+0xc4>)
 8000ec8:	f001 fc78 	bl	80027bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ecc:	e026      	b.n	8000f1c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <HAL_ADC_MspInit+0xc8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d121      	bne.n	8000f1c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_ADC_MspInit+0xc0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <HAL_ADC_MspInit+0xc0>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_ADC_MspInit+0xc0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_ADC_MspInit+0xc0>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <HAL_ADC_MspInit+0xc0>)
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_ADC_MspInit+0xc0>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8000f08:	2320      	movs	r3, #32
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0318 	add.w	r3, r7, #24
 8000f14:	4619      	mov	r1, r3
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_ADC_MspInit+0xc4>)
 8000f18:	f001 fc50 	bl	80027bc <HAL_GPIO_Init>
}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40012400 	.word	0x40012400
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	40012800 	.word	0x40012800

08000f34 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a25      	ldr	r2, [pc, #148]	; (8000fe4 <HAL_CAN_MspInit+0xb0>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d143      	bne.n	8000fdc <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_CAN_MspInit+0xb4>)
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	4a23      	ldr	r2, [pc, #140]	; (8000fe8 <HAL_CAN_MspInit+0xb4>)
 8000f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f5e:	61d3      	str	r3, [r2, #28]
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <HAL_CAN_MspInit+0xb4>)
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <HAL_CAN_MspInit+0xb4>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_CAN_MspInit+0xb4>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_CAN_MspInit+0xb4>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4813      	ldr	r0, [pc, #76]	; (8000fec <HAL_CAN_MspInit+0xb8>)
 8000f9e:	f001 fc0d 	bl	80027bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <HAL_CAN_MspInit+0xb8>)
 8000fb8:	f001 fc00 	bl	80027bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2105      	movs	r1, #5
 8000fc0:	2014      	movs	r0, #20
 8000fc2:	f001 fbd0 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000fc6:	2014      	movs	r0, #20
 8000fc8:	f001 fbe9 	bl	800279e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2105      	movs	r1, #5
 8000fd0:	2015      	movs	r0, #21
 8000fd2:	f001 fbc8 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000fd6:	2015      	movs	r0, #21
 8000fd8:	f001 fbe1 	bl	800279e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40006400 	.word	0x40006400
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010800 	.word	0x40010800

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001000:	d10b      	bne.n	800101a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_TIM_Base_MspInit+0x34>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_TIM_Base_MspInit+0x34>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_TIM_Base_MspInit+0x34>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a09      	ldr	r2, [pc, #36]	; (800105c <HAL_TIM_PWM_MspInit+0x34>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d10b      	bne.n	8001052 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_TIM_PWM_MspInit+0x38>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_TIM_PWM_MspInit+0x38>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_TIM_PWM_MspInit+0x38>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40000400 	.word	0x40000400
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001082:	d12b      	bne.n	80010dc <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <HAL_TIM_MspPostInit+0xec>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a31      	ldr	r2, [pc, #196]	; (8001150 <HAL_TIM_MspPostInit+0xec>)
 800108a:	f043 0308 	orr.w	r3, r3, #8
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <HAL_TIM_MspPostInit+0xec>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_EN_PWM_Pin;
 800109c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2302      	movs	r3, #2
 80010a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MOTOR_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4828      	ldr	r0, [pc, #160]	; (8001154 <HAL_TIM_MspPostInit+0xf0>)
 80010b2:	f001 fb83 	bl	80027bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <HAL_TIM_MspPostInit+0xf4>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
 80010d4:	4a20      	ldr	r2, [pc, #128]	; (8001158 <HAL_TIM_MspPostInit+0xf4>)
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010da:	e034      	b.n	8001146 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1e      	ldr	r2, [pc, #120]	; (800115c <HAL_TIM_MspPostInit+0xf8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d12f      	bne.n	8001146 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_TIM_MspPostInit+0xec>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	4a19      	ldr	r2, [pc, #100]	; (8001150 <HAL_TIM_MspPostInit+0xec>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6193      	str	r3, [r2, #24]
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_TIM_MspPostInit+0xec>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_TIM_MspPostInit+0xec>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <HAL_TIM_MspPostInit+0xec>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_TIM_MspPostInit+0xec>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_BLINKER_Pin;
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LEFT_BLINKER_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <HAL_TIM_MspPostInit+0xfc>)
 800112a:	f001 fb47 	bl	80027bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RIGHT_BLINKER_Pin;
 800112e:	2302      	movs	r3, #2
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2302      	movs	r3, #2
 8001138:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RIGHT_BLINKER_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <HAL_TIM_MspPostInit+0xf0>)
 8001142:	f001 fb3b 	bl	80027bc <HAL_GPIO_Init>
}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	; 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	40010c00 	.word	0x40010c00
 8001158:	40010000 	.word	0x40010000
 800115c:	40000400 	.word	0x40000400
 8001160:	40010800 	.word	0x40010800

08001164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <HAL_InitTick+0xd0>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <HAL_InitTick+0xd0>)
 8001180:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <HAL_InitTick+0xd0>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001192:	f107 020c 	add.w	r2, r7, #12
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f002 f8c1 	bl	8003324 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011a2:	f002 f8ab 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 80011a6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	4a23      	ldr	r2, [pc, #140]	; (8001238 <HAL_InitTick+0xd4>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	0c9b      	lsrs	r3, r3, #18
 80011b2:	3b01      	subs	r3, #1
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_InitTick+0xd8>)
 80011b8:	4a21      	ldr	r2, [pc, #132]	; (8001240 <HAL_InitTick+0xdc>)
 80011ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_InitTick+0xd8>)
 80011be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_InitTick+0xd8>)
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_InitTick+0xd8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_InitTick+0xd8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_InitTick+0xd8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <HAL_InitTick+0xd8>)
 80011de:	f002 f9a5 	bl	800352c <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d11b      	bne.n	8001228 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011f0:	4812      	ldr	r0, [pc, #72]	; (800123c <HAL_InitTick+0xd8>)
 80011f2:	f002 f9eb 	bl	80035cc <HAL_TIM_Base_Start_IT>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001200:	2b00      	cmp	r3, #0
 8001202:	d111      	bne.n	8001228 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001204:	2019      	movs	r0, #25
 8001206:	f001 faca 	bl	800279e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d808      	bhi.n	8001222 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	2019      	movs	r0, #25
 8001216:	f001 faa6 	bl	8002766 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_InitTick+0xe0>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e002      	b.n	8001228 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800122c:	4618      	mov	r0, r3
 800122e:	3730      	adds	r7, #48	; 0x30
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000
 8001238:	431bde83 	.word	0x431bde83
 800123c:	200003d8 	.word	0x200003d8
 8001240:	40012c00 	.word	0x40012c00
 8001244:	20000004 	.word	0x20000004

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
	...

08001274 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800127a:	f000 ff9c 	bl	80021b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000420 	.word	0x20000420

08001288 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <CAN1_RX1_IRQHandler+0x10>)
 800128e:	f000 ff92 	bl	80021b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000420 	.word	0x20000420

0800129c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM1_UP_IRQHandler+0x10>)
 80012a2:	f002 fb3b 	bl	800391c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200003d8 	.word	0x200003d8

080012b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <can_init>:
CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;

QueueHandle_t xQueueCANRx;

void can_init(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	MX_CAN_Init();
 80012c0:	f000 f840 	bl	8001344 <MX_CAN_Init>
	xQueueCANRx = xQueueCreate( 10,sizeof(can_msg_t));
 80012c4:	2200      	movs	r2, #0
 80012c6:	210a      	movs	r1, #10
 80012c8:	200a      	movs	r0, #10
 80012ca:	f003 fa7f 	bl	80047cc <xQueueGenericCreate>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a01      	ldr	r2, [pc, #4]	; (80012d8 <can_init+0x1c>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000488 	.word	0x20000488

080012dc <HAL_CAN_RxFifo0MsgPendingCallback>:

// Interrupt Handler for receiving a can message.
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80012e6:	4a15      	ldr	r2, [pc, #84]	; (800133c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80012e8:	2100      	movs	r1, #0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fe2d 	bl	8001f4a <HAL_CAN_GetRxMessage>
	can_msg_t msg;
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
	if (RxHeader.DLC !=0)
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d018      	beq.n	800132e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		msg.id = RxHeader.StdId;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	823b      	strh	r3, [r7, #16]
		memcpy(msg.msg, RxData, 8);
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001306:	f107 0212 	add.w	r2, r7, #18
 800130a:	cb03      	ldmia	r3!, {r0, r1}
 800130c:	6010      	str	r0, [r2, #0]
 800130e:	6051      	str	r1, [r2, #4]
		BaseType_t res = xQueueSendFromISR(xQueueCANRx,(void * )&msg, &xHigherPriorityTaskWoken );
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	f107 020c 	add.w	r2, r7, #12
 8001318:	f107 0110 	add.w	r1, r7, #16
 800131c:	2300      	movs	r3, #0
 800131e:	f003 fbb1 	bl	8004a84 <xQueueGenericSendFromISR>
 8001322:	61f8      	str	r0, [r7, #28]
		if (res == pdTRUE){
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
			res = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
	if( xHigherPriorityTaskWoken )
	{
	        /* Actual macro used here is port specific. */

	}
}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000044c 	.word	0x2000044c
 800133c:	2000046c 	.word	0x2000046c
 8001340:	20000488 	.word	0x20000488

08001344 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <MX_CAN_Init+0xcc>)
 800134c:	4a31      	ldr	r2, [pc, #196]	; (8001414 <MX_CAN_Init+0xd0>)
 800134e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <MX_CAN_Init+0xcc>)
 8001352:	2204      	movs	r2, #4
 8001354:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001356:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <MX_CAN_Init+0xcc>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800135c:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <MX_CAN_Init+0xcc>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <MX_CAN_Init+0xcc>)
 8001364:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001368:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <MX_CAN_Init+0xcc>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <MX_CAN_Init+0xcc>)
 8001372:	2200      	movs	r2, #0
 8001374:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <MX_CAN_Init+0xcc>)
 8001378:	2200      	movs	r2, #0
 800137a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <MX_CAN_Init+0xcc>)
 800137e:	2201      	movs	r2, #1
 8001380:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001382:	4b23      	ldr	r3, [pc, #140]	; (8001410 <MX_CAN_Init+0xcc>)
 8001384:	2200      	movs	r2, #0
 8001386:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001388:	4b21      	ldr	r3, [pc, #132]	; (8001410 <MX_CAN_Init+0xcc>)
 800138a:	2200      	movs	r2, #0
 800138c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <MX_CAN_Init+0xcc>)
 8001390:	2200      	movs	r2, #0
 8001392:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001394:	481e      	ldr	r0, [pc, #120]	; (8001410 <MX_CAN_Init+0xcc>)
 8001396:	f000 faf6 	bl	8001986 <HAL_CAN_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80013a0:	f000 f85e 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80013a4:	2301      	movs	r3, #1
 80013a6:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x200<<5;
 80013b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b4:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x100<<5;
 80013ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013be:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;  // doesn't matter in single can controllers
 80013cc:	230e      	movs	r3, #14
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig)!= HAL_OK){
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	480e      	ldr	r0, [pc, #56]	; (8001410 <MX_CAN_Init+0xcc>)
 80013d6:	f000 fbd1 	bl	8001b7c <HAL_CAN_ConfigFilter>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_CAN_Init+0xa0>
		// Filter Config Error
		Error_Handler();
 80013e0:	f000 f83e 	bl	8001460 <Error_Handler>
	}

	// Start CAN
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 80013e4:	480a      	ldr	r0, [pc, #40]	; (8001410 <MX_CAN_Init+0xcc>)
 80013e6:	f000 fc92 	bl	8001d0e <HAL_CAN_Start>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_CAN_Init+0xb0>
	{
	  /* Start Error */
	  Error_Handler();
 80013f0:	f000 f836 	bl	8001460 <Error_Handler>
	}
	// Activate RX Notification
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK){
 80013f4:	2102      	movs	r1, #2
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <MX_CAN_Init+0xcc>)
 80013f8:	f000 feb8 	bl	800216c <HAL_CAN_ActivateNotification>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_CAN_Init+0xc2>
		// Notification Error
		Error_Handler();
 8001402:	f000 f82d 	bl	8001460 <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */
}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000420 	.word	0x20000420
 8001414:	40006400 	.word	0x40006400

08001418 <throuple_can_tx>:


CAN_TxHeaderTypeDef	TxHeader;
uint32_t TxMailbox;
uint8_t real_data[8];
void throuple_can_tx(uint8_t id, uint8_t * data){
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]

	TxHeader.DLC = 8;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <throuple_can_tx+0x38>)
 8001426:	2208      	movs	r2, #8
 8001428:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <throuple_can_tx+0x38>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <throuple_can_tx+0x38>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = id;
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	4a05      	ldr	r2, [pc, #20]	; (8001450 <throuple_can_tx+0x38>)
 800143a:	6013      	str	r3, [r2, #0]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, real_data, &TxMailbox);
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <throuple_can_tx+0x3c>)
 800143e:	4a06      	ldr	r2, [pc, #24]	; (8001458 <throuple_can_tx+0x40>)
 8001440:	4903      	ldr	r1, [pc, #12]	; (8001450 <throuple_can_tx+0x38>)
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <throuple_can_tx+0x44>)
 8001444:	f000 fca7 	bl	8001d96 <HAL_CAN_AddTxMessage>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000454 	.word	0x20000454
 8001454:	20000448 	.word	0x20000448
 8001458:	2000048c 	.word	0x2000048c
 800145c:	20000420 	.word	0x20000420

08001460 <Error_Handler>:


void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	e7fe      	b.n	8001468 <Error_Handler+0x8>
	...

0800146c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	; (80014a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	; (80014b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001492:	f7ff ff0d 	bl	80012b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f005 f811 	bl	80064bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149a:	f7ff f8ab 	bl	80005f4 <main>
  bx lr
 800149e:	4770      	bx	lr
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014a8:	08006624 	.word	0x08006624
  ldr r2, =_sbss
 80014ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014b0:	200011e4 	.word	0x200011e4

080014b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_Init+0x28>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_Init+0x28>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f001 f941 	bl	8002750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f7ff fe48 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff fc90 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_IncTick+0x1c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_IncTick+0x20>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a03      	ldr	r2, [pc, #12]	; (8001504 <HAL_IncTick+0x20>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	20000008 	.word	0x20000008
 8001504:	20000494 	.word	0x20000494

08001508 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTick;
 800150c:	4b02      	ldr	r3, [pc, #8]	; (8001518 <HAL_GetTick+0x10>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	20000494 	.word	0x20000494

0800151c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff fff0 	bl	8001508 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d005      	beq.n	8001542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_Delay+0x44>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001542:	bf00      	nop
 8001544:	f7ff ffe0 	bl	8001508 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d8f7      	bhi.n	8001544 <HAL_Delay+0x28>
  {
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008

08001564 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0be      	b.n	8001704 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	d109      	bne.n	80015a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fc60 	bl	8000e68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f9ab 	bl	8001904 <ADC_ConversionStop_Disable>
 80015ae:	4603      	mov	r3, r0
 80015b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 8099 	bne.w	80016f2 <HAL_ADC_Init+0x18e>
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 8095 	bne.w	80016f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015d0:	f023 0302 	bic.w	r3, r3, #2
 80015d4:	f043 0202 	orr.w	r2, r3, #2
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7b1b      	ldrb	r3, [r3, #12]
 80015ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015fc:	d003      	beq.n	8001606 <HAL_ADC_Init+0xa2>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d102      	bne.n	800160c <HAL_ADC_Init+0xa8>
 8001606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800160a:	e000      	b.n	800160e <HAL_ADC_Init+0xaa>
 800160c:	2300      	movs	r3, #0
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7d1b      	ldrb	r3, [r3, #20]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d119      	bne.n	8001650 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7b1b      	ldrb	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	3b01      	subs	r3, #1
 800162a:	035a      	lsls	r2, r3, #13
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	e00b      	b.n	8001650 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	f043 0220 	orr.w	r2, r3, #32
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	4b28      	ldr	r3, [pc, #160]	; (800170c <HAL_ADC_Init+0x1a8>)
 800166c:	4013      	ands	r3, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	68b9      	ldr	r1, [r7, #8]
 8001674:	430b      	orrs	r3, r1
 8001676:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001680:	d003      	beq.n	800168a <HAL_ADC_Init+0x126>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d104      	bne.n	8001694 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	3b01      	subs	r3, #1
 8001690:	051b      	lsls	r3, r3, #20
 8001692:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_ADC_Init+0x1ac>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d10b      	bne.n	80016d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	f023 0303 	bic.w	r3, r3, #3
 80016c6:	f043 0201 	orr.w	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016ce:	e018      	b.n	8001702 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	f023 0312 	bic.w	r3, r3, #18
 80016d8:	f043 0210 	orr.w	r2, r3, #16
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	f043 0201 	orr.w	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016f0:	e007      	b.n	8001702 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	f043 0210 	orr.w	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001702:	7dfb      	ldrb	r3, [r7, #23]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	ffe1f7fd 	.word	0xffe1f7fd
 8001710:	ff1f0efe 	.word	0xff1f0efe

08001714 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x20>
 8001730:	2302      	movs	r3, #2
 8001732:	e0dc      	b.n	80018ee <HAL_ADC_ConfigChannel+0x1da>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b06      	cmp	r3, #6
 8001742:	d81c      	bhi.n	800177e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b05      	subs	r3, #5
 8001756:	221f      	movs	r2, #31
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	4019      	ands	r1, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	3b05      	subs	r3, #5
 8001770:	fa00 f203 	lsl.w	r2, r0, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	635a      	str	r2, [r3, #52]	; 0x34
 800177c:	e03c      	b.n	80017f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b0c      	cmp	r3, #12
 8001784:	d81c      	bhi.n	80017c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	3b23      	subs	r3, #35	; 0x23
 8001798:	221f      	movs	r2, #31
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	4019      	ands	r1, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	3b23      	subs	r3, #35	; 0x23
 80017b2:	fa00 f203 	lsl.w	r2, r0, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	631a      	str	r2, [r3, #48]	; 0x30
 80017be:	e01b      	b.n	80017f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	3b41      	subs	r3, #65	; 0x41
 80017d2:	221f      	movs	r2, #31
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	4019      	ands	r1, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	3b41      	subs	r3, #65	; 0x41
 80017ec:	fa00 f203 	lsl.w	r2, r0, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d91c      	bls.n	800183a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68d9      	ldr	r1, [r3, #12]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	3b1e      	subs	r3, #30
 8001812:	2207      	movs	r2, #7
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4019      	ands	r1, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6898      	ldr	r0, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	3b1e      	subs	r3, #30
 800182c:	fa00 f203 	lsl.w	r2, r0, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	e019      	b.n	800186e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6919      	ldr	r1, [r3, #16]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	2207      	movs	r2, #7
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	4019      	ands	r1, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6898      	ldr	r0, [r3, #8]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b10      	cmp	r3, #16
 8001874:	d003      	beq.n	800187e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800187a:	2b11      	cmp	r3, #17
 800187c:	d132      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d125      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d126      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d11a      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_ADC_ConfigChannel+0x1e8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a13      	ldr	r2, [pc, #76]	; (8001900 <HAL_ADC_ConfigChannel+0x1ec>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	0c9a      	lsrs	r2, r3, #18
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c4:	e002      	b.n	80018cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f9      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x1b2>
 80018d2:	e007      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	f043 0220 	orr.w	r2, r3, #32
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40012400 	.word	0x40012400
 80018fc:	20000000 	.word	0x20000000
 8001900:	431bde83 	.word	0x431bde83

08001904 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b01      	cmp	r3, #1
 800191c:	d12e      	bne.n	800197c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800192e:	f7ff fdeb 	bl	8001508 <HAL_GetTick>
 8001932:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001934:	e01b      	b.n	800196e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001936:	f7ff fde7 	bl	8001508 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d914      	bls.n	800196e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b01      	cmp	r3, #1
 8001950:	d10d      	bne.n	800196e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	f043 0210 	orr.w	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e007      	b.n	800197e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b01      	cmp	r3, #1
 800197a:	d0dc      	beq.n	8001936 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0ed      	b.n	8001b74 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fac5 	bl	8000f34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ba:	f7ff fda5 	bl	8001508 <HAL_GetTick>
 80019be:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019c0:	e012      	b.n	80019e8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019c2:	f7ff fda1 	bl	8001508 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b0a      	cmp	r3, #10
 80019ce:	d90b      	bls.n	80019e8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2205      	movs	r2, #5
 80019e0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0c5      	b.n	8001b74 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0e5      	beq.n	80019c2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0202 	bic.w	r2, r2, #2
 8001a04:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a06:	f7ff fd7f 	bl	8001508 <HAL_GetTick>
 8001a0a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a0c:	e012      	b.n	8001a34 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a0e:	f7ff fd7b 	bl	8001508 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b0a      	cmp	r3, #10
 8001a1a:	d90b      	bls.n	8001a34 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2205      	movs	r2, #5
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e09f      	b.n	8001b74 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1e5      	bne.n	8001a0e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7e1b      	ldrb	r3, [r3, #24]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d108      	bne.n	8001a5c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e007      	b.n	8001a6c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7e5b      	ldrb	r3, [r3, #25]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d108      	bne.n	8001a86 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e007      	b.n	8001a96 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7e9b      	ldrb	r3, [r3, #26]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d108      	bne.n	8001ab0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0220 	orr.w	r2, r2, #32
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e007      	b.n	8001ac0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0220 	bic.w	r2, r2, #32
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7edb      	ldrb	r3, [r3, #27]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d108      	bne.n	8001ada <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0210 	bic.w	r2, r2, #16
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e007      	b.n	8001aea <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0210 	orr.w	r2, r2, #16
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7f1b      	ldrb	r3, [r3, #28]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0208 	orr.w	r2, r2, #8
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e007      	b.n	8001b14 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0208 	bic.w	r2, r2, #8
 8001b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7f5b      	ldrb	r3, [r3, #29]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d108      	bne.n	8001b2e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0204 	orr.w	r2, r2, #4
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e007      	b.n	8001b3e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0204 	bic.w	r2, r2, #4
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	ea42 0103 	orr.w	r1, r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	1e5a      	subs	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b92:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b94:	7cfb      	ldrb	r3, [r7, #19]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d003      	beq.n	8001ba2 <HAL_CAN_ConfigFilter+0x26>
 8001b9a:	7cfb      	ldrb	r3, [r7, #19]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	f040 80aa 	bne.w	8001cf6 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	2201      	movs	r2, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	401a      	ands	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d123      	bne.n	8001c24 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	401a      	ands	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bfe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3248      	adds	r2, #72	; 0x48
 8001c04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c18:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c1a:	6979      	ldr	r1, [r7, #20]
 8001c1c:	3348      	adds	r3, #72	; 0x48
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	440b      	add	r3, r1
 8001c22:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d122      	bne.n	8001c72 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3248      	adds	r2, #72	; 0x48
 8001c52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c68:	6979      	ldr	r1, [r7, #20]
 8001c6a:	3348      	adds	r3, #72	; 0x48
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	401a      	ands	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c8c:	e007      	b.n	8001c9e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001cb8:	e007      	b.n	8001cca <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ce8:	f023 0201 	bic.w	r2, r3, #1
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e006      	b.n	8001d04 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
  }
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d12e      	bne.n	8001d80 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d3a:	f7ff fbe5 	bl	8001508 <HAL_GetTick>
 8001d3e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d40:	e012      	b.n	8001d68 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d42:	f7ff fbe1 	bl	8001508 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b0a      	cmp	r3, #10
 8001d4e:	d90b      	bls.n	8001d68 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2205      	movs	r2, #5
 8001d60:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e012      	b.n	8001d8e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1e5      	bne.n	8001d42 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e006      	b.n	8001d8e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
  }
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b089      	sub	sp, #36	; 0x24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001daa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001db4:	7ffb      	ldrb	r3, [r7, #31]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d003      	beq.n	8001dc2 <HAL_CAN_AddTxMessage+0x2c>
 8001dba:	7ffb      	ldrb	r3, [r7, #31]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	f040 80b8 	bne.w	8001f32 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d105      	bne.n	8001de2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80a0 	beq.w	8001f22 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	0e1b      	lsrs	r3, r3, #24
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d907      	bls.n	8001e02 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e09e      	b.n	8001f40 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e02:	2201      	movs	r2, #1
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10d      	bne.n	8001e30 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e1e:	68f9      	ldr	r1, [r7, #12]
 8001e20:	6809      	ldr	r1, [r1, #0]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	3318      	adds	r3, #24
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	440b      	add	r3, r1
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	e00f      	b.n	8001e50 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e3a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e44:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3318      	adds	r3, #24
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	440b      	add	r3, r1
 8001e4e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3318      	adds	r3, #24
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	440b      	add	r3, r1
 8001e60:	3304      	adds	r3, #4
 8001e62:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	7d1b      	ldrb	r3, [r3, #20]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d111      	bne.n	8001e90 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3318      	adds	r3, #24
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	4413      	add	r3, r2
 8001e78:	3304      	adds	r3, #4
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	6811      	ldr	r1, [r2, #0]
 8001e80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3318      	adds	r3, #24
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3307      	adds	r3, #7
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	061a      	lsls	r2, r3, #24
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3306      	adds	r3, #6
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3305      	adds	r3, #5
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	3204      	adds	r2, #4
 8001eb0:	7812      	ldrb	r2, [r2, #0]
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	6811      	ldr	r1, [r2, #0]
 8001eb8:	ea43 0200 	orr.w	r2, r3, r0
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	440b      	add	r3, r1
 8001ec2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ec6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3303      	adds	r3, #3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	061a      	lsls	r2, r3, #24
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	041b      	lsls	r3, r3, #16
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3301      	adds	r3, #1
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	7812      	ldrb	r2, [r2, #0]
 8001ee8:	4610      	mov	r0, r2
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	6811      	ldr	r1, [r2, #0]
 8001eee:	ea43 0200 	orr.w	r2, r3, r0
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001efc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3318      	adds	r3, #24
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	4413      	add	r3, r2
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	6811      	ldr	r1, [r2, #0]
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	3318      	adds	r3, #24
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	440b      	add	r3, r1
 8001f1c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e00e      	b.n	8001f40 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e006      	b.n	8001f40 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
  }
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3724      	adds	r7, #36	; 0x24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b087      	sub	sp, #28
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f5e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d003      	beq.n	8001f6e <HAL_CAN_GetRxMessage+0x24>
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	f040 80f3 	bne.w	8002154 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10e      	bne.n	8001f92 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d116      	bne.n	8001fb0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0e7      	b.n	8002162 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d107      	bne.n	8001fb0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0d8      	b.n	8002162 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	331b      	adds	r3, #27
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	4413      	add	r3, r2
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0204 	and.w	r2, r3, #4
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	331b      	adds	r3, #27
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	4413      	add	r3, r2
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0d5b      	lsrs	r3, r3, #21
 8001fde:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e00b      	b.n	8002000 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	331b      	adds	r3, #27
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	4413      	add	r3, r2
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	08db      	lsrs	r3, r3, #3
 8001ff8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	331b      	adds	r3, #27
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	4413      	add	r3, r2
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0202 	and.w	r2, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	331b      	adds	r3, #27
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	4413      	add	r3, r2
 8002022:	3304      	adds	r3, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 020f 	and.w	r2, r3, #15
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	331b      	adds	r3, #27
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	b2da      	uxtb	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	331b      	adds	r3, #27
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	4413      	add	r3, r2
 8002052:	3304      	adds	r3, #4
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	0c1b      	lsrs	r3, r3, #16
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	4413      	add	r3, r2
 8002068:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	4413      	add	r3, r2
 800207e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0a1a      	lsrs	r2, r3, #8
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	3301      	adds	r3, #1
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	4413      	add	r3, r2
 8002098:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	0c1a      	lsrs	r2, r3, #16
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	3302      	adds	r3, #2
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0e1a      	lsrs	r2, r3, #24
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	3303      	adds	r3, #3
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	3304      	adds	r3, #4
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	0a1a      	lsrs	r2, r3, #8
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	3305      	adds	r3, #5
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0c1a      	lsrs	r2, r3, #16
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3306      	adds	r3, #6
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	4413      	add	r3, r2
 8002118:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	0e1a      	lsrs	r2, r3, #24
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	3307      	adds	r3, #7
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d108      	bne.n	8002140 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0220 	orr.w	r2, r2, #32
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	e007      	b.n	8002150 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0220 	orr.w	r2, r2, #32
 800214e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e006      	b.n	8002162 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800217c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d002      	beq.n	800218a <HAL_CAN_ActivateNotification+0x1e>
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d109      	bne.n	800219e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6959      	ldr	r1, [r3, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e006      	b.n	80021ac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b08a      	sub	sp, #40	; 0x28
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d07c      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d023      	beq.n	800224e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2201      	movs	r2, #1
 800220c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f983 	bl	8002524 <HAL_CAN_TxMailbox0CompleteCallback>
 800221e:	e016      	b.n	800224e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	e00c      	b.n	800224e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	e002      	b.n	800224e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f986 	bl	800255a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d024      	beq.n	80022a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002260:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f962 	bl	8002536 <HAL_CAN_TxMailbox1CompleteCallback>
 8002272:	e016      	b.n	80022a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	e00c      	b.n	80022a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	e002      	b.n	80022a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f965 	bl	800256c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d024      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f941 	bl	8002548 <HAL_CAN_TxMailbox2CompleteCallback>
 80022c6:	e016      	b.n	80022f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
 80022da:	e00c      	b.n	80022f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
 80022ee:	e002      	b.n	80022f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f944 	bl	800257e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00c      	beq.n	800231a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002310:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2210      	movs	r2, #16
 8002318:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2208      	movs	r2, #8
 8002334:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f92a 	bl	8002590 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7fe ffc1 	bl	80012dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00c      	beq.n	800237e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002374:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2210      	movs	r2, #16
 800237c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00b      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2208      	movs	r2, #8
 8002398:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f90a 	bl	80025b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f8f2 	bl	80025a2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d006      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2210      	movs	r2, #16
 80023d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f8f3 	bl	80025c6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2208      	movs	r2, #8
 80023fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f8eb 	bl	80025d8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d07b      	beq.n	8002504 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d072      	beq.n	80024fc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002470:	2b00      	cmp	r3, #0
 8002472:	d043      	beq.n	80024fc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800247a:	2b00      	cmp	r3, #0
 800247c:	d03e      	beq.n	80024fc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002484:	2b60      	cmp	r3, #96	; 0x60
 8002486:	d02b      	beq.n	80024e0 <HAL_CAN_IRQHandler+0x32a>
 8002488:	2b60      	cmp	r3, #96	; 0x60
 800248a:	d82e      	bhi.n	80024ea <HAL_CAN_IRQHandler+0x334>
 800248c:	2b50      	cmp	r3, #80	; 0x50
 800248e:	d022      	beq.n	80024d6 <HAL_CAN_IRQHandler+0x320>
 8002490:	2b50      	cmp	r3, #80	; 0x50
 8002492:	d82a      	bhi.n	80024ea <HAL_CAN_IRQHandler+0x334>
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d019      	beq.n	80024cc <HAL_CAN_IRQHandler+0x316>
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d826      	bhi.n	80024ea <HAL_CAN_IRQHandler+0x334>
 800249c:	2b30      	cmp	r3, #48	; 0x30
 800249e:	d010      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x30c>
 80024a0:	2b30      	cmp	r3, #48	; 0x30
 80024a2:	d822      	bhi.n	80024ea <HAL_CAN_IRQHandler+0x334>
 80024a4:	2b10      	cmp	r3, #16
 80024a6:	d002      	beq.n	80024ae <HAL_CAN_IRQHandler+0x2f8>
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d005      	beq.n	80024b8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80024ac:	e01d      	b.n	80024ea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	f043 0308 	orr.w	r3, r3, #8
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024b6:	e019      	b.n	80024ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	f043 0310 	orr.w	r3, r3, #16
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024c0:	e014      	b.n	80024ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	f043 0320 	orr.w	r3, r3, #32
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024ca:	e00f      	b.n	80024ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024d4:	e00a      	b.n	80024ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024de:	e005      	b.n	80024ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024e8:	e000      	b.n	80024ec <HAL_CAN_IRQHandler+0x336>
            break;
 80024ea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2204      	movs	r2, #4
 8002502:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f867 	bl	80025ea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002618:	4013      	ands	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262e:	4a04      	ldr	r2, [pc, #16]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60d3      	str	r3, [r2, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <__NVIC_GetPriorityGrouping+0x18>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	f003 0307 	and.w	r3, r3, #7
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	2b00      	cmp	r3, #0
 8002670:	db0b      	blt.n	800268a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4906      	ldr	r1, [pc, #24]	; (8002694 <__NVIC_EnableIRQ+0x34>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2001      	movs	r0, #1
 8002682:	fa00 f202 	lsl.w	r2, r0, r2
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	e000e100 	.word	0xe000e100

08002698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	db0a      	blt.n	80026c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	490c      	ldr	r1, [pc, #48]	; (80026e4 <__NVIC_SetPriority+0x4c>)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	440b      	add	r3, r1
 80026bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c0:	e00a      	b.n	80026d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4908      	ldr	r1, [pc, #32]	; (80026e8 <__NVIC_SetPriority+0x50>)
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	3b04      	subs	r3, #4
 80026d0:	0112      	lsls	r2, r2, #4
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	440b      	add	r3, r1
 80026d6:	761a      	strb	r2, [r3, #24]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000e100 	.word	0xe000e100
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f1c3 0307 	rsb	r3, r3, #7
 8002706:	2b04      	cmp	r3, #4
 8002708:	bf28      	it	cs
 800270a:	2304      	movcs	r3, #4
 800270c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3304      	adds	r3, #4
 8002712:	2b06      	cmp	r3, #6
 8002714:	d902      	bls.n	800271c <NVIC_EncodePriority+0x30>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3b03      	subs	r3, #3
 800271a:	e000      	b.n	800271e <NVIC_EncodePriority+0x32>
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	f04f 32ff 	mov.w	r2, #4294967295
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	401a      	ands	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002734:	f04f 31ff 	mov.w	r1, #4294967295
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	43d9      	mvns	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	4313      	orrs	r3, r2
         );
}
 8002746:	4618      	mov	r0, r3
 8002748:	3724      	adds	r7, #36	; 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff4f 	bl	80025fc <__NVIC_SetPriorityGrouping>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002778:	f7ff ff64 	bl	8002644 <__NVIC_GetPriorityGrouping>
 800277c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f7ff ffb2 	bl	80026ec <NVIC_EncodePriority>
 8002788:	4602      	mov	r2, r0
 800278a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff81 	bl	8002698 <__NVIC_SetPriority>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff57 	bl	8002660 <__NVIC_EnableIRQ>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027bc:	b480      	push	{r7}
 80027be:	b08b      	sub	sp, #44	; 0x2c
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ce:	e169      	b.n	8002aa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027d0:	2201      	movs	r2, #1
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	f040 8158 	bne.w	8002a9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4a9a      	ldr	r2, [pc, #616]	; (8002a5c <HAL_GPIO_Init+0x2a0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d05e      	beq.n	80028b6 <HAL_GPIO_Init+0xfa>
 80027f8:	4a98      	ldr	r2, [pc, #608]	; (8002a5c <HAL_GPIO_Init+0x2a0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d875      	bhi.n	80028ea <HAL_GPIO_Init+0x12e>
 80027fe:	4a98      	ldr	r2, [pc, #608]	; (8002a60 <HAL_GPIO_Init+0x2a4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d058      	beq.n	80028b6 <HAL_GPIO_Init+0xfa>
 8002804:	4a96      	ldr	r2, [pc, #600]	; (8002a60 <HAL_GPIO_Init+0x2a4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d86f      	bhi.n	80028ea <HAL_GPIO_Init+0x12e>
 800280a:	4a96      	ldr	r2, [pc, #600]	; (8002a64 <HAL_GPIO_Init+0x2a8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d052      	beq.n	80028b6 <HAL_GPIO_Init+0xfa>
 8002810:	4a94      	ldr	r2, [pc, #592]	; (8002a64 <HAL_GPIO_Init+0x2a8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d869      	bhi.n	80028ea <HAL_GPIO_Init+0x12e>
 8002816:	4a94      	ldr	r2, [pc, #592]	; (8002a68 <HAL_GPIO_Init+0x2ac>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d04c      	beq.n	80028b6 <HAL_GPIO_Init+0xfa>
 800281c:	4a92      	ldr	r2, [pc, #584]	; (8002a68 <HAL_GPIO_Init+0x2ac>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d863      	bhi.n	80028ea <HAL_GPIO_Init+0x12e>
 8002822:	4a92      	ldr	r2, [pc, #584]	; (8002a6c <HAL_GPIO_Init+0x2b0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d046      	beq.n	80028b6 <HAL_GPIO_Init+0xfa>
 8002828:	4a90      	ldr	r2, [pc, #576]	; (8002a6c <HAL_GPIO_Init+0x2b0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d85d      	bhi.n	80028ea <HAL_GPIO_Init+0x12e>
 800282e:	2b12      	cmp	r3, #18
 8002830:	d82a      	bhi.n	8002888 <HAL_GPIO_Init+0xcc>
 8002832:	2b12      	cmp	r3, #18
 8002834:	d859      	bhi.n	80028ea <HAL_GPIO_Init+0x12e>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <HAL_GPIO_Init+0x80>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	080028b7 	.word	0x080028b7
 8002840:	08002891 	.word	0x08002891
 8002844:	080028a3 	.word	0x080028a3
 8002848:	080028e5 	.word	0x080028e5
 800284c:	080028eb 	.word	0x080028eb
 8002850:	080028eb 	.word	0x080028eb
 8002854:	080028eb 	.word	0x080028eb
 8002858:	080028eb 	.word	0x080028eb
 800285c:	080028eb 	.word	0x080028eb
 8002860:	080028eb 	.word	0x080028eb
 8002864:	080028eb 	.word	0x080028eb
 8002868:	080028eb 	.word	0x080028eb
 800286c:	080028eb 	.word	0x080028eb
 8002870:	080028eb 	.word	0x080028eb
 8002874:	080028eb 	.word	0x080028eb
 8002878:	080028eb 	.word	0x080028eb
 800287c:	080028eb 	.word	0x080028eb
 8002880:	08002899 	.word	0x08002899
 8002884:	080028ad 	.word	0x080028ad
 8002888:	4a79      	ldr	r2, [pc, #484]	; (8002a70 <HAL_GPIO_Init+0x2b4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800288e:	e02c      	b.n	80028ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	623b      	str	r3, [r7, #32]
          break;
 8002896:	e029      	b.n	80028ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	3304      	adds	r3, #4
 800289e:	623b      	str	r3, [r7, #32]
          break;
 80028a0:	e024      	b.n	80028ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	3308      	adds	r3, #8
 80028a8:	623b      	str	r3, [r7, #32]
          break;
 80028aa:	e01f      	b.n	80028ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	330c      	adds	r3, #12
 80028b2:	623b      	str	r3, [r7, #32]
          break;
 80028b4:	e01a      	b.n	80028ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028be:	2304      	movs	r3, #4
 80028c0:	623b      	str	r3, [r7, #32]
          break;
 80028c2:	e013      	b.n	80028ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d105      	bne.n	80028d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028cc:	2308      	movs	r3, #8
 80028ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	611a      	str	r2, [r3, #16]
          break;
 80028d6:	e009      	b.n	80028ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028d8:	2308      	movs	r3, #8
 80028da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	615a      	str	r2, [r3, #20]
          break;
 80028e2:	e003      	b.n	80028ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028e4:	2300      	movs	r3, #0
 80028e6:	623b      	str	r3, [r7, #32]
          break;
 80028e8:	e000      	b.n	80028ec <HAL_GPIO_Init+0x130>
          break;
 80028ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2bff      	cmp	r3, #255	; 0xff
 80028f0:	d801      	bhi.n	80028f6 <HAL_GPIO_Init+0x13a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	e001      	b.n	80028fa <HAL_GPIO_Init+0x13e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3304      	adds	r3, #4
 80028fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2bff      	cmp	r3, #255	; 0xff
 8002900:	d802      	bhi.n	8002908 <HAL_GPIO_Init+0x14c>
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	e002      	b.n	800290e <HAL_GPIO_Init+0x152>
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	3b08      	subs	r3, #8
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	210f      	movs	r1, #15
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	401a      	ands	r2, r3
 8002920:	6a39      	ldr	r1, [r7, #32]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	431a      	orrs	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80b1 	beq.w	8002a9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800293c:	4b4d      	ldr	r3, [pc, #308]	; (8002a74 <HAL_GPIO_Init+0x2b8>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	4a4c      	ldr	r2, [pc, #304]	; (8002a74 <HAL_GPIO_Init+0x2b8>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6193      	str	r3, [r2, #24]
 8002948:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <HAL_GPIO_Init+0x2b8>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002954:	4a48      	ldr	r2, [pc, #288]	; (8002a78 <HAL_GPIO_Init+0x2bc>)
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	3302      	adds	r3, #2
 800295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002960:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	220f      	movs	r2, #15
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4013      	ands	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <HAL_GPIO_Init+0x2c0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d013      	beq.n	80029a8 <HAL_GPIO_Init+0x1ec>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a3f      	ldr	r2, [pc, #252]	; (8002a80 <HAL_GPIO_Init+0x2c4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00d      	beq.n	80029a4 <HAL_GPIO_Init+0x1e8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a3e      	ldr	r2, [pc, #248]	; (8002a84 <HAL_GPIO_Init+0x2c8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d007      	beq.n	80029a0 <HAL_GPIO_Init+0x1e4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a3d      	ldr	r2, [pc, #244]	; (8002a88 <HAL_GPIO_Init+0x2cc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d101      	bne.n	800299c <HAL_GPIO_Init+0x1e0>
 8002998:	2303      	movs	r3, #3
 800299a:	e006      	b.n	80029aa <HAL_GPIO_Init+0x1ee>
 800299c:	2304      	movs	r3, #4
 800299e:	e004      	b.n	80029aa <HAL_GPIO_Init+0x1ee>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e002      	b.n	80029aa <HAL_GPIO_Init+0x1ee>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_GPIO_Init+0x1ee>
 80029a8:	2300      	movs	r3, #0
 80029aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ac:	f002 0203 	and.w	r2, r2, #3
 80029b0:	0092      	lsls	r2, r2, #2
 80029b2:	4093      	lsls	r3, r2
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029ba:	492f      	ldr	r1, [pc, #188]	; (8002a78 <HAL_GPIO_Init+0x2bc>)
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d006      	beq.n	80029e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029d4:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	492c      	ldr	r1, [pc, #176]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029e2:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	4928      	ldr	r1, [pc, #160]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d006      	beq.n	8002a0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029fc:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4922      	ldr	r1, [pc, #136]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
 8002a08:	e006      	b.n	8002a18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	491e      	ldr	r1, [pc, #120]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d006      	beq.n	8002a32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	4918      	ldr	r1, [pc, #96]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]
 8002a30:	e006      	b.n	8002a40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	4914      	ldr	r1, [pc, #80]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d021      	beq.n	8002a90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	490e      	ldr	r1, [pc, #56]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60cb      	str	r3, [r1, #12]
 8002a58:	e021      	b.n	8002a9e <HAL_GPIO_Init+0x2e2>
 8002a5a:	bf00      	nop
 8002a5c:	10320000 	.word	0x10320000
 8002a60:	10310000 	.word	0x10310000
 8002a64:	10220000 	.word	0x10220000
 8002a68:	10210000 	.word	0x10210000
 8002a6c:	10120000 	.word	0x10120000
 8002a70:	10110000 	.word	0x10110000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	40010800 	.word	0x40010800
 8002a80:	40010c00 	.word	0x40010c00
 8002a84:	40011000 	.word	0x40011000
 8002a88:	40011400 	.word	0x40011400
 8002a8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_GPIO_Init+0x304>)
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	4909      	ldr	r1, [pc, #36]	; (8002ac0 <HAL_GPIO_Init+0x304>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f47f ae8e 	bne.w	80027d0 <HAL_GPIO_Init+0x14>
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	372c      	adds	r7, #44	; 0x2c
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	40010400 	.word	0x40010400

08002ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	e001      	b.n	8002ae6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	807b      	strh	r3, [r7, #2]
 8002afe:	4613      	mov	r3, r2
 8002b00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b02:	787b      	ldrb	r3, [r7, #1]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b08:	887a      	ldrh	r2, [r7, #2]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b0e:	e003      	b.n	8002b18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b10:	887b      	ldrh	r3, [r7, #2]
 8002b12:	041a      	lsls	r2, r3, #16
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	611a      	str	r2, [r3, #16]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b34:	887a      	ldrh	r2, [r7, #2]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	041a      	lsls	r2, r3, #16
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	43d9      	mvns	r1, r3
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	400b      	ands	r3, r1
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	611a      	str	r2, [r3, #16]
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e272      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8087 	beq.w	8002c82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b74:	4b92      	ldr	r3, [pc, #584]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d00c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b80:	4b8f      	ldr	r3, [pc, #572]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d112      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x5e>
 8002b8c:	4b8c      	ldr	r3, [pc, #560]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b98:	d10b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9a:	4b89      	ldr	r3, [pc, #548]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x12c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d168      	bne.n	8002c80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e24c      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x76>
 8002bbc:	4b80      	ldr	r3, [pc, #512]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a7f      	ldr	r2, [pc, #508]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e02e      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x98>
 8002bd2:	4b7b      	ldr	r3, [pc, #492]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7a      	ldr	r2, [pc, #488]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b78      	ldr	r3, [pc, #480]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a77      	ldr	r2, [pc, #476]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e01d      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0xbc>
 8002bf6:	4b72      	ldr	r3, [pc, #456]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a71      	ldr	r2, [pc, #452]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b6f      	ldr	r3, [pc, #444]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a6e      	ldr	r2, [pc, #440]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002c10:	4b6b      	ldr	r3, [pc, #428]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6a      	ldr	r2, [pc, #424]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4b68      	ldr	r3, [pc, #416]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a67      	ldr	r2, [pc, #412]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fe fc6a 	bl	8001508 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fe fc66 	bl	8001508 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e200      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b5d      	ldr	r3, [pc, #372]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0xe4>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fe fc56 	bl	8001508 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fc52 	bl	8001508 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e1ec      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x10c>
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d063      	beq.n	8002d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8e:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c9a:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d11c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x18c>
 8002ca6:	4b46      	ldr	r3, [pc, #280]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d116      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb2:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_RCC_OscConfig+0x176>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e1c0      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4939      	ldr	r1, [pc, #228]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	e03a      	b.n	8002d56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_RCC_OscConfig+0x270>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fc0b 	bl	8001508 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fc07 	bl	8001508 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e1a1      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d08:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4927      	ldr	r1, [pc, #156]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	600b      	str	r3, [r1, #0]
 8002d28:	e015      	b.n	8002d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_RCC_OscConfig+0x270>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe fbea 	bl	8001508 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d38:	f7fe fbe6 	bl	8001508 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e180      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d03a      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d019      	beq.n	8002d9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d70:	f7fe fbca 	bl	8001508 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d78:	f7fe fbc6 	bl	8001508 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e160      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f000 faf4 	bl	8003384 <RCC_Delay>
 8002d9c:	e01c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da4:	f7fe fbb0 	bl	8001508 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002daa:	e00f      	b.n	8002dcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe fbac 	bl	8001508 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d908      	bls.n	8002dcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e146      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	42420000 	.word	0x42420000
 8002dc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	4b92      	ldr	r3, [pc, #584]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e9      	bne.n	8002dac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80a6 	beq.w	8002f32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b8b      	ldr	r3, [pc, #556]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10d      	bne.n	8002e12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	4b88      	ldr	r3, [pc, #544]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a87      	ldr	r2, [pc, #540]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e00:	61d3      	str	r3, [r2, #28]
 8002e02:	4b85      	ldr	r3, [pc, #532]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	4b82      	ldr	r3, [pc, #520]	; (800301c <HAL_RCC_OscConfig+0x4c8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d118      	bne.n	8002e50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1e:	4b7f      	ldr	r3, [pc, #508]	; (800301c <HAL_RCC_OscConfig+0x4c8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7e      	ldr	r2, [pc, #504]	; (800301c <HAL_RCC_OscConfig+0x4c8>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fb6d 	bl	8001508 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e32:	f7fe fb69 	bl	8001508 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b64      	cmp	r3, #100	; 0x64
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e103      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e44:	4b75      	ldr	r3, [pc, #468]	; (800301c <HAL_RCC_OscConfig+0x4c8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x312>
 8002e58:	4b6f      	ldr	r3, [pc, #444]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4a6e      	ldr	r2, [pc, #440]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6213      	str	r3, [r2, #32]
 8002e64:	e02d      	b.n	8002ec2 <HAL_RCC_OscConfig+0x36e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x334>
 8002e6e:	4b6a      	ldr	r3, [pc, #424]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4a69      	ldr	r2, [pc, #420]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6213      	str	r3, [r2, #32]
 8002e7a:	4b67      	ldr	r3, [pc, #412]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4a66      	ldr	r2, [pc, #408]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	6213      	str	r3, [r2, #32]
 8002e86:	e01c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x36e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x356>
 8002e90:	4b61      	ldr	r3, [pc, #388]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4a60      	ldr	r2, [pc, #384]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6213      	str	r3, [r2, #32]
 8002e9c:	4b5e      	ldr	r3, [pc, #376]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4a5d      	ldr	r2, [pc, #372]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6213      	str	r3, [r2, #32]
 8002ea8:	e00b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x36e>
 8002eaa:	4b5b      	ldr	r3, [pc, #364]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4a5a      	ldr	r2, [pc, #360]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6213      	str	r3, [r2, #32]
 8002eb6:	4b58      	ldr	r3, [pc, #352]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4a57      	ldr	r2, [pc, #348]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d015      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fe fb1d 	bl	8001508 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe fb19 	bl	8001508 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0b1      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	4b4b      	ldr	r3, [pc, #300]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ee      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x37e>
 8002ef4:	e014      	b.n	8002f20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fb07 	bl	8001508 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe fb03 	bl	8001508 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e09b      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f14:	4b40      	ldr	r3, [pc, #256]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ee      	bne.n	8002efe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b3c      	ldr	r3, [pc, #240]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4a3b      	ldr	r2, [pc, #236]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8087 	beq.w	800304a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f3c:	4b36      	ldr	r3, [pc, #216]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d061      	beq.n	800300c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d146      	bne.n	8002fde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b33      	ldr	r3, [pc, #204]	; (8003020 <HAL_RCC_OscConfig+0x4cc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fe fad7 	bl	8001508 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fe fad3 	bl	8001508 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e06d      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f70:	4b29      	ldr	r3, [pc, #164]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d108      	bne.n	8002f98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	4921      	ldr	r1, [pc, #132]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f98:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a19      	ldr	r1, [r3, #32]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	491b      	ldr	r1, [pc, #108]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x4cc>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fe faa7 	bl	8001508 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fe faa3 	bl	8001508 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e03d      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd0:	4b11      	ldr	r3, [pc, #68]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x46a>
 8002fdc:	e035      	b.n	800304a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <HAL_RCC_OscConfig+0x4cc>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fa90 	bl	8001508 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fe fa8c 	bl	8001508 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e026      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x498>
 800300a:	e01e      	b.n	800304a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d107      	bne.n	8003024 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e019      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
 8003018:	40021000 	.word	0x40021000
 800301c:	40007000 	.word	0x40007000
 8003020:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_OscConfig+0x500>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	429a      	cmp	r2, r3
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000

08003058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0d0      	b.n	800320e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800306c:	4b6a      	ldr	r3, [pc, #424]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d910      	bls.n	800309c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b67      	ldr	r3, [pc, #412]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 0207 	bic.w	r2, r3, #7
 8003082:	4965      	ldr	r1, [pc, #404]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	4b63      	ldr	r3, [pc, #396]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0b8      	b.n	800320e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b4:	4b59      	ldr	r3, [pc, #356]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a58      	ldr	r2, [pc, #352]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030cc:	4b53      	ldr	r3, [pc, #332]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4a52      	ldr	r2, [pc, #328]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d8:	4b50      	ldr	r3, [pc, #320]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	494d      	ldr	r1, [pc, #308]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d040      	beq.n	8003178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	4b47      	ldr	r3, [pc, #284]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d115      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e07f      	b.n	800320e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e073      	b.n	800320e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003126:	4b3d      	ldr	r3, [pc, #244]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e06b      	b.n	800320e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003136:	4b39      	ldr	r3, [pc, #228]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4936      	ldr	r1, [pc, #216]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003148:	f7fe f9de 	bl	8001508 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	e00a      	b.n	8003166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003150:	f7fe f9da 	bl	8001508 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e053      	b.n	800320e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	4b2d      	ldr	r3, [pc, #180]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 020c 	and.w	r2, r3, #12
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	429a      	cmp	r2, r3
 8003176:	d1eb      	bne.n	8003150 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003178:	4b27      	ldr	r3, [pc, #156]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d210      	bcs.n	80031a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b24      	ldr	r3, [pc, #144]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 0207 	bic.w	r2, r3, #7
 800318e:	4922      	ldr	r1, [pc, #136]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e032      	b.n	800320e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4916      	ldr	r1, [pc, #88]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	490e      	ldr	r1, [pc, #56]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031e6:	f000 f821 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80031ea:	4602      	mov	r2, r0
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	490a      	ldr	r1, [pc, #40]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	5ccb      	ldrb	r3, [r1, r3]
 80031fa:	fa22 f303 	lsr.w	r3, r2, r3
 80031fe:	4a09      	ldr	r2, [pc, #36]	; (8003224 <HAL_RCC_ClockConfig+0x1cc>)
 8003200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x1d0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd ffac 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40022000 	.word	0x40022000
 800321c:	40021000 	.word	0x40021000
 8003220:	08006604 	.word	0x08006604
 8003224:	20000000 	.word	0x20000000
 8003228:	20000004 	.word	0x20000004

0800322c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800322c:	b490      	push	{r4, r7}
 800322e:	b08a      	sub	sp, #40	; 0x28
 8003230:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003232:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003234:	1d3c      	adds	r4, r7, #4
 8003236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800323c:	f240 2301 	movw	r3, #513	; 0x201
 8003240:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	2300      	movs	r3, #0
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003256:	4b21      	ldr	r3, [pc, #132]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b04      	cmp	r3, #4
 8003264:	d002      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x40>
 8003266:	2b08      	cmp	r3, #8
 8003268:	d003      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0x46>
 800326a:	e02b      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800326e:	623b      	str	r3, [r7, #32]
      break;
 8003270:	e02b      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	0c9b      	lsrs	r3, r3, #18
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3328      	adds	r3, #40	; 0x28
 800327c:	443b      	add	r3, r7
 800327e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003282:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d012      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	0c5b      	lsrs	r3, r3, #17
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	3328      	adds	r3, #40	; 0x28
 800329a:	443b      	add	r3, r7
 800329c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032a6:	fb03 f202 	mul.w	r2, r3, r2
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	e004      	b.n	80032be <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	623b      	str	r3, [r7, #32]
      break;
 80032c2:	e002      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032c6:	623b      	str	r3, [r7, #32]
      break;
 80032c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ca:	6a3b      	ldr	r3, [r7, #32]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3728      	adds	r7, #40	; 0x28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc90      	pop	{r4, r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	080065ec 	.word	0x080065ec
 80032dc:	40021000 	.word	0x40021000
 80032e0:	007a1200 	.word	0x007a1200
 80032e4:	003d0900 	.word	0x003d0900

080032e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ec:	4b02      	ldr	r3, [pc, #8]	; (80032f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	20000000 	.word	0x20000000

080032fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003300:	f7ff fff2 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	0adb      	lsrs	r3, r3, #11
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4903      	ldr	r1, [pc, #12]	; (8003320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	08006614 	.word	0x08006614

08003324 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	220f      	movs	r2, #15
 8003332:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <HAL_RCC_GetClockConfig+0x58>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0203 	and.w	r2, r3, #3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_RCC_GetClockConfig+0x58>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_GetClockConfig+0x58>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <HAL_RCC_GetClockConfig+0x58>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	08db      	lsrs	r3, r3, #3
 800335e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCC_GetClockConfig+0x5c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0207 	and.w	r2, r3, #7
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	40021000 	.word	0x40021000
 8003380:	40022000 	.word	0x40022000

08003384 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <RCC_Delay+0x34>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <RCC_Delay+0x38>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0a5b      	lsrs	r3, r3, #9
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033a0:	bf00      	nop
  }
  while (Delay --);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1e5a      	subs	r2, r3, #1
 80033a6:	60fa      	str	r2, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f9      	bne.n	80033a0 <RCC_Delay+0x1c>
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	20000000 	.word	0x20000000
 80033bc:	10624dd3 	.word	0x10624dd3

080033c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d07d      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e0:	4b4f      	ldr	r3, [pc, #316]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10d      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	4a4b      	ldr	r2, [pc, #300]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f6:	61d3      	str	r3, [r2, #28]
 80033f8:	4b49      	ldr	r3, [pc, #292]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003404:	2301      	movs	r3, #1
 8003406:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	4b46      	ldr	r3, [pc, #280]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d118      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003414:	4b43      	ldr	r3, [pc, #268]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a42      	ldr	r2, [pc, #264]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003420:	f7fe f872 	bl	8001508 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	e008      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003428:	f7fe f86e 	bl	8001508 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e06d      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	4b3a      	ldr	r3, [pc, #232]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003446:	4b36      	ldr	r3, [pc, #216]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02e      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d027      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003464:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800346e:	4b2e      	ldr	r3, [pc, #184]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003474:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800347a:	4a29      	ldr	r2, [pc, #164]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d014      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fe f83d 	bl	8001508 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fe f839 	bl	8001508 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e036      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a8:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ee      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b4:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4917      	ldr	r1, [pc, #92]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4a13      	ldr	r2, [pc, #76]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	490b      	ldr	r1, [pc, #44]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	4904      	ldr	r1, [pc, #16]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
 8003528:	42420440 	.word	0x42420440

0800352c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e041      	b.n	80035c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fd fd4c 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f000 fc84 	bl	8003e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d001      	beq.n	80035e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e03a      	b.n	800365a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_TIM_Base_Start_IT+0x98>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x58>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360e:	d009      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x58>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <HAL_TIM_Base_Start_IT+0x9c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x58>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a13      	ldr	r2, [pc, #76]	; (800366c <HAL_TIM_Base_Start_IT+0xa0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d111      	bne.n	8003648 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b06      	cmp	r3, #6
 8003634:	d010      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003646:	e007      	b.n	8003658 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800

08003670 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e041      	b.n	8003706 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd fcc6 	bl	8001028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f000 fbe2 	bl	8003e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d109      	bne.n	8003734 <HAL_TIM_PWM_Start+0x24>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	bf14      	ite	ne
 800372c:	2301      	movne	r3, #1
 800372e:	2300      	moveq	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	e022      	b.n	800377a <HAL_TIM_PWM_Start+0x6a>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b04      	cmp	r3, #4
 8003738:	d109      	bne.n	800374e <HAL_TIM_PWM_Start+0x3e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	bf14      	ite	ne
 8003746:	2301      	movne	r3, #1
 8003748:	2300      	moveq	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	e015      	b.n	800377a <HAL_TIM_PWM_Start+0x6a>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d109      	bne.n	8003768 <HAL_TIM_PWM_Start+0x58>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	bf14      	ite	ne
 8003760:	2301      	movne	r3, #1
 8003762:	2300      	moveq	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	e008      	b.n	800377a <HAL_TIM_PWM_Start+0x6a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b01      	cmp	r3, #1
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e05e      	b.n	8003840 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <HAL_TIM_PWM_Start+0x82>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003790:	e013      	b.n	80037ba <HAL_TIM_PWM_Start+0xaa>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d104      	bne.n	80037a2 <HAL_TIM_PWM_Start+0x92>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a0:	e00b      	b.n	80037ba <HAL_TIM_PWM_Start+0xaa>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d104      	bne.n	80037b2 <HAL_TIM_PWM_Start+0xa2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b0:	e003      	b.n	80037ba <HAL_TIM_PWM_Start+0xaa>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2201      	movs	r2, #1
 80037c0:	6839      	ldr	r1, [r7, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fdd8 	bl	8004378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <HAL_TIM_PWM_Start+0x138>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d107      	bne.n	80037e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_TIM_PWM_Start+0x138>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_TIM_PWM_Start+0xfa>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d009      	beq.n	800380a <HAL_TIM_PWM_Start+0xfa>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a14      	ldr	r2, [pc, #80]	; (800384c <HAL_TIM_PWM_Start+0x13c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_TIM_PWM_Start+0xfa>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a12      	ldr	r2, [pc, #72]	; (8003850 <HAL_TIM_PWM_Start+0x140>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d111      	bne.n	800382e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b06      	cmp	r3, #6
 800381a:	d010      	beq.n	800383e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382c:	e007      	b.n	800383e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800

08003854 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	6839      	ldr	r1, [r7, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fd86 	bl	8004378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a29      	ldr	r2, [pc, #164]	; (8003918 <HAL_TIM_PWM_Stop+0xc4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d117      	bne.n	80038a6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a1a      	ldr	r2, [r3, #32]
 800387c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <HAL_TIM_PWM_Stop+0x52>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a1a      	ldr	r2, [r3, #32]
 800388c:	f240 4344 	movw	r3, #1092	; 0x444
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d107      	bne.n	80038a6 <HAL_TIM_PWM_Stop+0x52>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a1a      	ldr	r2, [r3, #32]
 80038ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10f      	bne.n	80038d6 <HAL_TIM_PWM_Stop+0x82>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a1a      	ldr	r2, [r3, #32]
 80038bc:	f240 4344 	movw	r3, #1092	; 0x444
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d107      	bne.n	80038d6 <HAL_TIM_PWM_Stop+0x82>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_PWM_Stop+0x92>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e4:	e013      	b.n	800390e <HAL_TIM_PWM_Stop+0xba>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d104      	bne.n	80038f6 <HAL_TIM_PWM_Stop+0xa2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f4:	e00b      	b.n	800390e <HAL_TIM_PWM_Stop+0xba>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d104      	bne.n	8003906 <HAL_TIM_PWM_Stop+0xb2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003904:	e003      	b.n	800390e <HAL_TIM_PWM_Stop+0xba>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40012c00 	.word	0x40012c00

0800391c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b02      	cmp	r3, #2
 8003930:	d122      	bne.n	8003978 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d11b      	bne.n	8003978 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0202 	mvn.w	r2, #2
 8003948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa6f 	bl	8003e42 <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fa62 	bl	8003e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fa71 	bl	8003e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b04      	cmp	r3, #4
 8003984:	d122      	bne.n	80039cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b04      	cmp	r3, #4
 8003992:	d11b      	bne.n	80039cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0204 	mvn.w	r2, #4
 800399c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2202      	movs	r2, #2
 80039a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa45 	bl	8003e42 <HAL_TIM_IC_CaptureCallback>
 80039b8:	e005      	b.n	80039c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa38 	bl	8003e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fa47 	bl	8003e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d122      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d11b      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0208 	mvn.w	r2, #8
 80039f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2204      	movs	r2, #4
 80039f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa1b 	bl	8003e42 <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e005      	b.n	8003a1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fa0e 	bl	8003e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fa1d 	bl	8003e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d122      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d11b      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0210 	mvn.w	r2, #16
 8003a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2208      	movs	r2, #8
 8003a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f9f1 	bl	8003e42 <HAL_TIM_IC_CaptureCallback>
 8003a60:	e005      	b.n	8003a6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9e4 	bl	8003e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f9f3 	bl	8003e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d10e      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d107      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0201 	mvn.w	r2, #1
 8003a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fd f8a8 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	2b80      	cmp	r3, #128	; 0x80
 8003aac:	d10e      	bne.n	8003acc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab8:	2b80      	cmp	r3, #128	; 0x80
 8003aba:	d107      	bne.n	8003acc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fce1 	bl	800448e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b40      	cmp	r3, #64	; 0x40
 8003ad8:	d10e      	bne.n	8003af8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	2b40      	cmp	r3, #64	; 0x40
 8003ae6:	d107      	bne.n	8003af8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f9b7 	bl	8003e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d10e      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d107      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f06f 0220 	mvn.w	r2, #32
 8003b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fcac 	bl	800447c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e0ac      	b.n	8003ca0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	f200 809f 	bhi.w	8003c94 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003c95 	.word	0x08003c95
 8003b64:	08003c95 	.word	0x08003c95
 8003b68:	08003c95 	.word	0x08003c95
 8003b6c:	08003bd1 	.word	0x08003bd1
 8003b70:	08003c95 	.word	0x08003c95
 8003b74:	08003c95 	.word	0x08003c95
 8003b78:	08003c95 	.word	0x08003c95
 8003b7c:	08003c13 	.word	0x08003c13
 8003b80:	08003c95 	.word	0x08003c95
 8003b84:	08003c95 	.word	0x08003c95
 8003b88:	08003c95 	.word	0x08003c95
 8003b8c:	08003c53 	.word	0x08003c53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f9d0 	bl	8003f3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0208 	orr.w	r2, r2, #8
 8003baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0204 	bic.w	r2, r2, #4
 8003bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6999      	ldr	r1, [r3, #24]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	619a      	str	r2, [r3, #24]
      break;
 8003bce:	e062      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fa16 	bl	8004008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6999      	ldr	r1, [r3, #24]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	021a      	lsls	r2, r3, #8
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	619a      	str	r2, [r3, #24]
      break;
 8003c10:	e041      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fa5f 	bl	80040dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0208 	orr.w	r2, r2, #8
 8003c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0204 	bic.w	r2, r2, #4
 8003c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69d9      	ldr	r1, [r3, #28]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	61da      	str	r2, [r3, #28]
      break;
 8003c50:	e021      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 faa9 	bl	80041b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69d9      	ldr	r1, [r3, #28]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	021a      	lsls	r2, r3, #8
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	61da      	str	r2, [r3, #28]
      break;
 8003c92:	e000      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003c94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIM_ConfigClockSource+0x18>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e0b3      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x180>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf8:	d03e      	beq.n	8003d78 <HAL_TIM_ConfigClockSource+0xd0>
 8003cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfe:	f200 8087 	bhi.w	8003e10 <HAL_TIM_ConfigClockSource+0x168>
 8003d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d06:	f000 8085 	beq.w	8003e14 <HAL_TIM_ConfigClockSource+0x16c>
 8003d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0e:	d87f      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x168>
 8003d10:	2b70      	cmp	r3, #112	; 0x70
 8003d12:	d01a      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0xa2>
 8003d14:	2b70      	cmp	r3, #112	; 0x70
 8003d16:	d87b      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x168>
 8003d18:	2b60      	cmp	r3, #96	; 0x60
 8003d1a:	d050      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x116>
 8003d1c:	2b60      	cmp	r3, #96	; 0x60
 8003d1e:	d877      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x168>
 8003d20:	2b50      	cmp	r3, #80	; 0x50
 8003d22:	d03c      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0xf6>
 8003d24:	2b50      	cmp	r3, #80	; 0x50
 8003d26:	d873      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x168>
 8003d28:	2b40      	cmp	r3, #64	; 0x40
 8003d2a:	d058      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0x136>
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	d86f      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x168>
 8003d30:	2b30      	cmp	r3, #48	; 0x30
 8003d32:	d064      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x156>
 8003d34:	2b30      	cmp	r3, #48	; 0x30
 8003d36:	d86b      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x168>
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d060      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x156>
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d867      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x168>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d05c      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x156>
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d05a      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d48:	e062      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6899      	ldr	r1, [r3, #8]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f000 faee 	bl	800433a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	609a      	str	r2, [r3, #8]
      break;
 8003d76:	e04e      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6899      	ldr	r1, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f000 fad7 	bl	800433a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d9a:	609a      	str	r2, [r3, #8]
      break;
 8003d9c:	e03b      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6859      	ldr	r1, [r3, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f000 fa4e 	bl	800424c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2150      	movs	r1, #80	; 0x50
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 faa5 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8003dbc:	e02b      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f000 fa6c 	bl	80042a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2160      	movs	r1, #96	; 0x60
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fa95 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8003ddc:	e01b      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f000 fa2e 	bl	800424c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2140      	movs	r1, #64	; 0x40
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fa85 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8003dfc:	e00b      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f000 fa7c 	bl	8004306 <TIM_ITRx_SetConfig>
        break;
 8003e0e:	e002      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e10:	bf00      	nop
 8003e12:	e000      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a29      	ldr	r2, [pc, #164]	; (8003f30 <TIM_Base_SetConfig+0xb8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00b      	beq.n	8003ea8 <TIM_Base_SetConfig+0x30>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e96:	d007      	beq.n	8003ea8 <TIM_Base_SetConfig+0x30>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a26      	ldr	r2, [pc, #152]	; (8003f34 <TIM_Base_SetConfig+0xbc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_Base_SetConfig+0x30>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <TIM_Base_SetConfig+0xc0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d108      	bne.n	8003eba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <TIM_Base_SetConfig+0xb8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00b      	beq.n	8003eda <TIM_Base_SetConfig+0x62>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d007      	beq.n	8003eda <TIM_Base_SetConfig+0x62>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a19      	ldr	r2, [pc, #100]	; (8003f34 <TIM_Base_SetConfig+0xbc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d003      	beq.n	8003eda <TIM_Base_SetConfig+0x62>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <TIM_Base_SetConfig+0xc0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d108      	bne.n	8003eec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <TIM_Base_SetConfig+0xb8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d103      	bne.n	8003f20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	615a      	str	r2, [r3, #20]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800

08003f3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f023 0201 	bic.w	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0303 	bic.w	r3, r3, #3
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f023 0302 	bic.w	r3, r3, #2
 8003f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <TIM_OC1_SetConfig+0xc8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d10c      	bne.n	8003fb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 0308 	bic.w	r3, r3, #8
 8003f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f023 0304 	bic.w	r3, r3, #4
 8003fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a13      	ldr	r2, [pc, #76]	; (8004004 <TIM_OC1_SetConfig+0xc8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d111      	bne.n	8003fde <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	621a      	str	r2, [r3, #32]
}
 8003ff8:	bf00      	nop
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40012c00 	.word	0x40012c00

08004008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0210 	bic.w	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f023 0320 	bic.w	r3, r3, #32
 8004052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <TIM_OC2_SetConfig+0xd0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d10d      	bne.n	8004084 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004082:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a14      	ldr	r2, [pc, #80]	; (80040d8 <TIM_OC2_SetConfig+0xd0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d113      	bne.n	80040b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800409a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr
 80040d8:	40012c00 	.word	0x40012c00

080040dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1d      	ldr	r2, [pc, #116]	; (80041ac <TIM_OC3_SetConfig+0xd0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10d      	bne.n	8004156 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a14      	ldr	r2, [pc, #80]	; (80041ac <TIM_OC3_SetConfig+0xd0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d113      	bne.n	8004186 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800416c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	621a      	str	r2, [r3, #32]
}
 80041a0:	bf00      	nop
 80041a2:	371c      	adds	r7, #28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40012c00 	.word	0x40012c00

080041b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	031b      	lsls	r3, r3, #12
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a0f      	ldr	r2, [pc, #60]	; (8004248 <TIM_OC4_SetConfig+0x98>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d109      	bne.n	8004224 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	40012c00 	.word	0x40012c00

0800424c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f023 0201 	bic.w	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 030a 	bic.w	r3, r3, #10
 8004288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f023 0210 	bic.w	r2, r3, #16
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	031b      	lsls	r3, r3, #12
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	621a      	str	r2, [r3, #32]
}
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	f043 0307 	orr.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800433a:	b480      	push	{r7}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004354:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	021a      	lsls	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	431a      	orrs	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4313      	orrs	r3, r2
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	609a      	str	r2, [r3, #8]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	2201      	movs	r2, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1a      	ldr	r2, [r3, #32]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	43db      	mvns	r3, r3
 800439a:	401a      	ands	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a1a      	ldr	r2, [r3, #32]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	fa01 f303 	lsl.w	r3, r1, r3
 80043b0:	431a      	orrs	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e046      	b.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a16      	ldr	r2, [pc, #88]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00e      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004424:	d009      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d004      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a10      	ldr	r2, [pc, #64]	; (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10c      	bne.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	4313      	orrs	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40000400 	.word	0x40000400
 8004478:	40000800 	.word	0x40000800

0800447c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr

0800448e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044b2:	2b84      	cmp	r3, #132	; 0x84
 80044b4:	d005      	beq.n	80044c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4413      	add	r3, r2
 80044be:	3303      	adds	r3, #3
 80044c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044c2:	68fb      	ldr	r3, [r7, #12]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044d2:	f000 ff1d 	bl	8005310 <vTaskStartScheduler>
  
  return osOK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}

080044dc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044de:	b089      	sub	sp, #36	; 0x24
 80044e0:	af04      	add	r7, sp, #16
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d020      	beq.n	8004530 <osThreadCreate+0x54>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01c      	beq.n	8004530 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685c      	ldr	r4, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681d      	ldr	r5, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691e      	ldr	r6, [r3, #16]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ffc9 	bl	80044a0 <makeFreeRtosPriority>
 800450e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004518:	9202      	str	r2, [sp, #8]
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	9100      	str	r1, [sp, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	4632      	mov	r2, r6
 8004522:	4629      	mov	r1, r5
 8004524:	4620      	mov	r0, r4
 8004526:	f000 fd35 	bl	8004f94 <xTaskCreateStatic>
 800452a:	4603      	mov	r3, r0
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	e01c      	b.n	800456a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685c      	ldr	r4, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800453c:	b29e      	uxth	r6, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff ffab 	bl	80044a0 <makeFreeRtosPriority>
 800454a:	4602      	mov	r2, r0
 800454c:	f107 030c 	add.w	r3, r7, #12
 8004550:	9301      	str	r3, [sp, #4]
 8004552:	9200      	str	r2, [sp, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	4632      	mov	r2, r6
 8004558:	4629      	mov	r1, r5
 800455a:	4620      	mov	r0, r4
 800455c:	f000 fd76 	bl	800504c <xTaskCreate>
 8004560:	4603      	mov	r3, r0
 8004562:	2b01      	cmp	r3, #1
 8004564:	d001      	beq.n	800456a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004566:	2300      	movs	r3, #0
 8004568:	e000      	b.n	800456c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800456a:	68fb      	ldr	r3, [r7, #12]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004574 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <osDelay+0x16>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	e000      	b.n	800458c <osDelay+0x18>
 800458a:	2301      	movs	r3, #1
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fe8b 	bl	80052a8 <vTaskDelay>
  
  return osOK;
 8004592:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f103 0208 	add.w	r2, r3, #8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295
 80045b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f103 0208 	add.w	r2, r3, #8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f103 0208 	add.w	r2, r3, #8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	601a      	str	r2, [r3, #0]
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	d103      	bne.n	8004658 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	e00c      	b.n	8004672 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3308      	adds	r3, #8
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	e002      	b.n	8004666 <vListInsert+0x2e>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	d2f6      	bcs.n	8004660 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr

080046a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6892      	ldr	r2, [r2, #8]
 80046be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6852      	ldr	r2, [r2, #4]
 80046c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d103      	bne.n	80046dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	1e5a      	subs	r2, r3, #1
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr
	...

080046fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004726:	f001 fbf1 	bl	8005f0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004736:	fb01 f303 	mul.w	r3, r1, r3
 800473a:	441a      	add	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	3b01      	subs	r3, #1
 8004758:	68f9      	ldr	r1, [r7, #12]
 800475a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	441a      	add	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	22ff      	movs	r2, #255	; 0xff
 800476a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	22ff      	movs	r2, #255	; 0xff
 8004772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d114      	bne.n	80047a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01a      	beq.n	80047ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3310      	adds	r3, #16
 8004788:	4618      	mov	r0, r3
 800478a:	f001 f807 	bl	800579c <xTaskRemoveFromEventList>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d012      	beq.n	80047ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <xQueueGenericReset+0xcc>)
 8004796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	e009      	b.n	80047ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3310      	adds	r3, #16
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fef6 	bl	800459c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3324      	adds	r3, #36	; 0x24
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fef1 	bl	800459c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80047ba:	f001 fbd7 	bl	8005f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80047be:	2301      	movs	r3, #1
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10a      	bne.n	80047f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	613b      	str	r3, [r7, #16]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61fb      	str	r3, [r7, #28]
 8004800:	e004      	b.n	800480c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	3348      	adds	r3, #72	; 0x48
 8004810:	4618      	mov	r0, r3
 8004812:	f001 fc7b 	bl	800610c <pvPortMalloc>
 8004816:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00f      	beq.n	800483e <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	3348      	adds	r3, #72	; 0x48
 8004822:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800482c:	79fa      	ldrb	r2, [r7, #7]
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	4613      	mov	r3, r2
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f805 	bl	8004848 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800483e:	69bb      	ldr	r3, [r7, #24]
	}
 8004840:	4618      	mov	r0, r3
 8004842:	3720      	adds	r7, #32
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d103      	bne.n	8004864 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e002      	b.n	800486a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004876:	2101      	movs	r1, #1
 8004878:	69b8      	ldr	r0, [r7, #24]
 800487a:	f7ff ff3f 	bl	80046fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08e      	sub	sp, #56	; 0x38
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004896:	2300      	movs	r3, #0
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xQueueGenericSend+0x32>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d103      	bne.n	80048c8 <xQueueGenericSend+0x40>
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <xQueueGenericSend+0x44>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <xQueueGenericSend+0x46>
 80048cc:	2300      	movs	r3, #0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <xQueueGenericSend+0x60>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d103      	bne.n	80048f6 <xQueueGenericSend+0x6e>
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <xQueueGenericSend+0x72>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <xQueueGenericSend+0x74>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <xQueueGenericSend+0x8e>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	623b      	str	r3, [r7, #32]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004916:	f001 f901 	bl	8005b1c <xTaskGetSchedulerState>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <xQueueGenericSend+0x9e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <xQueueGenericSend+0xa2>
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <xQueueGenericSend+0xa4>
 800492a:	2300      	movs	r3, #0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <xQueueGenericSend+0xbe>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	61fb      	str	r3, [r7, #28]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004946:	f001 fae1 	bl	8005f0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <xQueueGenericSend+0xd4>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d129      	bne.n	80049b0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004962:	f000 fa07 	bl	8004d74 <prvCopyDataToQueue>
 8004966:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	2b00      	cmp	r3, #0
 800496e:	d010      	beq.n	8004992 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	3324      	adds	r3, #36	; 0x24
 8004974:	4618      	mov	r0, r3
 8004976:	f000 ff11 	bl	800579c <xTaskRemoveFromEventList>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d013      	beq.n	80049a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004980:	4b3f      	ldr	r3, [pc, #252]	; (8004a80 <xQueueGenericSend+0x1f8>)
 8004982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	e00a      	b.n	80049a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004998:	4b39      	ldr	r3, [pc, #228]	; (8004a80 <xQueueGenericSend+0x1f8>)
 800499a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049a8:	f001 fae0 	bl	8005f6c <vPortExitCritical>
				return pdPASS;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e063      	b.n	8004a78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d103      	bne.n	80049be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049b6:	f001 fad9 	bl	8005f6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e05c      	b.n	8004a78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d106      	bne.n	80049d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049c4:	f107 0314 	add.w	r3, r7, #20
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 ff49 	bl	8005860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049ce:	2301      	movs	r3, #1
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049d2:	f001 facb 	bl	8005f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049d6:	f000 fcfb 	bl	80053d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049da:	f001 fa97 	bl	8005f0c <vPortEnterCritical>
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049e4:	b25b      	sxtb	r3, r3
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ea:	d103      	bne.n	80049f4 <xQueueGenericSend+0x16c>
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049fa:	b25b      	sxtb	r3, r3
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d103      	bne.n	8004a0a <xQueueGenericSend+0x182>
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a0a:	f001 faaf 	bl	8005f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a0e:	1d3a      	adds	r2, r7, #4
 8004a10:	f107 0314 	add.w	r3, r7, #20
 8004a14:	4611      	mov	r1, r2
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 ff38 	bl	800588c <xTaskCheckForTimeOut>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d124      	bne.n	8004a6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a24:	f000 fa9e 	bl	8004f64 <prvIsQueueFull>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d018      	beq.n	8004a60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	3310      	adds	r3, #16
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fe8c 	bl	8005754 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a3e:	f000 fa29 	bl	8004e94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a42:	f000 fcd3 	bl	80053ec <xTaskResumeAll>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f47f af7c 	bne.w	8004946 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <xQueueGenericSend+0x1f8>)
 8004a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	e772      	b.n	8004946 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a62:	f000 fa17 	bl	8004e94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a66:	f000 fcc1 	bl	80053ec <xTaskResumeAll>
 8004a6a:	e76c      	b.n	8004946 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a6e:	f000 fa11 	bl	8004e94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a72:	f000 fcbb 	bl	80053ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a76:	2300      	movs	r3, #0
		}
	}
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3738      	adds	r7, #56	; 0x38
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	e000ed04 	.word	0xe000ed04

08004a84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08e      	sub	sp, #56	; 0x38
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d103      	bne.n	8004ac0 <xQueueGenericSendFromISR+0x3c>
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <xQueueGenericSendFromISR+0x40>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <xQueueGenericSendFromISR+0x42>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	623b      	str	r3, [r7, #32]
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d103      	bne.n	8004aee <xQueueGenericSendFromISR+0x6a>
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <xQueueGenericSendFromISR+0x6e>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <xQueueGenericSendFromISR+0x70>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	61fb      	str	r3, [r7, #28]
}
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b0e:	f001 fabf 	bl	8006090 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b12:	f3ef 8211 	mrs	r2, BASEPRI
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	61ba      	str	r2, [r7, #24]
 8004b28:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d302      	bcc.n	8004b40 <xQueueGenericSendFromISR+0xbc>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d12c      	bne.n	8004b9a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b50:	f000 f910 	bl	8004d74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b54:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d112      	bne.n	8004b84 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	3324      	adds	r3, #36	; 0x24
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fe16 	bl	800579c <xTaskRemoveFromEventList>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00e      	beq.n	8004b94 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00b      	beq.n	8004b94 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e007      	b.n	8004b94 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b88:	3301      	adds	r3, #1
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	b25a      	sxtb	r2, r3
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b94:	2301      	movs	r3, #1
 8004b96:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004b98:	e001      	b.n	8004b9e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ba8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3738      	adds	r7, #56	; 0x38
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08c      	sub	sp, #48	; 0x30
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <xQueueReceive+0x30>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	623b      	str	r3, [r7, #32]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d103      	bne.n	8004bf2 <xQueueReceive+0x3e>
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <xQueueReceive+0x42>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <xQueueReceive+0x44>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <xQueueReceive+0x5e>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	61fb      	str	r3, [r7, #28]
}
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c12:	f000 ff83 	bl	8005b1c <xTaskGetSchedulerState>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <xQueueReceive+0x6e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <xQueueReceive+0x72>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <xQueueReceive+0x74>
 8004c26:	2300      	movs	r3, #0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xQueueReceive+0x8e>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	61bb      	str	r3, [r7, #24]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c42:	f001 f963 	bl	8005f0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01f      	beq.n	8004c92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c56:	f000 f8f7 	bl	8004e48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	1e5a      	subs	r2, r3, #1
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00f      	beq.n	8004c8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	3310      	adds	r3, #16
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fd94 	bl	800579c <xTaskRemoveFromEventList>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c7a:	4b3d      	ldr	r3, [pc, #244]	; (8004d70 <xQueueReceive+0x1bc>)
 8004c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c8a:	f001 f96f 	bl	8005f6c <vPortExitCritical>
				return pdPASS;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e069      	b.n	8004d66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d103      	bne.n	8004ca0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c98:	f001 f968 	bl	8005f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e062      	b.n	8004d66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ca6:	f107 0310 	add.w	r3, r7, #16
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fdd8 	bl	8005860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cb4:	f001 f95a 	bl	8005f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cb8:	f000 fb8a 	bl	80053d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cbc:	f001 f926 	bl	8005f0c <vPortEnterCritical>
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cc6:	b25b      	sxtb	r3, r3
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d103      	bne.n	8004cd6 <xQueueReceive+0x122>
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d103      	bne.n	8004cec <xQueueReceive+0x138>
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cec:	f001 f93e 	bl	8005f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cf0:	1d3a      	adds	r2, r7, #4
 8004cf2:	f107 0310 	add.w	r3, r7, #16
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fdc7 	bl	800588c <xTaskCheckForTimeOut>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d123      	bne.n	8004d4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d06:	f000 f917 	bl	8004f38 <prvIsQueueEmpty>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d017      	beq.n	8004d40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	3324      	adds	r3, #36	; 0x24
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fd1b 	bl	8005754 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d20:	f000 f8b8 	bl	8004e94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d24:	f000 fb62 	bl	80053ec <xTaskResumeAll>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d189      	bne.n	8004c42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004d2e:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <xQueueReceive+0x1bc>)
 8004d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	e780      	b.n	8004c42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d42:	f000 f8a7 	bl	8004e94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d46:	f000 fb51 	bl	80053ec <xTaskResumeAll>
 8004d4a:	e77a      	b.n	8004c42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d4e:	f000 f8a1 	bl	8004e94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d52:	f000 fb4b 	bl	80053ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d58:	f000 f8ee 	bl	8004f38 <prvIsQueueEmpty>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f43f af6f 	beq.w	8004c42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3730      	adds	r7, #48	; 0x30
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	e000ed04 	.word	0xe000ed04

08004d74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10d      	bne.n	8004dae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d14d      	bne.n	8004e36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 feda 	bl	8005b58 <xTaskPriorityDisinherit>
 8004da4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	605a      	str	r2, [r3, #4]
 8004dac:	e043      	b.n	8004e36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d119      	bne.n	8004de8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6898      	ldr	r0, [r3, #8]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	f001 fba0 	bl	8006504 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	441a      	add	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d32b      	bcc.n	8004e36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	609a      	str	r2, [r3, #8]
 8004de6:	e026      	b.n	8004e36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	68d8      	ldr	r0, [r3, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	461a      	mov	r2, r3
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	f001 fb86 	bl	8006504 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	425b      	negs	r3, r3
 8004e02:	441a      	add	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d207      	bcs.n	8004e24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	425b      	negs	r3, r3
 8004e1e:	441a      	add	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d105      	bne.n	8004e36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e3e:	697b      	ldr	r3, [r7, #20]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d018      	beq.n	8004e8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	441a      	add	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d303      	bcc.n	8004e7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68d9      	ldr	r1, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	461a      	mov	r2, r3
 8004e86:	6838      	ldr	r0, [r7, #0]
 8004e88:	f001 fb3c 	bl	8006504 <memcpy>
	}
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e9c:	f001 f836 	bl	8005f0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ea8:	e011      	b.n	8004ece <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d012      	beq.n	8004ed8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3324      	adds	r3, #36	; 0x24
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fc70 	bl	800579c <xTaskRemoveFromEventList>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ec2:	f000 fd45 	bl	8005950 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	dce9      	bgt.n	8004eaa <prvUnlockQueue+0x16>
 8004ed6:	e000      	b.n	8004eda <prvUnlockQueue+0x46>
					break;
 8004ed8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	22ff      	movs	r2, #255	; 0xff
 8004ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ee2:	f001 f843 	bl	8005f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ee6:	f001 f811 	bl	8005f0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ef2:	e011      	b.n	8004f18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d012      	beq.n	8004f22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3310      	adds	r3, #16
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fc4b 	bl	800579c <xTaskRemoveFromEventList>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f0c:	f000 fd20 	bl	8005950 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f10:	7bbb      	ldrb	r3, [r7, #14]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	dce9      	bgt.n	8004ef4 <prvUnlockQueue+0x60>
 8004f20:	e000      	b.n	8004f24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	22ff      	movs	r2, #255	; 0xff
 8004f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f2c:	f001 f81e 	bl	8005f6c <vPortExitCritical>
}
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f40:	f000 ffe4 	bl	8005f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e001      	b.n	8004f56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f56:	f001 f809 	bl	8005f6c <vPortExitCritical>

	return xReturn;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f6c:	f000 ffce 	bl	8005f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d102      	bne.n	8004f82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e001      	b.n	8004f86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f86:	f000 fff1 	bl	8005f6c <vPortExitCritical>

	return xReturn;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08e      	sub	sp, #56	; 0x38
 8004f98:	af04      	add	r7, sp, #16
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <xTaskCreateStatic+0x2a>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	623b      	str	r3, [r7, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <xTaskCreateStatic+0x46>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	61fb      	str	r3, [r7, #28]
}
 8004fd6:	bf00      	nop
 8004fd8:	e7fe      	b.n	8004fd8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fda:	2354      	movs	r3, #84	; 0x54
 8004fdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b54      	cmp	r3, #84	; 0x54
 8004fe2:	d00a      	beq.n	8004ffa <xTaskCreateStatic+0x66>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	61bb      	str	r3, [r7, #24]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01e      	beq.n	800503e <xTaskCreateStatic+0xaa>
 8005000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005002:	2b00      	cmp	r3, #0
 8005004:	d01b      	beq.n	800503e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005018:	2300      	movs	r3, #0
 800501a:	9303      	str	r3, [sp, #12]
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	9302      	str	r3, [sp, #8]
 8005020:	f107 0314 	add.w	r3, r7, #20
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f850 	bl	80050d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005038:	f000 f8cc 	bl	80051d4 <prvAddNewTaskToReadyList>
 800503c:	e001      	b.n	8005042 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005042:	697b      	ldr	r3, [r7, #20]
	}
 8005044:	4618      	mov	r0, r3
 8005046:	3728      	adds	r7, #40	; 0x28
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08c      	sub	sp, #48	; 0x30
 8005050:	af04      	add	r7, sp, #16
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4618      	mov	r0, r3
 8005062:	f001 f853 	bl	800610c <pvPortMalloc>
 8005066:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00e      	beq.n	800508c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800506e:	2054      	movs	r0, #84	; 0x54
 8005070:	f001 f84c 	bl	800610c <pvPortMalloc>
 8005074:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
 8005082:	e005      	b.n	8005090 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005084:	6978      	ldr	r0, [r7, #20]
 8005086:	f001 f905 	bl	8006294 <vPortFree>
 800508a:	e001      	b.n	8005090 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800508c:	2300      	movs	r3, #0
 800508e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d017      	beq.n	80050c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800509e:	88fa      	ldrh	r2, [r7, #6]
 80050a0:	2300      	movs	r3, #0
 80050a2:	9303      	str	r3, [sp, #12]
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	9302      	str	r3, [sp, #8]
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f80e 	bl	80050d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ba:	69f8      	ldr	r0, [r7, #28]
 80050bc:	f000 f88a 	bl	80051d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050c0:	2301      	movs	r3, #1
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	e002      	b.n	80050cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050cc:	69bb      	ldr	r3, [r7, #24]
	}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3720      	adds	r7, #32
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b088      	sub	sp, #32
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050ee:	3b01      	subs	r3, #1
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f023 0307 	bic.w	r3, r3, #7
 80050fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <prvInitialiseNewTask+0x48>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	617b      	str	r3, [r7, #20]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	e012      	b.n	800514a <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	7819      	ldrb	r1, [r3, #0]
 800512c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	3334      	adds	r3, #52	; 0x34
 8005134:	460a      	mov	r2, r1
 8005136:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3301      	adds	r3, #1
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	2b0f      	cmp	r3, #15
 800514e:	d9e9      	bls.n	8005124 <prvInitialiseNewTask+0x4e>
 8005150:	e000      	b.n	8005154 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005152:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	2b06      	cmp	r3, #6
 8005160:	d901      	bls.n	8005166 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005162:	2306      	movs	r3, #6
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800516a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005170:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	2200      	movs	r2, #0
 8005176:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	3304      	adds	r3, #4
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff fa2c 	bl	80045da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	3318      	adds	r3, #24
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fa27 	bl	80045da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005190:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	f1c3 0207 	rsb	r2, r3, #7
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	2200      	movs	r2, #0
 80051a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	68f9      	ldr	r1, [r7, #12]
 80051b4:	69b8      	ldr	r0, [r7, #24]
 80051b6:	f000 fdbb 	bl	8005d30 <pxPortInitialiseStack>
 80051ba:	4602      	mov	r2, r0
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051cc:	bf00      	nop
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051dc:	f000 fe96 	bl	8005f0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051e0:	4b2a      	ldr	r3, [pc, #168]	; (800528c <prvAddNewTaskToReadyList+0xb8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3301      	adds	r3, #1
 80051e6:	4a29      	ldr	r2, [pc, #164]	; (800528c <prvAddNewTaskToReadyList+0xb8>)
 80051e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051ea:	4b29      	ldr	r3, [pc, #164]	; (8005290 <prvAddNewTaskToReadyList+0xbc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051f2:	4a27      	ldr	r2, [pc, #156]	; (8005290 <prvAddNewTaskToReadyList+0xbc>)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051f8:	4b24      	ldr	r3, [pc, #144]	; (800528c <prvAddNewTaskToReadyList+0xb8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d110      	bne.n	8005222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005200:	f000 fbca 	bl	8005998 <prvInitialiseTaskLists>
 8005204:	e00d      	b.n	8005222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005206:	4b23      	ldr	r3, [pc, #140]	; (8005294 <prvAddNewTaskToReadyList+0xc0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800520e:	4b20      	ldr	r3, [pc, #128]	; (8005290 <prvAddNewTaskToReadyList+0xbc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	429a      	cmp	r2, r3
 800521a:	d802      	bhi.n	8005222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800521c:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <prvAddNewTaskToReadyList+0xbc>)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005222:	4b1d      	ldr	r3, [pc, #116]	; (8005298 <prvAddNewTaskToReadyList+0xc4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3301      	adds	r3, #1
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <prvAddNewTaskToReadyList+0xc4>)
 800522a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	2201      	movs	r2, #1
 8005232:	409a      	lsls	r2, r3
 8005234:	4b19      	ldr	r3, [pc, #100]	; (800529c <prvAddNewTaskToReadyList+0xc8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4313      	orrs	r3, r2
 800523a:	4a18      	ldr	r2, [pc, #96]	; (800529c <prvAddNewTaskToReadyList+0xc8>)
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4a15      	ldr	r2, [pc, #84]	; (80052a0 <prvAddNewTaskToReadyList+0xcc>)
 800524c:	441a      	add	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3304      	adds	r3, #4
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f7ff f9cc 	bl	80045f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800525a:	f000 fe87 	bl	8005f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800525e:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <prvAddNewTaskToReadyList+0xc0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00e      	beq.n	8005284 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005266:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <prvAddNewTaskToReadyList+0xbc>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	429a      	cmp	r2, r3
 8005272:	d207      	bcs.n	8005284 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <prvAddNewTaskToReadyList+0xd0>)
 8005276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20000598 	.word	0x20000598
 8005290:	20000498 	.word	0x20000498
 8005294:	200005a4 	.word	0x200005a4
 8005298:	200005b4 	.word	0x200005b4
 800529c:	200005a0 	.word	0x200005a0
 80052a0:	2000049c 	.word	0x2000049c
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d017      	beq.n	80052ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052ba:	4b13      	ldr	r3, [pc, #76]	; (8005308 <vTaskDelay+0x60>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <vTaskDelay+0x30>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	60bb      	str	r3, [r7, #8]
}
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052d8:	f000 f87a 	bl	80053d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052dc:	2100      	movs	r1, #0
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fcc0 	bl	8005c64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052e4:	f000 f882 	bl	80053ec <xTaskResumeAll>
 80052e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d107      	bne.n	8005300 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80052f0:	4b06      	ldr	r3, [pc, #24]	; (800530c <vTaskDelay+0x64>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	200005c0 	.word	0x200005c0
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08a      	sub	sp, #40	; 0x28
 8005314:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005316:	2300      	movs	r3, #0
 8005318:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800531e:	463a      	mov	r2, r7
 8005320:	1d39      	adds	r1, r7, #4
 8005322:	f107 0308 	add.w	r3, r7, #8
 8005326:	4618      	mov	r0, r3
 8005328:	f7fb f94c 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	9202      	str	r2, [sp, #8]
 8005334:	9301      	str	r3, [sp, #4]
 8005336:	2300      	movs	r3, #0
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	2300      	movs	r3, #0
 800533c:	460a      	mov	r2, r1
 800533e:	491e      	ldr	r1, [pc, #120]	; (80053b8 <vTaskStartScheduler+0xa8>)
 8005340:	481e      	ldr	r0, [pc, #120]	; (80053bc <vTaskStartScheduler+0xac>)
 8005342:	f7ff fe27 	bl	8004f94 <xTaskCreateStatic>
 8005346:	4603      	mov	r3, r0
 8005348:	4a1d      	ldr	r2, [pc, #116]	; (80053c0 <vTaskStartScheduler+0xb0>)
 800534a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800534c:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <vTaskStartScheduler+0xb0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005354:	2301      	movs	r3, #1
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	e001      	b.n	800535e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d116      	bne.n	8005392 <vTaskStartScheduler+0x82>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	613b      	str	r3, [r7, #16]
}
 8005376:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005378:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <vTaskStartScheduler+0xb4>)
 800537a:	f04f 32ff 	mov.w	r2, #4294967295
 800537e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005380:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <vTaskStartScheduler+0xb8>)
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005386:	4b11      	ldr	r3, [pc, #68]	; (80053cc <vTaskStartScheduler+0xbc>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800538c:	f000 fd4c 	bl	8005e28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005390:	e00e      	b.n	80053b0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005398:	d10a      	bne.n	80053b0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	60fb      	str	r3, [r7, #12]
}
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <vTaskStartScheduler+0x9e>
}
 80053b0:	bf00      	nop
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	080065fc 	.word	0x080065fc
 80053bc:	08005969 	.word	0x08005969
 80053c0:	200005bc 	.word	0x200005bc
 80053c4:	200005b8 	.word	0x200005b8
 80053c8:	200005a4 	.word	0x200005a4
 80053cc:	2000059c 	.word	0x2000059c

080053d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80053d4:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <vTaskSuspendAll+0x18>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	4a03      	ldr	r2, [pc, #12]	; (80053e8 <vTaskSuspendAll+0x18>)
 80053dc:	6013      	str	r3, [r2, #0]
}
 80053de:	bf00      	nop
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	200005c0 	.word	0x200005c0

080053ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053fa:	4b41      	ldr	r3, [pc, #260]	; (8005500 <xTaskResumeAll+0x114>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <xTaskResumeAll+0x2c>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	603b      	str	r3, [r7, #0]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005418:	f000 fd78 	bl	8005f0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800541c:	4b38      	ldr	r3, [pc, #224]	; (8005500 <xTaskResumeAll+0x114>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3b01      	subs	r3, #1
 8005422:	4a37      	ldr	r2, [pc, #220]	; (8005500 <xTaskResumeAll+0x114>)
 8005424:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005426:	4b36      	ldr	r3, [pc, #216]	; (8005500 <xTaskResumeAll+0x114>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d161      	bne.n	80054f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800542e:	4b35      	ldr	r3, [pc, #212]	; (8005504 <xTaskResumeAll+0x118>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d05d      	beq.n	80054f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005436:	e02e      	b.n	8005496 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005438:	4b33      	ldr	r3, [pc, #204]	; (8005508 <xTaskResumeAll+0x11c>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3318      	adds	r3, #24
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff f92f 	bl	80046a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3304      	adds	r3, #4
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff f92a 	bl	80046a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	2201      	movs	r2, #1
 800545a:	409a      	lsls	r2, r3
 800545c:	4b2b      	ldr	r3, [pc, #172]	; (800550c <xTaskResumeAll+0x120>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4313      	orrs	r3, r2
 8005462:	4a2a      	ldr	r2, [pc, #168]	; (800550c <xTaskResumeAll+0x120>)
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4a27      	ldr	r2, [pc, #156]	; (8005510 <xTaskResumeAll+0x124>)
 8005474:	441a      	add	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3304      	adds	r3, #4
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f7ff f8b8 	bl	80045f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005486:	4b23      	ldr	r3, [pc, #140]	; (8005514 <xTaskResumeAll+0x128>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	429a      	cmp	r2, r3
 800548e:	d302      	bcc.n	8005496 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005490:	4b21      	ldr	r3, [pc, #132]	; (8005518 <xTaskResumeAll+0x12c>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005496:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <xTaskResumeAll+0x11c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1cc      	bne.n	8005438 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054a4:	f000 fb16 	bl	8005ad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80054a8:	4b1c      	ldr	r3, [pc, #112]	; (800551c <xTaskResumeAll+0x130>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d010      	beq.n	80054d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054b4:	f000 f836 	bl	8005524 <xTaskIncrementTick>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80054be:	4b16      	ldr	r3, [pc, #88]	; (8005518 <xTaskResumeAll+0x12c>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f1      	bne.n	80054b4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80054d0:	4b12      	ldr	r3, [pc, #72]	; (800551c <xTaskResumeAll+0x130>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <xTaskResumeAll+0x12c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054de:	2301      	movs	r3, #1
 80054e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054e2:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <xTaskResumeAll+0x134>)
 80054e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054f2:	f000 fd3b 	bl	8005f6c <vPortExitCritical>

	return xAlreadyYielded;
 80054f6:	68bb      	ldr	r3, [r7, #8]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	200005c0 	.word	0x200005c0
 8005504:	20000598 	.word	0x20000598
 8005508:	20000558 	.word	0x20000558
 800550c:	200005a0 	.word	0x200005a0
 8005510:	2000049c 	.word	0x2000049c
 8005514:	20000498 	.word	0x20000498
 8005518:	200005ac 	.word	0x200005ac
 800551c:	200005a8 	.word	0x200005a8
 8005520:	e000ed04 	.word	0xe000ed04

08005524 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800552e:	4b51      	ldr	r3, [pc, #324]	; (8005674 <xTaskIncrementTick+0x150>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f040 808d 	bne.w	8005652 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005538:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <xTaskIncrementTick+0x154>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005540:	4a4d      	ldr	r2, [pc, #308]	; (8005678 <xTaskIncrementTick+0x154>)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d120      	bne.n	800558e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800554c:	4b4b      	ldr	r3, [pc, #300]	; (800567c <xTaskIncrementTick+0x158>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <xTaskIncrementTick+0x48>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	603b      	str	r3, [r7, #0]
}
 8005568:	bf00      	nop
 800556a:	e7fe      	b.n	800556a <xTaskIncrementTick+0x46>
 800556c:	4b43      	ldr	r3, [pc, #268]	; (800567c <xTaskIncrementTick+0x158>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	4b43      	ldr	r3, [pc, #268]	; (8005680 <xTaskIncrementTick+0x15c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a41      	ldr	r2, [pc, #260]	; (800567c <xTaskIncrementTick+0x158>)
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	4a41      	ldr	r2, [pc, #260]	; (8005680 <xTaskIncrementTick+0x15c>)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	4b40      	ldr	r3, [pc, #256]	; (8005684 <xTaskIncrementTick+0x160>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3301      	adds	r3, #1
 8005586:	4a3f      	ldr	r2, [pc, #252]	; (8005684 <xTaskIncrementTick+0x160>)
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	f000 faa3 	bl	8005ad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800558e:	4b3e      	ldr	r3, [pc, #248]	; (8005688 <xTaskIncrementTick+0x164>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	429a      	cmp	r2, r3
 8005596:	d34d      	bcc.n	8005634 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005598:	4b38      	ldr	r3, [pc, #224]	; (800567c <xTaskIncrementTick+0x158>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <xTaskIncrementTick+0x82>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <xTaskIncrementTick+0x84>
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ac:	4b36      	ldr	r3, [pc, #216]	; (8005688 <xTaskIncrementTick+0x164>)
 80055ae:	f04f 32ff 	mov.w	r2, #4294967295
 80055b2:	601a      	str	r2, [r3, #0]
					break;
 80055b4:	e03e      	b.n	8005634 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055b6:	4b31      	ldr	r3, [pc, #196]	; (800567c <xTaskIncrementTick+0x158>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d203      	bcs.n	80055d6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055ce:	4a2e      	ldr	r2, [pc, #184]	; (8005688 <xTaskIncrementTick+0x164>)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6013      	str	r3, [r2, #0]
						break;
 80055d4:	e02e      	b.n	8005634 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	3304      	adds	r3, #4
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff f864 	bl	80046a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	3318      	adds	r3, #24
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff f85b 	bl	80046a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	2201      	movs	r2, #1
 80055f8:	409a      	lsls	r2, r3
 80055fa:	4b24      	ldr	r3, [pc, #144]	; (800568c <xTaskIncrementTick+0x168>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4313      	orrs	r3, r2
 8005600:	4a22      	ldr	r2, [pc, #136]	; (800568c <xTaskIncrementTick+0x168>)
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <xTaskIncrementTick+0x16c>)
 8005612:	441a      	add	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f7fe ffe9 	bl	80045f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005624:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <xTaskIncrementTick+0x170>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	429a      	cmp	r2, r3
 800562c:	d3b4      	bcc.n	8005598 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800562e:	2301      	movs	r3, #1
 8005630:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005632:	e7b1      	b.n	8005598 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005634:	4b17      	ldr	r3, [pc, #92]	; (8005694 <xTaskIncrementTick+0x170>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563a:	4915      	ldr	r1, [pc, #84]	; (8005690 <xTaskIncrementTick+0x16c>)
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d907      	bls.n	800565c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800564c:	2301      	movs	r3, #1
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	e004      	b.n	800565c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005652:	4b11      	ldr	r3, [pc, #68]	; (8005698 <xTaskIncrementTick+0x174>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	4a0f      	ldr	r2, [pc, #60]	; (8005698 <xTaskIncrementTick+0x174>)
 800565a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800565c:	4b0f      	ldr	r3, [pc, #60]	; (800569c <xTaskIncrementTick+0x178>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005664:	2301      	movs	r3, #1
 8005666:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005668:	697b      	ldr	r3, [r7, #20]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	200005c0 	.word	0x200005c0
 8005678:	2000059c 	.word	0x2000059c
 800567c:	20000550 	.word	0x20000550
 8005680:	20000554 	.word	0x20000554
 8005684:	200005b0 	.word	0x200005b0
 8005688:	200005b8 	.word	0x200005b8
 800568c:	200005a0 	.word	0x200005a0
 8005690:	2000049c 	.word	0x2000049c
 8005694:	20000498 	.word	0x20000498
 8005698:	200005a8 	.word	0x200005a8
 800569c:	200005ac 	.word	0x200005ac

080056a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056a6:	4b26      	ldr	r3, [pc, #152]	; (8005740 <vTaskSwitchContext+0xa0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056ae:	4b25      	ldr	r3, [pc, #148]	; (8005744 <vTaskSwitchContext+0xa4>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056b4:	e03f      	b.n	8005736 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80056b6:	4b23      	ldr	r3, [pc, #140]	; (8005744 <vTaskSwitchContext+0xa4>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80056bc:	4b22      	ldr	r3, [pc, #136]	; (8005748 <vTaskSwitchContext+0xa8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	fab3 f383 	clz	r3, r3
 80056c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056ca:	7afb      	ldrb	r3, [r7, #11]
 80056cc:	f1c3 031f 	rsb	r3, r3, #31
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	491e      	ldr	r1, [pc, #120]	; (800574c <vTaskSwitchContext+0xac>)
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	607b      	str	r3, [r7, #4]
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <vTaskSwitchContext+0x5a>
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4a11      	ldr	r2, [pc, #68]	; (800574c <vTaskSwitchContext+0xac>)
 8005708:	4413      	add	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	605a      	str	r2, [r3, #4]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3308      	adds	r3, #8
 800571e:	429a      	cmp	r2, r3
 8005720:	d104      	bne.n	800572c <vTaskSwitchContext+0x8c>
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	4a07      	ldr	r2, [pc, #28]	; (8005750 <vTaskSwitchContext+0xb0>)
 8005734:	6013      	str	r3, [r2, #0]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr
 8005740:	200005c0 	.word	0x200005c0
 8005744:	200005ac 	.word	0x200005ac
 8005748:	200005a0 	.word	0x200005a0
 800574c:	2000049c 	.word	0x2000049c
 8005750:	20000498 	.word	0x20000498

08005754 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	60fb      	str	r3, [r7, #12]
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <vTaskPlaceOnEventList+0x44>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3318      	adds	r3, #24
 8005780:	4619      	mov	r1, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fe ff58 	bl	8004638 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005788:	2101      	movs	r1, #1
 800578a:	6838      	ldr	r0, [r7, #0]
 800578c:	f000 fa6a 	bl	8005c64 <prvAddCurrentTaskToDelayedList>
}
 8005790:	bf00      	nop
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000498 	.word	0x20000498

0800579c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	60fb      	str	r3, [r7, #12]
}
 80057c4:	bf00      	nop
 80057c6:	e7fe      	b.n	80057c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	3318      	adds	r3, #24
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fe ff6b 	bl	80046a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d2:	4b1d      	ldr	r3, [pc, #116]	; (8005848 <xTaskRemoveFromEventList+0xac>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d11c      	bne.n	8005814 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	3304      	adds	r3, #4
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fe ff62 	bl	80046a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	2201      	movs	r2, #1
 80057ea:	409a      	lsls	r2, r3
 80057ec:	4b17      	ldr	r3, [pc, #92]	; (800584c <xTaskRemoveFromEventList+0xb0>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	4a16      	ldr	r2, [pc, #88]	; (800584c <xTaskRemoveFromEventList+0xb0>)
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4a13      	ldr	r2, [pc, #76]	; (8005850 <xTaskRemoveFromEventList+0xb4>)
 8005804:	441a      	add	r2, r3
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	3304      	adds	r3, #4
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f7fe fef0 	bl	80045f2 <vListInsertEnd>
 8005812:	e005      	b.n	8005820 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	3318      	adds	r3, #24
 8005818:	4619      	mov	r1, r3
 800581a:	480e      	ldr	r0, [pc, #56]	; (8005854 <xTaskRemoveFromEventList+0xb8>)
 800581c:	f7fe fee9 	bl	80045f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <xTaskRemoveFromEventList+0xbc>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	429a      	cmp	r2, r3
 800582c:	d905      	bls.n	800583a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800582e:	2301      	movs	r3, #1
 8005830:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005832:	4b0a      	ldr	r3, [pc, #40]	; (800585c <xTaskRemoveFromEventList+0xc0>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e001      	b.n	800583e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800583e:	697b      	ldr	r3, [r7, #20]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	200005c0 	.word	0x200005c0
 800584c:	200005a0 	.word	0x200005a0
 8005850:	2000049c 	.word	0x2000049c
 8005854:	20000558 	.word	0x20000558
 8005858:	20000498 	.word	0x20000498
 800585c:	200005ac 	.word	0x200005ac

08005860 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005868:	4b06      	ldr	r3, [pc, #24]	; (8005884 <vTaskInternalSetTimeOutState+0x24>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <vTaskInternalSetTimeOutState+0x28>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	605a      	str	r2, [r3, #4]
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	200005b0 	.word	0x200005b0
 8005888:	2000059c 	.word	0x2000059c

0800588c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	613b      	str	r3, [r7, #16]
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	60fb      	str	r3, [r7, #12]
}
 80058ca:	bf00      	nop
 80058cc:	e7fe      	b.n	80058cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058ce:	f000 fb1d 	bl	8005f0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <xTaskCheckForTimeOut+0xbc>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d102      	bne.n	80058f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e023      	b.n	800593a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b15      	ldr	r3, [pc, #84]	; (800594c <xTaskCheckForTimeOut+0xc0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d007      	beq.n	800590e <xTaskCheckForTimeOut+0x82>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	e015      	b.n	800593a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	429a      	cmp	r2, r3
 8005916:	d20b      	bcs.n	8005930 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	1ad2      	subs	r2, r2, r3
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff ff9b 	bl	8005860 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800592a:	2300      	movs	r3, #0
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	e004      	b.n	800593a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005936:	2301      	movs	r3, #1
 8005938:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800593a:	f000 fb17 	bl	8005f6c <vPortExitCritical>

	return xReturn;
 800593e:	69fb      	ldr	r3, [r7, #28]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	2000059c 	.word	0x2000059c
 800594c:	200005b0 	.word	0x200005b0

08005950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005954:	4b03      	ldr	r3, [pc, #12]	; (8005964 <vTaskMissedYield+0x14>)
 8005956:	2201      	movs	r2, #1
 8005958:	601a      	str	r2, [r3, #0]
}
 800595a:	bf00      	nop
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	200005ac 	.word	0x200005ac

08005968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005970:	f000 f852 	bl	8005a18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005974:	4b06      	ldr	r3, [pc, #24]	; (8005990 <prvIdleTask+0x28>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d9f9      	bls.n	8005970 <prvIdleTask+0x8>
			{
				taskYIELD();
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <prvIdleTask+0x2c>)
 800597e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800598c:	e7f0      	b.n	8005970 <prvIdleTask+0x8>
 800598e:	bf00      	nop
 8005990:	2000049c 	.word	0x2000049c
 8005994:	e000ed04 	.word	0xe000ed04

08005998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800599e:	2300      	movs	r3, #0
 80059a0:	607b      	str	r3, [r7, #4]
 80059a2:	e00c      	b.n	80059be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4a12      	ldr	r2, [pc, #72]	; (80059f8 <prvInitialiseTaskLists+0x60>)
 80059b0:	4413      	add	r3, r2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fdf2 	bl	800459c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3301      	adds	r3, #1
 80059bc:	607b      	str	r3, [r7, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b06      	cmp	r3, #6
 80059c2:	d9ef      	bls.n	80059a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059c4:	480d      	ldr	r0, [pc, #52]	; (80059fc <prvInitialiseTaskLists+0x64>)
 80059c6:	f7fe fde9 	bl	800459c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059ca:	480d      	ldr	r0, [pc, #52]	; (8005a00 <prvInitialiseTaskLists+0x68>)
 80059cc:	f7fe fde6 	bl	800459c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059d0:	480c      	ldr	r0, [pc, #48]	; (8005a04 <prvInitialiseTaskLists+0x6c>)
 80059d2:	f7fe fde3 	bl	800459c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059d6:	480c      	ldr	r0, [pc, #48]	; (8005a08 <prvInitialiseTaskLists+0x70>)
 80059d8:	f7fe fde0 	bl	800459c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059dc:	480b      	ldr	r0, [pc, #44]	; (8005a0c <prvInitialiseTaskLists+0x74>)
 80059de:	f7fe fddd 	bl	800459c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059e2:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <prvInitialiseTaskLists+0x78>)
 80059e4:	4a05      	ldr	r2, [pc, #20]	; (80059fc <prvInitialiseTaskLists+0x64>)
 80059e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <prvInitialiseTaskLists+0x7c>)
 80059ea:	4a05      	ldr	r2, [pc, #20]	; (8005a00 <prvInitialiseTaskLists+0x68>)
 80059ec:	601a      	str	r2, [r3, #0]
}
 80059ee:	bf00      	nop
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	2000049c 	.word	0x2000049c
 80059fc:	20000528 	.word	0x20000528
 8005a00:	2000053c 	.word	0x2000053c
 8005a04:	20000558 	.word	0x20000558
 8005a08:	2000056c 	.word	0x2000056c
 8005a0c:	20000584 	.word	0x20000584
 8005a10:	20000550 	.word	0x20000550
 8005a14:	20000554 	.word	0x20000554

08005a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a1e:	e019      	b.n	8005a54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a20:	f000 fa74 	bl	8005f0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a24:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <prvCheckTasksWaitingTermination+0x50>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fe fe39 	bl	80046a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <prvCheckTasksWaitingTermination+0x54>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	4a0b      	ldr	r2, [pc, #44]	; (8005a6c <prvCheckTasksWaitingTermination+0x54>)
 8005a3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <prvCheckTasksWaitingTermination+0x58>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <prvCheckTasksWaitingTermination+0x58>)
 8005a48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a4a:	f000 fa8f 	bl	8005f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f810 	bl	8005a74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a54:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <prvCheckTasksWaitingTermination+0x58>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e1      	bne.n	8005a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	2000056c 	.word	0x2000056c
 8005a6c:	20000598 	.word	0x20000598
 8005a70:	20000580 	.word	0x20000580

08005a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d108      	bne.n	8005a98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fc02 	bl	8006294 <vPortFree>
				vPortFree( pxTCB );
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fbff 	bl	8006294 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a96:	e018      	b.n	8005aca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d103      	bne.n	8005aaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fbf6 	bl	8006294 <vPortFree>
	}
 8005aa8:	e00f      	b.n	8005aca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d00a      	beq.n	8005aca <prvDeleteTCB+0x56>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	60fb      	str	r3, [r7, #12]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <prvDeleteTCB+0x54>
	}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ada:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <prvResetNextTaskUnblockTime+0x40>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <prvResetNextTaskUnblockTime+0x14>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <prvResetNextTaskUnblockTime+0x16>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d004      	beq.n	8005af8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005aee:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <prvResetNextTaskUnblockTime+0x44>)
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295
 8005af4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005af6:	e008      	b.n	8005b0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <prvResetNextTaskUnblockTime+0x40>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <prvResetNextTaskUnblockTime+0x44>)
 8005b08:	6013      	str	r3, [r2, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr
 8005b14:	20000550 	.word	0x20000550
 8005b18:	200005b8 	.word	0x200005b8

08005b1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b22:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <xTaskGetSchedulerState+0x34>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d102      	bne.n	8005b30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	607b      	str	r3, [r7, #4]
 8005b2e:	e008      	b.n	8005b42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b30:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <xTaskGetSchedulerState+0x38>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d102      	bne.n	8005b3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b38:	2302      	movs	r3, #2
 8005b3a:	607b      	str	r3, [r7, #4]
 8005b3c:	e001      	b.n	8005b42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b42:	687b      	ldr	r3, [r7, #4]
	}
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	200005a4 	.word	0x200005a4
 8005b54:	200005c0 	.word	0x200005c0

08005b58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d06e      	beq.n	8005c4c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b6e:	4b3a      	ldr	r3, [pc, #232]	; (8005c58 <xTaskPriorityDisinherit+0x100>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d00a      	beq.n	8005b8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	60fb      	str	r3, [r7, #12]
}
 8005b8a:	bf00      	nop
 8005b8c:	e7fe      	b.n	8005b8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	60bb      	str	r3, [r7, #8]
}
 8005ba8:	bf00      	nop
 8005baa:	e7fe      	b.n	8005baa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb0:	1e5a      	subs	r2, r3, #1
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d044      	beq.n	8005c4c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d140      	bne.n	8005c4c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe fd6a 	bl	80046a8 <uxListRemove>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d115      	bne.n	8005c06 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bde:	491f      	ldr	r1, [pc, #124]	; (8005c5c <xTaskPriorityDisinherit+0x104>)
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <xTaskPriorityDisinherit+0xae>
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	43da      	mvns	r2, r3
 8005bfc:	4b18      	ldr	r3, [pc, #96]	; (8005c60 <xTaskPriorityDisinherit+0x108>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4013      	ands	r3, r2
 8005c02:	4a17      	ldr	r2, [pc, #92]	; (8005c60 <xTaskPriorityDisinherit+0x108>)
 8005c04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c12:	f1c3 0207 	rsb	r2, r3, #7
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	2201      	movs	r2, #1
 8005c20:	409a      	lsls	r2, r3
 8005c22:	4b0f      	ldr	r3, [pc, #60]	; (8005c60 <xTaskPriorityDisinherit+0x108>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	4a0d      	ldr	r2, [pc, #52]	; (8005c60 <xTaskPriorityDisinherit+0x108>)
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4a08      	ldr	r2, [pc, #32]	; (8005c5c <xTaskPriorityDisinherit+0x104>)
 8005c3a:	441a      	add	r2, r3
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f7fe fcd5 	bl	80045f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c4c:	697b      	ldr	r3, [r7, #20]
	}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000498 	.word	0x20000498
 8005c5c:	2000049c 	.word	0x2000049c
 8005c60:	200005a0 	.word	0x200005a0

08005c64 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c6e:	4b29      	ldr	r3, [pc, #164]	; (8005d14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c74:	4b28      	ldr	r3, [pc, #160]	; (8005d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fd14 	bl	80046a8 <uxListRemove>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10b      	bne.n	8005c9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005c86:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	43da      	mvns	r2, r3
 8005c94:	4b21      	ldr	r3, [pc, #132]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	4a20      	ldr	r2, [pc, #128]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d10a      	bne.n	8005cbc <prvAddCurrentTaskToDelayedList+0x58>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d007      	beq.n	8005cbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cac:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	481a      	ldr	r0, [pc, #104]	; (8005d20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005cb6:	f7fe fc9c 	bl	80045f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cba:	e026      	b.n	8005d0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cc4:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d209      	bcs.n	8005ce8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cd4:	4b13      	ldr	r3, [pc, #76]	; (8005d24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f7fe fca9 	bl	8004638 <vListInsert>
}
 8005ce6:	e010      	b.n	8005d0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	f7fe fc9f 	bl	8004638 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cfa:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d202      	bcs.n	8005d0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d04:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6013      	str	r3, [r2, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	2000059c 	.word	0x2000059c
 8005d18:	20000498 	.word	0x20000498
 8005d1c:	200005a0 	.word	0x200005a0
 8005d20:	20000584 	.word	0x20000584
 8005d24:	20000554 	.word	0x20000554
 8005d28:	20000550 	.word	0x20000550
 8005d2c:	200005b8 	.word	0x200005b8

08005d30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3b04      	subs	r3, #4
 8005d40:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3b04      	subs	r3, #4
 8005d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f023 0201 	bic.w	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d60:	4a08      	ldr	r2, [pc, #32]	; (8005d84 <pxPortInitialiseStack+0x54>)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3b14      	subs	r3, #20
 8005d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3b20      	subs	r3, #32
 8005d76:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d78:	68fb      	ldr	r3, [r7, #12]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr
 8005d84:	08005d89 	.word	0x08005d89

08005d88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d92:	4b12      	ldr	r3, [pc, #72]	; (8005ddc <prvTaskExitError+0x54>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d00a      	beq.n	8005db2 <prvTaskExitError+0x2a>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	60fb      	str	r3, [r7, #12]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <prvTaskExitError+0x28>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	60bb      	str	r3, [r7, #8]
}
 8005dc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dc6:	bf00      	nop
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0fc      	beq.n	8005dc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bc80      	pop	{r7}
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	2000000c 	.word	0x2000000c

08005de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <pxCurrentTCBConst2>)
 8005de2:	6819      	ldr	r1, [r3, #0]
 8005de4:	6808      	ldr	r0, [r1, #0]
 8005de6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005dea:	f380 8809 	msr	PSP, r0
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f04f 0000 	mov.w	r0, #0
 8005df6:	f380 8811 	msr	BASEPRI, r0
 8005dfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8005dfe:	4770      	bx	lr

08005e00 <pxCurrentTCBConst2>:
 8005e00:	20000498 	.word	0x20000498
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop

08005e08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005e08:	4806      	ldr	r0, [pc, #24]	; (8005e24 <prvPortStartFirstTask+0x1c>)
 8005e0a:	6800      	ldr	r0, [r0, #0]
 8005e0c:	6800      	ldr	r0, [r0, #0]
 8005e0e:	f380 8808 	msr	MSP, r0
 8005e12:	b662      	cpsie	i
 8005e14:	b661      	cpsie	f
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	df00      	svc	0
 8005e20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e22:	bf00      	nop
 8005e24:	e000ed08 	.word	0xe000ed08

08005e28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e2e:	4b32      	ldr	r3, [pc, #200]	; (8005ef8 <xPortStartScheduler+0xd0>)
 8005e30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	22ff      	movs	r2, #255	; 0xff
 8005e3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	4b2a      	ldr	r3, [pc, #168]	; (8005efc <xPortStartScheduler+0xd4>)
 8005e54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e56:	4b2a      	ldr	r3, [pc, #168]	; (8005f00 <xPortStartScheduler+0xd8>)
 8005e58:	2207      	movs	r2, #7
 8005e5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e5c:	e009      	b.n	8005e72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005e5e:	4b28      	ldr	r3, [pc, #160]	; (8005f00 <xPortStartScheduler+0xd8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	4a26      	ldr	r2, [pc, #152]	; (8005f00 <xPortStartScheduler+0xd8>)
 8005e66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7a:	2b80      	cmp	r3, #128	; 0x80
 8005e7c:	d0ef      	beq.n	8005e5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e7e:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <xPortStartScheduler+0xd8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1c3 0307 	rsb	r3, r3, #7
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d00a      	beq.n	8005ea0 <xPortStartScheduler+0x78>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	60bb      	str	r3, [r7, #8]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ea0:	4b17      	ldr	r3, [pc, #92]	; (8005f00 <xPortStartScheduler+0xd8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	4a16      	ldr	r2, [pc, #88]	; (8005f00 <xPortStartScheduler+0xd8>)
 8005ea8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005eaa:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <xPortStartScheduler+0xd8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eb2:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <xPortStartScheduler+0xd8>)
 8005eb4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ebe:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <xPortStartScheduler+0xdc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a10      	ldr	r2, [pc, #64]	; (8005f04 <xPortStartScheduler+0xdc>)
 8005ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ec8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005eca:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <xPortStartScheduler+0xdc>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <xPortStartScheduler+0xdc>)
 8005ed0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ed4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ed6:	f000 f8b9 	bl	800604c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005eda:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <xPortStartScheduler+0xe0>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ee0:	f7ff ff92 	bl	8005e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ee4:	f7ff fbdc 	bl	80056a0 <vTaskSwitchContext>
	prvTaskExitError();
 8005ee8:	f7ff ff4e 	bl	8005d88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	e000e400 	.word	0xe000e400
 8005efc:	200005c4 	.word	0x200005c4
 8005f00:	200005c8 	.word	0x200005c8
 8005f04:	e000ed20 	.word	0xe000ed20
 8005f08:	2000000c 	.word	0x2000000c

08005f0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	607b      	str	r3, [r7, #4]
}
 8005f24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f26:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <vPortEnterCritical+0x58>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	4a0d      	ldr	r2, [pc, #52]	; (8005f64 <vPortEnterCritical+0x58>)
 8005f2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f30:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <vPortEnterCritical+0x58>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d10f      	bne.n	8005f58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f38:	4b0b      	ldr	r3, [pc, #44]	; (8005f68 <vPortEnterCritical+0x5c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	603b      	str	r3, [r7, #0]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <vPortEnterCritical+0x4a>
	}
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	2000000c 	.word	0x2000000c
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f72:	4b11      	ldr	r3, [pc, #68]	; (8005fb8 <vPortExitCritical+0x4c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <vPortExitCritical+0x24>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	607b      	str	r3, [r7, #4]
}
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f90:	4b09      	ldr	r3, [pc, #36]	; (8005fb8 <vPortExitCritical+0x4c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <vPortExitCritical+0x4c>)
 8005f98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f9a:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <vPortExitCritical+0x4c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d105      	bne.n	8005fae <vPortExitCritical+0x42>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	f383 8811 	msr	BASEPRI, r3
}
 8005fac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bc80      	pop	{r7}
 8005fb6:	4770      	bx	lr
 8005fb8:	2000000c 	.word	0x2000000c
 8005fbc:	00000000 	.word	0x00000000

08005fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fc0:	f3ef 8009 	mrs	r0, PSP
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <pxCurrentTCBConst>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005fd0:	6010      	str	r0, [r2, #0]
 8005fd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005fd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005fda:	f380 8811 	msr	BASEPRI, r0
 8005fde:	f7ff fb5f 	bl	80056a0 <vTaskSwitchContext>
 8005fe2:	f04f 0000 	mov.w	r0, #0
 8005fe6:	f380 8811 	msr	BASEPRI, r0
 8005fea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005fee:	6819      	ldr	r1, [r3, #0]
 8005ff0:	6808      	ldr	r0, [r1, #0]
 8005ff2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ff6:	f380 8809 	msr	PSP, r0
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	4770      	bx	lr

08006000 <pxCurrentTCBConst>:
 8006000:	20000498 	.word	0x20000498
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop

08006008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	607b      	str	r3, [r7, #4]
}
 8006020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006022:	f7ff fa7f 	bl	8005524 <xTaskIncrementTick>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800602c:	4b06      	ldr	r3, [pc, #24]	; (8006048 <SysTick_Handler+0x40>)
 800602e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	2300      	movs	r3, #0
 8006036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	f383 8811 	msr	BASEPRI, r3
}
 800603e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <vPortSetupTimerInterrupt+0x30>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006056:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <vPortSetupTimerInterrupt+0x34>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800605c:	4b09      	ldr	r3, [pc, #36]	; (8006084 <vPortSetupTimerInterrupt+0x38>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a09      	ldr	r2, [pc, #36]	; (8006088 <vPortSetupTimerInterrupt+0x3c>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	099b      	lsrs	r3, r3, #6
 8006068:	4a08      	ldr	r2, [pc, #32]	; (800608c <vPortSetupTimerInterrupt+0x40>)
 800606a:	3b01      	subs	r3, #1
 800606c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800606e:	4b03      	ldr	r3, [pc, #12]	; (800607c <vPortSetupTimerInterrupt+0x30>)
 8006070:	2207      	movs	r2, #7
 8006072:	601a      	str	r2, [r3, #0]
}
 8006074:	bf00      	nop
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr
 800607c:	e000e010 	.word	0xe000e010
 8006080:	e000e018 	.word	0xe000e018
 8006084:	20000000 	.word	0x20000000
 8006088:	10624dd3 	.word	0x10624dd3
 800608c:	e000e014 	.word	0xe000e014

08006090 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006096:	f3ef 8305 	mrs	r3, IPSR
 800609a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b0f      	cmp	r3, #15
 80060a0:	d914      	bls.n	80060cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060a2:	4a16      	ldr	r2, [pc, #88]	; (80060fc <vPortValidateInterruptPriority+0x6c>)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060ac:	4b14      	ldr	r3, [pc, #80]	; (8006100 <vPortValidateInterruptPriority+0x70>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	7afa      	ldrb	r2, [r7, #11]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d20a      	bcs.n	80060cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	607b      	str	r3, [r7, #4]
}
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80060cc:	4b0d      	ldr	r3, [pc, #52]	; (8006104 <vPortValidateInterruptPriority+0x74>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <vPortValidateInterruptPriority+0x78>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d90a      	bls.n	80060f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	603b      	str	r3, [r7, #0]
}
 80060ee:	bf00      	nop
 80060f0:	e7fe      	b.n	80060f0 <vPortValidateInterruptPriority+0x60>
	}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr
 80060fc:	e000e3f0 	.word	0xe000e3f0
 8006100:	200005c4 	.word	0x200005c4
 8006104:	e000ed0c 	.word	0xe000ed0c
 8006108:	200005c8 	.word	0x200005c8

0800610c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08a      	sub	sp, #40	; 0x28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006114:	2300      	movs	r3, #0
 8006116:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006118:	f7ff f95a 	bl	80053d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800611c:	4b58      	ldr	r3, [pc, #352]	; (8006280 <pvPortMalloc+0x174>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006124:	f000 f910 	bl	8006348 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006128:	4b56      	ldr	r3, [pc, #344]	; (8006284 <pvPortMalloc+0x178>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4013      	ands	r3, r2
 8006130:	2b00      	cmp	r3, #0
 8006132:	f040 808e 	bne.w	8006252 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01d      	beq.n	8006178 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800613c:	2208      	movs	r2, #8
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4413      	add	r3, r2
 8006142:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	2b00      	cmp	r3, #0
 800614c:	d014      	beq.n	8006178 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f023 0307 	bic.w	r3, r3, #7
 8006154:	3308      	adds	r3, #8
 8006156:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <pvPortMalloc+0x6c>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	617b      	str	r3, [r7, #20]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d069      	beq.n	8006252 <pvPortMalloc+0x146>
 800617e:	4b42      	ldr	r3, [pc, #264]	; (8006288 <pvPortMalloc+0x17c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	429a      	cmp	r2, r3
 8006186:	d864      	bhi.n	8006252 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006188:	4b40      	ldr	r3, [pc, #256]	; (800628c <pvPortMalloc+0x180>)
 800618a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800618c:	4b3f      	ldr	r3, [pc, #252]	; (800628c <pvPortMalloc+0x180>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006192:	e004      	b.n	800619e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d903      	bls.n	80061b0 <pvPortMalloc+0xa4>
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1f1      	bne.n	8006194 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061b0:	4b33      	ldr	r3, [pc, #204]	; (8006280 <pvPortMalloc+0x174>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d04b      	beq.n	8006252 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2208      	movs	r2, #8
 80061c0:	4413      	add	r3, r2
 80061c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	1ad2      	subs	r2, r2, r3
 80061d4:	2308      	movs	r3, #8
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	429a      	cmp	r2, r3
 80061da:	d91f      	bls.n	800621c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4413      	add	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <pvPortMalloc+0xf8>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	613b      	str	r3, [r7, #16]
}
 8006200:	bf00      	nop
 8006202:	e7fe      	b.n	8006202 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	1ad2      	subs	r2, r2, r3
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006216:	69b8      	ldr	r0, [r7, #24]
 8006218:	f000 f8f8 	bl	800640c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800621c:	4b1a      	ldr	r3, [pc, #104]	; (8006288 <pvPortMalloc+0x17c>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	4a18      	ldr	r2, [pc, #96]	; (8006288 <pvPortMalloc+0x17c>)
 8006228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800622a:	4b17      	ldr	r3, [pc, #92]	; (8006288 <pvPortMalloc+0x17c>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b18      	ldr	r3, [pc, #96]	; (8006290 <pvPortMalloc+0x184>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d203      	bcs.n	800623e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006236:	4b14      	ldr	r3, [pc, #80]	; (8006288 <pvPortMalloc+0x17c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a15      	ldr	r2, [pc, #84]	; (8006290 <pvPortMalloc+0x184>)
 800623c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	4b10      	ldr	r3, [pc, #64]	; (8006284 <pvPortMalloc+0x178>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	431a      	orrs	r2, r3
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006252:	f7ff f8cb 	bl	80053ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <pvPortMalloc+0x16a>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	60fb      	str	r3, [r7, #12]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <pvPortMalloc+0x168>
	return pvReturn;
 8006276:	69fb      	ldr	r3, [r7, #28]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3728      	adds	r7, #40	; 0x28
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	200011d4 	.word	0x200011d4
 8006284:	200011e0 	.word	0x200011e0
 8006288:	200011d8 	.word	0x200011d8
 800628c:	200011cc 	.word	0x200011cc
 8006290:	200011dc 	.word	0x200011dc

08006294 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d048      	beq.n	8006338 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062a6:	2308      	movs	r3, #8
 80062a8:	425b      	negs	r3, r3
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4413      	add	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	4b21      	ldr	r3, [pc, #132]	; (8006340 <vPortFree+0xac>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4013      	ands	r3, r2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <vPortFree+0x44>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	60fb      	str	r3, [r7, #12]
}
 80062d4:	bf00      	nop
 80062d6:	e7fe      	b.n	80062d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <vPortFree+0x62>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60bb      	str	r3, [r7, #8]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	4b11      	ldr	r3, [pc, #68]	; (8006340 <vPortFree+0xac>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4013      	ands	r3, r2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d019      	beq.n	8006338 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d115      	bne.n	8006338 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <vPortFree+0xac>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	43db      	mvns	r3, r3
 8006316:	401a      	ands	r2, r3
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800631c:	f7ff f858 	bl	80053d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	4b07      	ldr	r3, [pc, #28]	; (8006344 <vPortFree+0xb0>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4413      	add	r3, r2
 800632a:	4a06      	ldr	r2, [pc, #24]	; (8006344 <vPortFree+0xb0>)
 800632c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800632e:	6938      	ldr	r0, [r7, #16]
 8006330:	f000 f86c 	bl	800640c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006334:	f7ff f85a 	bl	80053ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006338:	bf00      	nop
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	200011e0 	.word	0x200011e0
 8006344:	200011d8 	.word	0x200011d8

08006348 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800634e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006352:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006354:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <prvHeapInit+0xac>)
 8006356:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00c      	beq.n	800637c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3307      	adds	r3, #7
 8006366:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0307 	bic.w	r3, r3, #7
 800636e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	4a1f      	ldr	r2, [pc, #124]	; (80063f4 <prvHeapInit+0xac>)
 8006378:	4413      	add	r3, r2
 800637a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006380:	4a1d      	ldr	r2, [pc, #116]	; (80063f8 <prvHeapInit+0xb0>)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006386:	4b1c      	ldr	r3, [pc, #112]	; (80063f8 <prvHeapInit+0xb0>)
 8006388:	2200      	movs	r2, #0
 800638a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	4413      	add	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006394:	2208      	movs	r2, #8
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0307 	bic.w	r3, r3, #7
 80063a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4a15      	ldr	r2, [pc, #84]	; (80063fc <prvHeapInit+0xb4>)
 80063a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063aa:	4b14      	ldr	r3, [pc, #80]	; (80063fc <prvHeapInit+0xb4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2200      	movs	r2, #0
 80063b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063b2:	4b12      	ldr	r3, [pc, #72]	; (80063fc <prvHeapInit+0xb4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	1ad2      	subs	r2, r2, r3
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063c8:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <prvHeapInit+0xb4>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4a0a      	ldr	r2, [pc, #40]	; (8006400 <prvHeapInit+0xb8>)
 80063d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	4a09      	ldr	r2, [pc, #36]	; (8006404 <prvHeapInit+0xbc>)
 80063de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063e0:	4b09      	ldr	r3, [pc, #36]	; (8006408 <prvHeapInit+0xc0>)
 80063e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063e6:	601a      	str	r2, [r3, #0]
}
 80063e8:	bf00      	nop
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	200005cc 	.word	0x200005cc
 80063f8:	200011cc 	.word	0x200011cc
 80063fc:	200011d4 	.word	0x200011d4
 8006400:	200011dc 	.word	0x200011dc
 8006404:	200011d8 	.word	0x200011d8
 8006408:	200011e0 	.word	0x200011e0

0800640c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006414:	4b27      	ldr	r3, [pc, #156]	; (80064b4 <prvInsertBlockIntoFreeList+0xa8>)
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	e002      	b.n	8006420 <prvInsertBlockIntoFreeList+0x14>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	429a      	cmp	r2, r3
 8006428:	d8f7      	bhi.n	800641a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	4413      	add	r3, r2
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	429a      	cmp	r2, r3
 800643a:	d108      	bne.n	800644e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	441a      	add	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	441a      	add	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d118      	bne.n	8006494 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b14      	ldr	r3, [pc, #80]	; (80064b8 <prvInsertBlockIntoFreeList+0xac>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d00d      	beq.n	800648a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	441a      	add	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	e008      	b.n	800649c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800648a:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <prvInsertBlockIntoFreeList+0xac>)
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	e003      	b.n	800649c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d002      	beq.n	80064aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr
 80064b4:	200011cc 	.word	0x200011cc
 80064b8:	200011d4 	.word	0x200011d4

080064bc <__libc_init_array>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	2600      	movs	r6, #0
 80064c0:	4d0c      	ldr	r5, [pc, #48]	; (80064f4 <__libc_init_array+0x38>)
 80064c2:	4c0d      	ldr	r4, [pc, #52]	; (80064f8 <__libc_init_array+0x3c>)
 80064c4:	1b64      	subs	r4, r4, r5
 80064c6:	10a4      	asrs	r4, r4, #2
 80064c8:	42a6      	cmp	r6, r4
 80064ca:	d109      	bne.n	80064e0 <__libc_init_array+0x24>
 80064cc:	f000 f830 	bl	8006530 <_init>
 80064d0:	2600      	movs	r6, #0
 80064d2:	4d0a      	ldr	r5, [pc, #40]	; (80064fc <__libc_init_array+0x40>)
 80064d4:	4c0a      	ldr	r4, [pc, #40]	; (8006500 <__libc_init_array+0x44>)
 80064d6:	1b64      	subs	r4, r4, r5
 80064d8:	10a4      	asrs	r4, r4, #2
 80064da:	42a6      	cmp	r6, r4
 80064dc:	d105      	bne.n	80064ea <__libc_init_array+0x2e>
 80064de:	bd70      	pop	{r4, r5, r6, pc}
 80064e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e4:	4798      	blx	r3
 80064e6:	3601      	adds	r6, #1
 80064e8:	e7ee      	b.n	80064c8 <__libc_init_array+0xc>
 80064ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ee:	4798      	blx	r3
 80064f0:	3601      	adds	r6, #1
 80064f2:	e7f2      	b.n	80064da <__libc_init_array+0x1e>
 80064f4:	0800661c 	.word	0x0800661c
 80064f8:	0800661c 	.word	0x0800661c
 80064fc:	0800661c 	.word	0x0800661c
 8006500:	08006620 	.word	0x08006620

08006504 <memcpy>:
 8006504:	440a      	add	r2, r1
 8006506:	4291      	cmp	r1, r2
 8006508:	f100 33ff 	add.w	r3, r0, #4294967295
 800650c:	d100      	bne.n	8006510 <memcpy+0xc>
 800650e:	4770      	bx	lr
 8006510:	b510      	push	{r4, lr}
 8006512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006516:	4291      	cmp	r1, r2
 8006518:	f803 4f01 	strb.w	r4, [r3, #1]!
 800651c:	d1f9      	bne.n	8006512 <memcpy+0xe>
 800651e:	bd10      	pop	{r4, pc}

08006520 <memset>:
 8006520:	4603      	mov	r3, r0
 8006522:	4402      	add	r2, r0
 8006524:	4293      	cmp	r3, r2
 8006526:	d100      	bne.n	800652a <memset+0xa>
 8006528:	4770      	bx	lr
 800652a:	f803 1b01 	strb.w	r1, [r3], #1
 800652e:	e7f9      	b.n	8006524 <memset+0x4>

08006530 <_init>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr

0800653c <_fini>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr
