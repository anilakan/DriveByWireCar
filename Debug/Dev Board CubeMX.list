
Dev Board CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005080  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005210  08005210  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005210  08005210  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005210  08005210  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001174  20000010  08005228  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001184  08005228  00021184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d7d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f64  00000000  00000000  00031db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00034d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00035e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019629  00000000  00000000  00036ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123fc  00000000  00000000  000504d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f82  00000000  00000000  000628cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f984f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004748  00000000  00000000  000f98a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005178 	.word	0x08005178

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005178 	.word	0x08005178

08000150 <Error_Handler>:
#include "stm32f1xx_hal.h"
#include "cmsis_os.h"


static void Error_Handler(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000154:	b672      	cpsid	i
}
 8000156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000158:	e7fe      	b.n	8000158 <Error_Handler+0x8>
	...

0800015c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000162:	f107 0320 	add.w	r3, r7, #32
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800016c:	1d3b      	adds	r3, r7, #4
 800016e:	2200      	movs	r2, #0
 8000170:	601a      	str	r2, [r3, #0]
 8000172:	605a      	str	r2, [r3, #4]
 8000174:	609a      	str	r2, [r3, #8]
 8000176:	60da      	str	r2, [r3, #12]
 8000178:	611a      	str	r2, [r3, #16]
 800017a:	615a      	str	r2, [r3, #20]
 800017c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800017e:	4b28      	ldr	r3, [pc, #160]	; (8000220 <MX_TIM3_Init+0xc4>)
 8000180:	4a28      	ldr	r2, [pc, #160]	; (8000224 <MX_TIM3_Init+0xc8>)
 8000182:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8000184:	4b26      	ldr	r3, [pc, #152]	; (8000220 <MX_TIM3_Init+0xc4>)
 8000186:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800018a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800018c:	4b24      	ldr	r3, [pc, #144]	; (8000220 <MX_TIM3_Init+0xc4>)
 800018e:	2200      	movs	r2, #0
 8000190:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000192:	4b23      	ldr	r3, [pc, #140]	; (8000220 <MX_TIM3_Init+0xc4>)
 8000194:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000198:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800019a:	4b21      	ldr	r3, [pc, #132]	; (8000220 <MX_TIM3_Init+0xc4>)
 800019c:	2200      	movs	r2, #0
 800019e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80001a0:	4b1f      	ldr	r3, [pc, #124]	; (8000220 <MX_TIM3_Init+0xc4>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80001a6:	481e      	ldr	r0, [pc, #120]	; (8000220 <MX_TIM3_Init+0xc4>)
 80001a8:	f002 ff30 	bl	800300c <HAL_TIM_PWM_Init>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80001b2:	f7ff ffcd 	bl	8000150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80001b6:	2300      	movs	r3, #0
 80001b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80001ba:	2300      	movs	r3, #0
 80001bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80001be:	f107 0320 	add.w	r3, r7, #32
 80001c2:	4619      	mov	r1, r3
 80001c4:	4816      	ldr	r0, [pc, #88]	; (8000220 <MX_TIM3_Init+0xc4>)
 80001c6:	f003 fd65 	bl	8003c94 <HAL_TIMEx_MasterConfigSynchronization>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80001d0:	f7ff ffbe 	bl	8000150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80001d4:	2360      	movs	r3, #96	; 0x60
 80001d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80001d8:	2300      	movs	r3, #0
 80001da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2204      	movs	r2, #4
 80001e8:	4619      	mov	r1, r3
 80001ea:	480d      	ldr	r0, [pc, #52]	; (8000220 <MX_TIM3_Init+0xc4>)
 80001ec:	f003 f908 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80001f6:	f7ff ffab 	bl	8000150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	220c      	movs	r2, #12
 80001fe:	4619      	mov	r1, r3
 8000200:	4807      	ldr	r0, [pc, #28]	; (8000220 <MX_TIM3_Init+0xc4>)
 8000202:	f003 f8fd 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800020c:	f7ff ffa0 	bl	8000150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <MX_TIM3_Init+0xc4>)
 8000212:	f000 fceb 	bl	8000bec <HAL_TIM_MspPostInit>

}
 8000216:	bf00      	nop
 8000218:	3728      	adds	r7, #40	; 0x28
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	2000002c 	.word	0x2000002c
 8000224:	40000400 	.word	0x40000400

08000228 <blinkers_init>:


void blinkers_init(){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 800022c:	f7ff ff96 	bl	800015c <MX_TIM3_Init>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}

08000234 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4a06      	ldr	r2, [pc, #24]	; (800025c <vApplicationGetIdleTaskMemory+0x28>)
 8000244:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	4a05      	ldr	r2, [pc, #20]	; (8000260 <vApplicationGetIdleTaskMemory+0x2c>)
 800024a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2280      	movs	r2, #128	; 0x80
 8000250:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000252:	bf00      	nop
 8000254:	3714      	adds	r7, #20
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	20000074 	.word	0x20000074
 8000260:	200000c8 	.word	0x200000c8

08000264 <HAL_CAN_RxFifo1MsgPendingCallback>:
uint8_t RxData[8];
CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;
int datacheck = 0;

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData)!= HAL_OK){
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800026e:	4a0b      	ldr	r2, [pc, #44]	; (800029c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8000270:	2101      	movs	r1, #1
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f001 fb55 	bl	8001922 <HAL_CAN_GetRxMessage>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
		Error_Handler();
 800027e:	f000 fa9d 	bl	80007bc <Error_Handler>
	}
	if (RxHeader.DLC == 2)
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8000284:	691b      	ldr	r3, [r3, #16]
 8000286:	2b02      	cmp	r3, #2
 8000288:	d102      	bne.n	8000290 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>
	{
		datacheck = 1;
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 800028c:	2201      	movs	r2, #1
 800028e:	601a      	str	r2, [r3, #0]
	}
}
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000364 	.word	0x20000364
 800029c:	20000384 	.word	0x20000384
 80002a0:	200003a0 	.word	0x200003a0

080002a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80002ae:	4a09      	ldr	r2, [pc, #36]	; (80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80002b0:	2100      	movs	r1, #0
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f001 fb35 	bl	8001922 <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 2)
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80002ba:	691b      	ldr	r3, [r3, #16]
 80002bc:	2b02      	cmp	r3, #2
 80002be:	d102      	bne.n	80002c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		datacheck = 1;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
	}
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000364 	.word	0x20000364
 80002d4:	20000384 	.word	0x20000384
 80002d8:	200003a0 	.word	0x200003a0

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b5b0      	push	{r4, r5, r7, lr}
 80002de:	b08e      	sub	sp, #56	; 0x38
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 fdd5 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f845 	bl	8000374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f979 	bl	80005e0 <MX_GPIO_Init>
  MX_CAN_Init();
 80002ee:	f000 f90d 	bl	800050c <MX_CAN_Init>
  MX_ADC1_Init();
 80002f2:	f000 f88f 	bl	8000414 <MX_ADC1_Init>
  MX_ADC2_Init();
 80002f6:	f000 f8cb 	bl	8000490 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  blinkers_init();
 80002fa:	f7ff ff95 	bl	8000228 <blinkers_init>
  motor_init();
 80002fe:	f000 fa62 	bl	80007c6 <motor_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000302:	4b17      	ldr	r3, [pc, #92]	; (8000360 <main+0x84>)
 8000304:	f107 041c 	add.w	r4, r7, #28
 8000308:	461d      	mov	r5, r3
 800030a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000316:	f107 031c 	add.w	r3, r7, #28
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f003 fd47 	bl	8003db0 <osThreadCreate>
 8000322:	4603      	mov	r3, r0
 8000324:	4a0f      	ldr	r2, [pc, #60]	; (8000364 <main+0x88>)
 8000326:	6013      	str	r3, [r2, #0]

  /* definition and creation of mcuStatus */
  osThreadDef(mcuStatus, blink, osPriorityLow, 0, 128);
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <main+0x8c>)
 800032a:	463c      	mov	r4, r7
 800032c:	461d      	mov	r5, r3
 800032e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000332:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mcuStatusHandle = osThreadCreate(osThread(mcuStatus), NULL);
 800033a:	463b      	mov	r3, r7
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f003 fd36 	bl	8003db0 <osThreadCreate>
 8000344:	4603      	mov	r3, r0
 8000346:	4a09      	ldr	r2, [pc, #36]	; (800036c <main+0x90>)
 8000348:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800034a:	f003 fd2a 	bl	8003da2 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 800034e:	2104      	movs	r1, #4
 8000350:	4807      	ldr	r0, [pc, #28]	; (8000370 <main+0x94>)
 8000352:	f002 f8b3 	bl	80024bc <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000356:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800035a:	f000 fdcb 	bl	8000ef4 <HAL_Delay>
	  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 800035e:	e7f6      	b.n	800034e <main+0x72>
 8000360:	080051a8 	.word	0x080051a8
 8000364:	20000350 	.word	0x20000350
 8000368:	080051c4 	.word	0x080051c4
 800036c:	20000354 	.word	0x20000354
 8000370:	40010800 	.word	0x40010800

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b094      	sub	sp, #80	; 0x50
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037e:	2228      	movs	r2, #40	; 0x28
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f004 fef0 	bl	8005168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a4:	2301      	movs	r3, #1
 80003a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 f89a 	bl	80024f0 <HAL_RCC_OscConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x52>
  {
    Error_Handler();
 80003c2:	f000 f9fb 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c6:	230f      	movs	r3, #15
 80003c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80003ca:	2301      	movs	r3, #1
 80003cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 fb07 	bl	80029f4 <HAL_RCC_ClockConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80003ec:	f000 f9e6 	bl	80007bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003f0:	2302      	movs	r3, #2
 80003f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4618      	mov	r0, r3
 80003fc:	f002 fcae 	bl	8002d5c <HAL_RCCEx_PeriphCLKConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000406:	f000 f9d9 	bl	80007bc <Error_Handler>
  }
}
 800040a:	bf00      	nop
 800040c:	3750      	adds	r7, #80	; 0x50
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_ADC1_Init+0x74>)
 8000426:	4a19      	ldr	r2, [pc, #100]	; (800048c <MX_ADC1_Init+0x78>)
 8000428:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <MX_ADC1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MX_ADC1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <MX_ADC1_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800043c:	4b12      	ldr	r3, [pc, #72]	; (8000488 <MX_ADC1_Init+0x74>)
 800043e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000442:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000444:	4b10      	ldr	r3, [pc, #64]	; (8000488 <MX_ADC1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <MX_ADC1_Init+0x74>)
 800044c:	2201      	movs	r2, #1
 800044e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <MX_ADC1_Init+0x74>)
 8000452:	f000 fd73 	bl	8000f3c <HAL_ADC_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800045c:	f000 f9ae 	bl	80007bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000460:	2304      	movs	r3, #4
 8000462:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000464:	2301      	movs	r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	4619      	mov	r1, r3
 8000470:	4805      	ldr	r0, [pc, #20]	; (8000488 <MX_ADC1_Init+0x74>)
 8000472:	f000 fe3b 	bl	80010ec <HAL_ADC_ConfigChannel>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800047c:	f000 f99e 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	3710      	adds	r7, #16
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200002c8 	.word	0x200002c8
 800048c:	40012400 	.word	0x40012400

08000490 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_ADC2_Init+0x74>)
 80004a2:	4a19      	ldr	r2, [pc, #100]	; (8000508 <MX_ADC2_Init+0x78>)
 80004a4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <MX_ADC2_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <MX_ADC2_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_ADC2_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <MX_ADC2_Init+0x74>)
 80004ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004be:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <MX_ADC2_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_ADC2_Init+0x74>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004cc:	480d      	ldr	r0, [pc, #52]	; (8000504 <MX_ADC2_Init+0x74>)
 80004ce:	f000 fd35 	bl	8000f3c <HAL_ADC_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80004d8:	f000 f970 	bl	80007bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004dc:	2305      	movs	r3, #5
 80004de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e0:	2301      	movs	r3, #1
 80004e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	4619      	mov	r1, r3
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_ADC2_Init+0x74>)
 80004ee:	f000 fdfd 	bl	80010ec <HAL_ADC_ConfigChannel>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80004f8:	f000 f960 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	200002f8 	.word	0x200002f8
 8000508:	40012800 	.word	0x40012800

0800050c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000512:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <MX_CAN_Init+0xcc>)
 8000514:	4a31      	ldr	r2, [pc, #196]	; (80005dc <MX_CAN_Init+0xd0>)
 8000516:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000518:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <MX_CAN_Init+0xcc>)
 800051a:	2204      	movs	r2, #4
 800051c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800051e:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <MX_CAN_Init+0xcc>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000524:	4b2c      	ldr	r3, [pc, #176]	; (80005d8 <MX_CAN_Init+0xcc>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <MX_CAN_Init+0xcc>)
 800052c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000530:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000532:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <MX_CAN_Init+0xcc>)
 8000534:	2200      	movs	r2, #0
 8000536:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <MX_CAN_Init+0xcc>)
 800053a:	2200      	movs	r2, #0
 800053c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800053e:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <MX_CAN_Init+0xcc>)
 8000540:	2200      	movs	r2, #0
 8000542:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <MX_CAN_Init+0xcc>)
 8000546:	2201      	movs	r2, #1
 8000548:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800054a:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <MX_CAN_Init+0xcc>)
 800054c:	2200      	movs	r2, #0
 800054e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <MX_CAN_Init+0xcc>)
 8000552:	2200      	movs	r2, #0
 8000554:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <MX_CAN_Init+0xcc>)
 8000558:	2200      	movs	r2, #0
 800055a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800055c:	481e      	ldr	r0, [pc, #120]	; (80005d8 <MX_CAN_Init+0xcc>)
 800055e:	f000 fefe 	bl	800135e <HAL_CAN_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000568:	f000 f928 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800056c:	2301      	movs	r3, #1
 800056e:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x446<<5;
 8000578:	f648 03c0 	movw	r3, #35008	; 0x88c0
 800057c:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 8000582:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8000586:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800058c:	2301      	movs	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;  // doesn't matter in single can controllers
 8000594:	230e      	movs	r3, #14
 8000596:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig)!= HAL_OK){
 8000598:	463b      	mov	r3, r7
 800059a:	4619      	mov	r1, r3
 800059c:	480e      	ldr	r0, [pc, #56]	; (80005d8 <MX_CAN_Init+0xcc>)
 800059e:	f000 ffd9 	bl	8001554 <HAL_CAN_ConfigFilter>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_CAN_Init+0xa0>
		// Filter Config Error
		Error_Handler();
 80005a8:	f000 f908 	bl	80007bc <Error_Handler>
	}

	// Start CAN
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 80005ac:	480a      	ldr	r0, [pc, #40]	; (80005d8 <MX_CAN_Init+0xcc>)
 80005ae:	f001 f89a 	bl	80016e6 <HAL_CAN_Start>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_CAN_Init+0xb0>
	{
	  /* Start Error */
	  Error_Handler();
 80005b8:	f000 f900 	bl	80007bc <Error_Handler>
	}
	// Activate RX Notification
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK){
 80005bc:	2102      	movs	r1, #2
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_CAN_Init+0xcc>)
 80005c0:	f001 fac0 	bl	8001b44 <HAL_CAN_ActivateNotification>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_CAN_Init+0xc2>
		// Notification Error
		Error_Handler();
 80005ca:	f000 f8f7 	bl	80007bc <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	; 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000328 	.word	0x20000328
 80005dc:	40006400 	.word	0x40006400

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f4:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <MX_GPIO_Init+0xe8>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a33      	ldr	r2, [pc, #204]	; (80006c8 <MX_GPIO_Init+0xe8>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b31      	ldr	r3, [pc, #196]	; (80006c8 <MX_GPIO_Init+0xe8>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0310 	and.w	r3, r3, #16
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060c:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <MX_GPIO_Init+0xe8>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a2d      	ldr	r2, [pc, #180]	; (80006c8 <MX_GPIO_Init+0xe8>)
 8000612:	f043 0320 	orr.w	r3, r3, #32
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <MX_GPIO_Init+0xe8>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0320 	and.w	r3, r3, #32
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <MX_GPIO_Init+0xe8>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <MX_GPIO_Init+0xe8>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <MX_GPIO_Init+0xe8>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0304 	and.w	r3, r3, #4
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_GPIO_Init+0xe8>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <MX_GPIO_Init+0xe8>)
 8000642:	f043 0308 	orr.w	r3, r3, #8
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_GPIO_Init+0xe8>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_IND_GPIO_Port, MCU_IND_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2104      	movs	r1, #4
 8000658:	481c      	ldr	r0, [pc, #112]	; (80006cc <MX_GPIO_Init+0xec>)
 800065a:	f001 ff17 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN2_Pin|MOTOR_IN1_Pin|GPIO_1_Pin|GPIO_2_Pin
 800065e:	2200      	movs	r2, #0
 8000660:	f247 4104 	movw	r1, #29700	; 0x7404
 8000664:	481a      	ldr	r0, [pc, #104]	; (80006d0 <MX_GPIO_Init+0xf0>)
 8000666:	f001 ff11 	bl	800248c <HAL_GPIO_WritePin>
                          |GPIO_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800066a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4619      	mov	r1, r3
 800067e:	4815      	ldr	r0, [pc, #84]	; (80006d4 <MX_GPIO_Init+0xf4>)
 8000680:	f001 fd80 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_IND_Pin */
  GPIO_InitStruct.Pin = MCU_IND_Pin;
 8000684:	2304      	movs	r3, #4
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_IND_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	480c      	ldr	r0, [pc, #48]	; (80006cc <MX_GPIO_Init+0xec>)
 800069c:	f001 fd72 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN2_Pin MOTOR_IN1_Pin GPIO_1_Pin GPIO_2_Pin
                           GPIO_3_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN2_Pin|MOTOR_IN1_Pin|GPIO_1_Pin|GPIO_2_Pin
 80006a0:	f247 4304 	movw	r3, #29700	; 0x7404
 80006a4:	613b      	str	r3, [r7, #16]
                          |GPIO_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_GPIO_Init+0xf0>)
 80006ba:	f001 fd63 	bl	8002184 <HAL_GPIO_Init>

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	40011000 	.word	0x40011000

080006d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80006e0:	2064      	movs	r0, #100	; 0x64
 80006e2:	f003 fbb1 	bl	8003e48 <osDelay>
 80006e6:	e7fb      	b.n	80006e0 <StartDefaultTask+0x8>

080006e8 <blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink */
void blink(void const * argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink */
	HAL_GPIO_WritePin(MCU_IND_GPIO_Port,MCU_IND_Pin,GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2104      	movs	r1, #4
 80006f4:	4822      	ldr	r0, [pc, #136]	; (8000780 <blink+0x98>)
 80006f6:	f001 fec9 	bl	800248c <HAL_GPIO_WritePin>
	set_drive_speed(0);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 f8b6 	bl	800086c <set_drive_speed>
	int speed = 95;
 8000700:	235f      	movs	r3, #95	; 0x5f
 8000702:	60fb      	str	r3, [r7, #12]
	HAL_CAN_StateTypeDef state;
  /* Infinite loop */
  for(;;)
  {
	  if (datacheck){
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <blink+0x9c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d006      	beq.n	800071a <blink+0x32>
		  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 800070c:	2104      	movs	r1, #4
 800070e:	481c      	ldr	r0, [pc, #112]	; (8000780 <blink+0x98>)
 8000710:	f001 fed4 	bl	80024bc <HAL_GPIO_TogglePin>
		  datacheck = 0;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <blink+0x9c>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
	  }
	  TxHeader.DLC = 2;
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <blink+0xa0>)
 800071c:	2202      	movs	r2, #2
 800071e:	611a      	str	r2, [r3, #16]
	  TxHeader.IDE = CAN_ID_STD;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <blink+0xa0>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
	  TxHeader.RTR = CAN_RTR_DATA;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <blink+0xa0>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
	  TxHeader.StdId = 0x446;
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <blink+0xa0>)
 800072e:	f240 4246 	movw	r2, #1094	; 0x446
 8000732:	601a      	str	r2, [r3, #0]
	  TxData[0] = 0x12;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <blink+0xa4>)
 8000736:	2212      	movs	r2, #18
 8000738:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 0x34;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <blink+0xa4>)
 800073c:	2234      	movs	r2, #52	; 0x34
 800073e:	705a      	strb	r2, [r3, #1]
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <blink+0xa8>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <blink+0xa4>)
 8000744:	4910      	ldr	r1, [pc, #64]	; (8000788 <blink+0xa0>)
 8000746:	4813      	ldr	r0, [pc, #76]	; (8000794 <blink+0xac>)
 8000748:	f001 f811 	bl	800176e <HAL_CAN_AddTxMessage>
	  set_drive_speed(speed);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f88c 	bl	800086c <set_drive_speed>
	  if (speed == 95){
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2b5f      	cmp	r3, #95	; 0x5f
 8000758:	d102      	bne.n	8000760 <blink+0x78>
		  speed = 93;
 800075a:	235d      	movs	r3, #93	; 0x5d
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	e00a      	b.n	8000776 <blink+0x8e>
	  }
	  else if (speed == 93){
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b5d      	cmp	r3, #93	; 0x5d
 8000764:	d102      	bne.n	800076c <blink+0x84>
		  speed = 90;
 8000766:	235a      	movs	r3, #90	; 0x5a
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	e004      	b.n	8000776 <blink+0x8e>
	  }
	  else if (speed == 90){
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b5a      	cmp	r3, #90	; 0x5a
 8000770:	d101      	bne.n	8000776 <blink+0x8e>
		  speed = 95;
 8000772:	235f      	movs	r3, #95	; 0x5f
 8000774:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1000);
 8000776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077a:	f003 fb65 	bl	8003e48 <osDelay>
	  if (datacheck){
 800077e:	e7c1      	b.n	8000704 <blink+0x1c>
 8000780:	40010800 	.word	0x40010800
 8000784:	200003a0 	.word	0x200003a0
 8000788:	2000036c 	.word	0x2000036c
 800078c:	2000035c 	.word	0x2000035c
 8000790:	20000358 	.word	0x20000358
 8000794:	20000328 	.word	0x20000328

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007aa:	f000 fb87 	bl	8000ebc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40012c00 	.word	0x40012c00

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>

080007c6 <motor_init>:

TIM_HandleTypeDef htim2;
static void MX_TIM2_Init(void);
static void Error_Handler(void);

void motor_init(){
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 80007ca:	f000 f85d 	bl	8000888 <MX_TIM2_Init>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <set_motor_direction>:



// Sets the direction of the motor
void set_motor_direction(motor_direction direction){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	// Mosfet logic means output is filled (set => low output, reset => high output)
	switch(direction){
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d01e      	beq.n	8000822 <set_motor_direction+0x4e>
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	dc28      	bgt.n	800083a <set_motor_direction+0x66>
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d002      	beq.n	80007f2 <set_motor_direction+0x1e>
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d00c      	beq.n	800080a <set_motor_direction+0x36>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
			break;
		default:
			(void)direction;
	}
}
 80007f0:	e023      	b.n	800083a <set_motor_direction+0x66>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2104      	movs	r1, #4
 80007f6:	4813      	ldr	r0, [pc, #76]	; (8000844 <set_motor_direction+0x70>)
 80007f8:	f001 fe48 	bl	800248c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000802:	4810      	ldr	r0, [pc, #64]	; (8000844 <set_motor_direction+0x70>)
 8000804:	f001 fe42 	bl	800248c <HAL_GPIO_WritePin>
			break;
 8000808:	e017      	b.n	800083a <set_motor_direction+0x66>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2104      	movs	r1, #4
 800080e:	480d      	ldr	r0, [pc, #52]	; (8000844 <set_motor_direction+0x70>)
 8000810:	f001 fe3c 	bl	800248c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081a:	480a      	ldr	r0, [pc, #40]	; (8000844 <set_motor_direction+0x70>)
 800081c:	f001 fe36 	bl	800248c <HAL_GPIO_WritePin>
			break;
 8000820:	e00b      	b.n	800083a <set_motor_direction+0x66>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4807      	ldr	r0, [pc, #28]	; (8000844 <set_motor_direction+0x70>)
 8000828:	f001 fe30 	bl	800248c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <set_motor_direction+0x70>)
 8000834:	f001 fe2a 	bl	800248c <HAL_GPIO_WritePin>
			break;
 8000838:	bf00      	nop
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010c00 	.word	0x40010c00

08000848 <set_motor_speed>:

// Set Speed of the motor
void set_motor_speed(uint32_t percent_speed){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	// Motor speed PWM 50 Hz 100 Ticks at 5000 Hz
	TIM2->CCR4 = percent_speed;
 8000850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000858:	210c      	movs	r1, #12
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <set_motor_speed+0x20>)
 800085c:	f002 fc26 	bl	80030ac <HAL_TIM_PWM_Start>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200003a4 	.word	0x200003a4

0800086c <set_drive_speed>:

// Set Speed of motor in forward direction
void set_drive_speed(uint32_t percent_speed){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	set_motor_direction(FORWARD);
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff ffad 	bl	80007d4 <set_motor_direction>
	set_motor_speed(percent_speed);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ffe4 	bl	8000848 <set_motor_speed>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	; 0x38
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b8:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <MX_TIM2_Init+0xe8>)
 80008ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 80008c0:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <MX_TIM2_Init+0xe8>)
 80008c2:	f240 623f 	movw	r2, #1599	; 0x63f
 80008c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <MX_TIM2_Init+0xe8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80008ce:	4b28      	ldr	r3, [pc, #160]	; (8000970 <MX_TIM2_Init+0xe8>)
 80008d0:	2263      	movs	r2, #99	; 0x63
 80008d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <MX_TIM2_Init+0xe8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b25      	ldr	r3, [pc, #148]	; (8000970 <MX_TIM2_Init+0xe8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e0:	4823      	ldr	r0, [pc, #140]	; (8000970 <MX_TIM2_Init+0xe8>)
 80008e2:	f002 faf1 	bl	8002ec8 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008ec:	f000 f842 	bl	8000974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fa:	4619      	mov	r1, r3
 80008fc:	481c      	ldr	r0, [pc, #112]	; (8000970 <MX_TIM2_Init+0xe8>)
 80008fe:	f002 fe3d 	bl	800357c <HAL_TIM_ConfigClockSource>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000908:	f000 f834 	bl	8000974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800090c:	4818      	ldr	r0, [pc, #96]	; (8000970 <MX_TIM2_Init+0xe8>)
 800090e:	f002 fb7d 	bl	800300c <HAL_TIM_PWM_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000918:	f000 f82c 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000924:	f107 0320 	add.w	r3, r7, #32
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_TIM2_Init+0xe8>)
 800092c:	f003 f9b2 	bl	8003c94 <HAL_TIMEx_MasterConfigSynchronization>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000936:	f000 f81d 	bl	8000974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093a:	2360      	movs	r3, #96	; 0x60
 800093c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	220c      	movs	r2, #12
 800094e:	4619      	mov	r1, r3
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM2_Init+0xe8>)
 8000952:	f002 fd55 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800095c:	f000 f80a 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM2_Init+0xe8>)
 8000962:	f000 f943 	bl	8000bec <HAL_TIM_MspPostInit>

}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	; 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200003a4 	.word	0x200003a4

08000974 <Error_Handler>:

static void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_MspInit+0x68>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <HAL_MspInit+0x68>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6193      	str	r3, [r2, #24]
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_MspInit+0x68>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_MspInit+0x68>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <HAL_MspInit+0x68>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x68>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	210f      	movs	r1, #15
 80009ba:	f06f 0001 	mvn.w	r0, #1
 80009be:	f001 fbb6 	bl	800212e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_MspInit+0x6c>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_MspInit+0x6c>)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010000 	.word	0x40010000

080009f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0318 	add.w	r3, r7, #24
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a28      	ldr	r2, [pc, #160]	; (8000aac <HAL_ADC_MspInit+0xbc>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d122      	bne.n	8000a56 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <HAL_ADC_MspInit+0xc0>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <HAL_ADC_MspInit+0xc0>)
 8000a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <HAL_ADC_MspInit+0xc0>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <HAL_ADC_MspInit+0xc0>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <HAL_ADC_MspInit+0xc0>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <HAL_ADC_MspInit+0xc0>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = I_SENSE_Pin;
 8000a40:	2310      	movs	r3, #16
 8000a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a44:	2303      	movs	r3, #3
 8000a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0318 	add.w	r3, r7, #24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <HAL_ADC_MspInit+0xc4>)
 8000a50:	f001 fb98 	bl	8002184 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000a54:	e026      	b.n	8000aa4 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <HAL_ADC_MspInit+0xc8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d121      	bne.n	8000aa4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <HAL_ADC_MspInit+0xc0>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <HAL_ADC_MspInit+0xc0>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_ADC_MspInit+0xc0>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_ADC_MspInit+0xc0>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <HAL_ADC_MspInit+0xc0>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_ADC_MspInit+0xc0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8000a90:	2320      	movs	r3, #32
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a94:	2303      	movs	r3, #3
 8000a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_ADC_MspInit+0xc4>)
 8000aa0:	f001 fb70 	bl	8002184 <HAL_GPIO_Init>
}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40012400 	.word	0x40012400
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	40012800 	.word	0x40012800

08000abc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a25      	ldr	r2, [pc, #148]	; (8000b6c <HAL_CAN_MspInit+0xb0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d143      	bne.n	8000b64 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000adc:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <HAL_CAN_MspInit+0xb4>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <HAL_CAN_MspInit+0xb4>)
 8000ae2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ae6:	61d3      	str	r3, [r2, #28]
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <HAL_CAN_MspInit+0xb4>)
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <HAL_CAN_MspInit+0xb4>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <HAL_CAN_MspInit+0xb4>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <HAL_CAN_MspInit+0xb4>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	4619      	mov	r1, r3
 8000b24:	4813      	ldr	r0, [pc, #76]	; (8000b74 <HAL_CAN_MspInit+0xb8>)
 8000b26:	f001 fb2d 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480d      	ldr	r0, [pc, #52]	; (8000b74 <HAL_CAN_MspInit+0xb8>)
 8000b40:	f001 fb20 	bl	8002184 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2105      	movs	r1, #5
 8000b48:	2014      	movs	r0, #20
 8000b4a:	f001 faf0 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000b4e:	2014      	movs	r0, #20
 8000b50:	f001 fb09 	bl	8002166 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2105      	movs	r1, #5
 8000b58:	2015      	movs	r0, #21
 8000b5a:	f001 fae8 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b5e:	2015      	movs	r0, #21
 8000b60:	f001 fb01 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40006400 	.word	0x40006400
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010800 	.word	0x40010800

08000b78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b88:	d10b      	bne.n	8000ba2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_TIM_Base_MspInit+0x34>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_TIM_Base_MspInit+0x34>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_TIM_Base_MspInit+0x34>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <HAL_TIM_PWM_MspInit+0x34>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d10b      	bne.n	8000bda <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_TIM_PWM_MspInit+0x38>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_TIM_PWM_MspInit+0x38>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_TIM_PWM_MspInit+0x38>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	40000400 	.word	0x40000400
 8000be8:	40021000 	.word	0x40021000

08000bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c0a:	d12b      	bne.n	8000c64 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <HAL_TIM_MspPostInit+0xec>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a31      	ldr	r2, [pc, #196]	; (8000cd8 <HAL_TIM_MspPostInit+0xec>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <HAL_TIM_MspPostInit+0xec>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_EN_PWM_Pin;
 8000c24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MOTOR_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4828      	ldr	r0, [pc, #160]	; (8000cdc <HAL_TIM_MspPostInit+0xf0>)
 8000c3a:	f001 faa3 	bl	8002184 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000c3e:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <HAL_TIM_MspPostInit+0xf4>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c5c:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <HAL_TIM_MspPostInit+0xf4>)
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c62:	e034      	b.n	8000cce <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1e      	ldr	r2, [pc, #120]	; (8000ce4 <HAL_TIM_MspPostInit+0xf8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12f      	bne.n	8000cce <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <HAL_TIM_MspPostInit+0xec>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_TIM_MspPostInit+0xec>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_TIM_MspPostInit+0xec>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_TIM_MspPostInit+0xec>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <HAL_TIM_MspPostInit+0xec>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_TIM_MspPostInit+0xec>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_BLINKER_Pin;
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LEFT_BLINKER_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <HAL_TIM_MspPostInit+0xfc>)
 8000cb2:	f001 fa67 	bl	8002184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RIGHT_BLINKER_Pin;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RIGHT_BLINKER_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <HAL_TIM_MspPostInit+0xf0>)
 8000cca:	f001 fa5b 	bl	8002184 <HAL_GPIO_Init>
}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	40000400 	.word	0x40000400
 8000ce8:	40010800 	.word	0x40010800

08000cec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <HAL_InitTick+0xd0>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4a2d      	ldr	r2, [pc, #180]	; (8000dbc <HAL_InitTick+0xd0>)
 8000d08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <HAL_InitTick+0xd0>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d1a:	f107 020c 	add.w	r2, r7, #12
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 ffcb 	bl	8002cc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d2a:	f001 ffb5 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 8000d2e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d32:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <HAL_InitTick+0xd4>)
 8000d34:	fba2 2303 	umull	r2, r3, r2, r3
 8000d38:	0c9b      	lsrs	r3, r3, #18
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <HAL_InitTick+0xd8>)
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <HAL_InitTick+0xdc>)
 8000d42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <HAL_InitTick+0xd8>)
 8000d46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d4a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d4c:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <HAL_InitTick+0xd8>)
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_InitTick+0xd8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <HAL_InitTick+0xd8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_InitTick+0xd8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d64:	4817      	ldr	r0, [pc, #92]	; (8000dc4 <HAL_InitTick+0xd8>)
 8000d66:	f002 f8af 	bl	8002ec8 <HAL_TIM_Base_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d11b      	bne.n	8000db0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d78:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <HAL_InitTick+0xd8>)
 8000d7a:	f002 f8f5 	bl	8002f68 <HAL_TIM_Base_Start_IT>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d111      	bne.n	8000db0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d8c:	2019      	movs	r0, #25
 8000d8e:	f001 f9ea 	bl	8002166 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d808      	bhi.n	8000daa <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	2019      	movs	r0, #25
 8000d9e:	f001 f9c6 	bl	800212e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_InitTick+0xe0>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e002      	b.n	8000db0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000db0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3730      	adds	r7, #48	; 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	431bde83 	.word	0x431bde83
 8000dc4:	200003ec 	.word	0x200003ec
 8000dc8:	40012c00 	.word	0x40012c00
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
	...

08000dfc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e02:	f000 fec4 	bl	8001b8e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000328 	.word	0x20000328

08000e10 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <CAN1_RX1_IRQHandler+0x10>)
 8000e16:	f000 feba 	bl	8001b8e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000328 	.word	0x20000328

08000e24 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <TIM1_UP_IRQHandler+0x10>)
 8000e2a:	f002 f9e1 	bl	80031f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200003ec 	.word	0x200003ec

08000e38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e46:	490d      	ldr	r1, [pc, #52]	; (8000e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	; (8000e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e6a:	f7ff ffe5 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f004 f957 	bl	8005120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e72:	f7ff fa33 	bl	80002dc <main>
  bx lr
 8000e76:	4770      	bx	lr
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e80:	08005218 	.word	0x08005218
  ldr r2, =_sbss
 8000e84:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e88:	20001184 	.word	0x20001184

08000e8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC1_2_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x28>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x28>)
 8000e9a:	f043 0310 	orr.w	r3, r3, #16
 8000e9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f001 f939 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f7ff ff20 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fd68 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_IncTick+0x1c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_IncTick+0x20>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a03      	ldr	r2, [pc, #12]	; (8000edc <HAL_IncTick+0x20>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000434 	.word	0x20000434

08000ee0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <HAL_GetTick+0x10>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000434 	.word	0x20000434

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff fff0 	bl	8000ee0 <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffe0 	bl	8000ee0 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008

08000f3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e0be      	b.n	80010dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d109      	bne.n	8000f80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fd38 	bl	80009f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f9ab 	bl	80012dc <ADC_ConversionStop_Disable>
 8000f86:	4603      	mov	r3, r0
 8000f88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 8099 	bne.w	80010ca <HAL_ADC_Init+0x18e>
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f040 8095 	bne.w	80010ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fa8:	f023 0302 	bic.w	r3, r3, #2
 8000fac:	f043 0202 	orr.w	r2, r3, #2
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fbc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7b1b      	ldrb	r3, [r3, #12]
 8000fc2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fc4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fd4:	d003      	beq.n	8000fde <HAL_ADC_Init+0xa2>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d102      	bne.n	8000fe4 <HAL_ADC_Init+0xa8>
 8000fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe2:	e000      	b.n	8000fe6 <HAL_ADC_Init+0xaa>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7d1b      	ldrb	r3, [r3, #20]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d119      	bne.n	8001028 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7b1b      	ldrb	r3, [r3, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d109      	bne.n	8001010 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	3b01      	subs	r3, #1
 8001002:	035a      	lsls	r2, r3, #13
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	e00b      	b.n	8001028 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	f043 0220 	orr.w	r2, r3, #32
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	f043 0201 	orr.w	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	430a      	orrs	r2, r1
 800103a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <HAL_ADC_Init+0x1a8>)
 8001044:	4013      	ands	r3, r2
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	6812      	ldr	r2, [r2, #0]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	430b      	orrs	r3, r1
 800104e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001058:	d003      	beq.n	8001062 <HAL_ADC_Init+0x126>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d104      	bne.n	800106c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	3b01      	subs	r3, #1
 8001068:	051b      	lsls	r3, r3, #20
 800106a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	430a      	orrs	r2, r1
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_ADC_Init+0x1ac>)
 8001088:	4013      	ands	r3, r2
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	429a      	cmp	r2, r3
 800108e:	d10b      	bne.n	80010a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	f023 0303 	bic.w	r3, r3, #3
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010a6:	e018      	b.n	80010da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	f023 0312 	bic.w	r3, r3, #18
 80010b0:	f043 0210 	orr.w	r2, r3, #16
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010bc:	f043 0201 	orr.w	r2, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010c8:	e007      	b.n	80010da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	f043 0210 	orr.w	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010da:	7dfb      	ldrb	r3, [r7, #23]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	ffe1f7fd 	.word	0xffe1f7fd
 80010e8:	ff1f0efe 	.word	0xff1f0efe

080010ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001104:	2b01      	cmp	r3, #1
 8001106:	d101      	bne.n	800110c <HAL_ADC_ConfigChannel+0x20>
 8001108:	2302      	movs	r3, #2
 800110a:	e0dc      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1da>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b06      	cmp	r3, #6
 800111a:	d81c      	bhi.n	8001156 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	3b05      	subs	r3, #5
 800112e:	221f      	movs	r2, #31
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	4019      	ands	r1, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	3b05      	subs	r3, #5
 8001148:	fa00 f203 	lsl.w	r2, r0, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	635a      	str	r2, [r3, #52]	; 0x34
 8001154:	e03c      	b.n	80011d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b0c      	cmp	r3, #12
 800115c:	d81c      	bhi.n	8001198 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b23      	subs	r3, #35	; 0x23
 8001170:	221f      	movs	r2, #31
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	4019      	ands	r1, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	3b23      	subs	r3, #35	; 0x23
 800118a:	fa00 f203 	lsl.w	r2, r0, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
 8001196:	e01b      	b.n	80011d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	3b41      	subs	r3, #65	; 0x41
 80011aa:	221f      	movs	r2, #31
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4019      	ands	r1, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	3b41      	subs	r3, #65	; 0x41
 80011c4:	fa00 f203 	lsl.w	r2, r0, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	d91c      	bls.n	8001212 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	3b1e      	subs	r3, #30
 80011ea:	2207      	movs	r2, #7
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4019      	ands	r1, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6898      	ldr	r0, [r3, #8]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	3b1e      	subs	r3, #30
 8001204:	fa00 f203 	lsl.w	r2, r0, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	e019      	b.n	8001246 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6919      	ldr	r1, [r3, #16]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	2207      	movs	r2, #7
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	4019      	ands	r1, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	6898      	ldr	r0, [r3, #8]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	fa00 f203 	lsl.w	r2, r0, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b10      	cmp	r3, #16
 800124c:	d003      	beq.n	8001256 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001252:	2b11      	cmp	r3, #17
 8001254:	d132      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d125      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d126      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800127c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b10      	cmp	r3, #16
 8001284:	d11a      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800128c:	fba2 2303 	umull	r2, r3, r2, r3
 8001290:	0c9a      	lsrs	r2, r3, #18
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800129c:	e002      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f9      	bne.n	800129e <HAL_ADC_ConfigChannel+0x1b2>
 80012aa:	e007      	b.n	80012bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	f043 0220 	orr.w	r2, r3, #32
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40012400 	.word	0x40012400
 80012d4:	20000000 	.word	0x20000000
 80012d8:	431bde83 	.word	0x431bde83

080012dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d12e      	bne.n	8001354 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001306:	f7ff fdeb 	bl	8000ee0 <HAL_GetTick>
 800130a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800130c:	e01b      	b.n	8001346 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800130e:	f7ff fde7 	bl	8000ee0 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d914      	bls.n	8001346 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b01      	cmp	r3, #1
 8001328:	d10d      	bne.n	8001346 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	f043 0210 	orr.w	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e007      	b.n	8001356 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	d0dc      	beq.n	800130e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b084      	sub	sp, #16
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0ed      	b.n	800154c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fb9d 	bl	8000abc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0201 	orr.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001392:	f7ff fda5 	bl	8000ee0 <HAL_GetTick>
 8001396:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001398:	e012      	b.n	80013c0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800139a:	f7ff fda1 	bl	8000ee0 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b0a      	cmp	r3, #10
 80013a6:	d90b      	bls.n	80013c0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2205      	movs	r2, #5
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0c5      	b.n	800154c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0e5      	beq.n	800139a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0202 	bic.w	r2, r2, #2
 80013dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013de:	f7ff fd7f 	bl	8000ee0 <HAL_GetTick>
 80013e2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013e4:	e012      	b.n	800140c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013e6:	f7ff fd7b 	bl	8000ee0 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b0a      	cmp	r3, #10
 80013f2:	d90b      	bls.n	800140c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2205      	movs	r2, #5
 8001404:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e09f      	b.n	800154c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1e5      	bne.n	80013e6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7e1b      	ldrb	r3, [r3, #24]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d108      	bne.n	8001434 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e007      	b.n	8001444 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001442:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7e5b      	ldrb	r3, [r3, #25]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d108      	bne.n	800145e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e007      	b.n	800146e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7e9b      	ldrb	r3, [r3, #26]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d108      	bne.n	8001488 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0220 	orr.w	r2, r2, #32
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e007      	b.n	8001498 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0220 	bic.w	r2, r2, #32
 8001496:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7edb      	ldrb	r3, [r3, #27]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d108      	bne.n	80014b2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0210 	bic.w	r2, r2, #16
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e007      	b.n	80014c2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0210 	orr.w	r2, r2, #16
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7f1b      	ldrb	r3, [r3, #28]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d108      	bne.n	80014dc <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f042 0208 	orr.w	r2, r2, #8
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e007      	b.n	80014ec <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0208 	bic.w	r2, r2, #8
 80014ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7f5b      	ldrb	r3, [r3, #29]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0204 	orr.w	r2, r2, #4
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	e007      	b.n	8001516 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0204 	bic.w	r2, r2, #4
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	ea42 0103 	orr.w	r1, r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	1e5a      	subs	r2, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800156c:	7cfb      	ldrb	r3, [r7, #19]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d003      	beq.n	800157a <HAL_CAN_ConfigFilter+0x26>
 8001572:	7cfb      	ldrb	r3, [r7, #19]
 8001574:	2b02      	cmp	r3, #2
 8001576:	f040 80aa 	bne.w	80016ce <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001580:	f043 0201 	orr.w	r2, r3, #1
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	2201      	movs	r2, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	401a      	ands	r2, r3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d123      	bne.n	80015fc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3248      	adds	r2, #72	; 0x48
 80015dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015f2:	6979      	ldr	r1, [r7, #20]
 80015f4:	3348      	adds	r3, #72	; 0x48
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d122      	bne.n	800164a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	431a      	orrs	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001624:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3248      	adds	r2, #72	; 0x48
 800162a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800163e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001640:	6979      	ldr	r1, [r7, #20]
 8001642:	3348      	adds	r3, #72	; 0x48
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43db      	mvns	r3, r3
 800165c:	401a      	ands	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001664:	e007      	b.n	8001676 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	431a      	orrs	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43db      	mvns	r3, r3
 8001688:	401a      	ands	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001690:	e007      	b.n	80016a2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	431a      	orrs	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d107      	bne.n	80016ba <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016c0:	f023 0201 	bic.w	r2, r3, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e006      	b.n	80016dc <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
  }
}
 80016dc:	4618      	mov	r0, r3
 80016de:	371c      	adds	r7, #28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d12e      	bne.n	8001758 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2202      	movs	r2, #2
 80016fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001712:	f7ff fbe5 	bl	8000ee0 <HAL_GetTick>
 8001716:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001718:	e012      	b.n	8001740 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800171a:	f7ff fbe1 	bl	8000ee0 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b0a      	cmp	r3, #10
 8001726:	d90b      	bls.n	8001740 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2205      	movs	r2, #5
 8001738:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e012      	b.n	8001766 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1e5      	bne.n	800171a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e006      	b.n	8001766 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
  }
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800176e:	b480      	push	{r7}
 8001770:	b089      	sub	sp, #36	; 0x24
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001782:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800178c:	7ffb      	ldrb	r3, [r7, #31]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d003      	beq.n	800179a <HAL_CAN_AddTxMessage+0x2c>
 8001792:	7ffb      	ldrb	r3, [r7, #31]
 8001794:	2b02      	cmp	r3, #2
 8001796:	f040 80b8 	bne.w	800190a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10a      	bne.n	80017ba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d105      	bne.n	80017ba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a0 	beq.w	80018fa <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	0e1b      	lsrs	r3, r3, #24
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d907      	bls.n	80017da <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e09e      	b.n	8001918 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80017da:	2201      	movs	r2, #1
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10d      	bne.n	8001808 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017f6:	68f9      	ldr	r1, [r7, #12]
 80017f8:	6809      	ldr	r1, [r1, #0]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3318      	adds	r3, #24
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	440b      	add	r3, r1
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e00f      	b.n	8001828 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001812:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001818:	68f9      	ldr	r1, [r7, #12]
 800181a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800181c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3318      	adds	r3, #24
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	440b      	add	r3, r1
 8001826:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6819      	ldr	r1, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3318      	adds	r3, #24
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	440b      	add	r3, r1
 8001838:	3304      	adds	r3, #4
 800183a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	7d1b      	ldrb	r3, [r3, #20]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d111      	bne.n	8001868 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3318      	adds	r3, #24
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4413      	add	r3, r2
 8001850:	3304      	adds	r3, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	6811      	ldr	r1, [r2, #0]
 8001858:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3318      	adds	r3, #24
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	440b      	add	r3, r1
 8001864:	3304      	adds	r3, #4
 8001866:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3307      	adds	r3, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	061a      	lsls	r2, r3, #24
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3306      	adds	r3, #6
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3305      	adds	r3, #5
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	4313      	orrs	r3, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	3204      	adds	r2, #4
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	4610      	mov	r0, r2
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	6811      	ldr	r1, [r2, #0]
 8001890:	ea43 0200 	orr.w	r2, r3, r0
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	440b      	add	r3, r1
 800189a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800189e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3303      	adds	r3, #3
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	061a      	lsls	r2, r3, #24
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3302      	adds	r3, #2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3301      	adds	r3, #1
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	021b      	lsls	r3, r3, #8
 80018ba:	4313      	orrs	r3, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	7812      	ldrb	r2, [r2, #0]
 80018c0:	4610      	mov	r0, r2
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	6811      	ldr	r1, [r2, #0]
 80018c6:	ea43 0200 	orr.w	r2, r3, r0
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	440b      	add	r3, r1
 80018d0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80018d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3318      	adds	r3, #24
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	4413      	add	r3, r2
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	6811      	ldr	r1, [r2, #0]
 80018e8:	f043 0201 	orr.w	r2, r3, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3318      	adds	r3, #24
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	440b      	add	r3, r1
 80018f4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e00e      	b.n	8001918 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e006      	b.n	8001918 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
  }
}
 8001918:	4618      	mov	r0, r3
 800191a:	3724      	adds	r7, #36	; 0x24
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001922:	b480      	push	{r7}
 8001924:	b087      	sub	sp, #28
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001936:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d003      	beq.n	8001946 <HAL_CAN_GetRxMessage+0x24>
 800193e:	7dfb      	ldrb	r3, [r7, #23]
 8001940:	2b02      	cmp	r3, #2
 8001942:	f040 80f3 	bne.w	8001b2c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10e      	bne.n	800196a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d116      	bne.n	8001988 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0e7      	b.n	8001b3a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0d8      	b.n	8001b3a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	331b      	adds	r3, #27
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0204 	and.w	r2, r3, #4
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	331b      	adds	r3, #27
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4413      	add	r3, r2
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0d5b      	lsrs	r3, r3, #21
 80019b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e00b      	b.n	80019d8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	331b      	adds	r3, #27
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	08db      	lsrs	r3, r3, #3
 80019d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	331b      	adds	r3, #27
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4413      	add	r3, r2
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0202 	and.w	r2, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	331b      	adds	r3, #27
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	3304      	adds	r3, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 020f 	and.w	r2, r3, #15
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	331b      	adds	r3, #27
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	4413      	add	r3, r2
 8001a12:	3304      	adds	r3, #4
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	331b      	adds	r3, #27
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0c1b      	lsrs	r3, r3, #16
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0a1a      	lsrs	r2, r3, #8
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	0c1a      	lsrs	r2, r3, #16
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0e1a      	lsrs	r2, r3, #24
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	3303      	adds	r3, #3
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	3304      	adds	r3, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0a1a      	lsrs	r2, r3, #8
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	3305      	adds	r3, #5
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0c1a      	lsrs	r2, r3, #16
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	3306      	adds	r3, #6
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	0e1a      	lsrs	r2, r3, #24
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	3307      	adds	r3, #7
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d108      	bne.n	8001b18 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0220 	orr.w	r2, r2, #32
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	e007      	b.n	8001b28 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0220 	orr.w	r2, r2, #32
 8001b26:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e006      	b.n	8001b3a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
  }
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b54:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d002      	beq.n	8001b62 <HAL_CAN_ActivateNotification+0x1e>
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d109      	bne.n	8001b76 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6959      	ldr	r1, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e006      	b.n	8001b84 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
  }
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b08a      	sub	sp, #40	; 0x28
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d07c      	beq.n	8001cce <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d023      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2201      	movs	r2, #1
 8001be4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f983 	bl	8001efc <HAL_CAN_TxMailbox0CompleteCallback>
 8001bf6:	e016      	b.n	8001c26 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	e00c      	b.n	8001c26 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1e:	e002      	b.n	8001c26 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f986 	bl	8001f32 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d024      	beq.n	8001c7a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f962 	bl	8001f0e <HAL_CAN_TxMailbox1CompleteCallback>
 8001c4a:	e016      	b.n	8001c7a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d004      	beq.n	8001c60 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5e:	e00c      	b.n	8001c7a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
 8001c72:	e002      	b.n	8001c7a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f965 	bl	8001f44 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d024      	beq.n	8001cce <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f941 	bl	8001f20 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c9e:	e016      	b.n	8001cce <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d004      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb2:	e00c      	b.n	8001cce <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d004      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc6:	e002      	b.n	8001cce <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f944 	bl	8001f56 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00c      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d007      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2210      	movs	r2, #16
 8001cf0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00b      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f92a 	bl	8001f68 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7fe fab9 	bl	80002a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00c      	beq.n	8001d56 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2210      	movs	r2, #16
 8001d54:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00b      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2208      	movs	r2, #8
 8001d70:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f901 	bl	8001f7a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7fe fa67 	bl	8000264 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2210      	movs	r2, #16
 8001db0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8ea 	bl	8001f8c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8e2 	bl	8001f9e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d07b      	beq.n	8001edc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d072      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d043      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d03e      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e5c:	2b60      	cmp	r3, #96	; 0x60
 8001e5e:	d02b      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x32a>
 8001e60:	2b60      	cmp	r3, #96	; 0x60
 8001e62:	d82e      	bhi.n	8001ec2 <HAL_CAN_IRQHandler+0x334>
 8001e64:	2b50      	cmp	r3, #80	; 0x50
 8001e66:	d022      	beq.n	8001eae <HAL_CAN_IRQHandler+0x320>
 8001e68:	2b50      	cmp	r3, #80	; 0x50
 8001e6a:	d82a      	bhi.n	8001ec2 <HAL_CAN_IRQHandler+0x334>
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d019      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x316>
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	d826      	bhi.n	8001ec2 <HAL_CAN_IRQHandler+0x334>
 8001e74:	2b30      	cmp	r3, #48	; 0x30
 8001e76:	d010      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x30c>
 8001e78:	2b30      	cmp	r3, #48	; 0x30
 8001e7a:	d822      	bhi.n	8001ec2 <HAL_CAN_IRQHandler+0x334>
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d002      	beq.n	8001e86 <HAL_CAN_IRQHandler+0x2f8>
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d005      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e84:	e01d      	b.n	8001ec2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	f043 0308 	orr.w	r3, r3, #8
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e8e:	e019      	b.n	8001ec4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	f043 0310 	orr.w	r3, r3, #16
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e98:	e014      	b.n	8001ec4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	f043 0320 	orr.w	r3, r3, #32
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ea2:	e00f      	b.n	8001ec4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eac:	e00a      	b.n	8001ec4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eb6:	e005      	b.n	8001ec4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ec0:	e000      	b.n	8001ec4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ec2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ed2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2204      	movs	r2, #4
 8001eda:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d008      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f85e 	bl	8001fb0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
	...

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4906      	ldr	r1, [pc, #24]	; (800205c <__NVIC_EnableIRQ+0x34>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff4f 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff64 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ffb2 	bl	80020b4 <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff81 	bl	8002060 <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff57 	bl	8002028 <__NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b08b      	sub	sp, #44	; 0x2c
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002196:	e169      	b.n	800246c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002198:	2201      	movs	r2, #1
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f040 8158 	bne.w	8002466 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4a9a      	ldr	r2, [pc, #616]	; (8002424 <HAL_GPIO_Init+0x2a0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d05e      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021c0:	4a98      	ldr	r2, [pc, #608]	; (8002424 <HAL_GPIO_Init+0x2a0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d875      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021c6:	4a98      	ldr	r2, [pc, #608]	; (8002428 <HAL_GPIO_Init+0x2a4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d058      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021cc:	4a96      	ldr	r2, [pc, #600]	; (8002428 <HAL_GPIO_Init+0x2a4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d86f      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021d2:	4a96      	ldr	r2, [pc, #600]	; (800242c <HAL_GPIO_Init+0x2a8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d052      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021d8:	4a94      	ldr	r2, [pc, #592]	; (800242c <HAL_GPIO_Init+0x2a8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d869      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021de:	4a94      	ldr	r2, [pc, #592]	; (8002430 <HAL_GPIO_Init+0x2ac>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d04c      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021e4:	4a92      	ldr	r2, [pc, #584]	; (8002430 <HAL_GPIO_Init+0x2ac>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d863      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021ea:	4a92      	ldr	r2, [pc, #584]	; (8002434 <HAL_GPIO_Init+0x2b0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d046      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021f0:	4a90      	ldr	r2, [pc, #576]	; (8002434 <HAL_GPIO_Init+0x2b0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d85d      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021f6:	2b12      	cmp	r3, #18
 80021f8:	d82a      	bhi.n	8002250 <HAL_GPIO_Init+0xcc>
 80021fa:	2b12      	cmp	r3, #18
 80021fc:	d859      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021fe:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <HAL_GPIO_Init+0x80>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	0800227f 	.word	0x0800227f
 8002208:	08002259 	.word	0x08002259
 800220c:	0800226b 	.word	0x0800226b
 8002210:	080022ad 	.word	0x080022ad
 8002214:	080022b3 	.word	0x080022b3
 8002218:	080022b3 	.word	0x080022b3
 800221c:	080022b3 	.word	0x080022b3
 8002220:	080022b3 	.word	0x080022b3
 8002224:	080022b3 	.word	0x080022b3
 8002228:	080022b3 	.word	0x080022b3
 800222c:	080022b3 	.word	0x080022b3
 8002230:	080022b3 	.word	0x080022b3
 8002234:	080022b3 	.word	0x080022b3
 8002238:	080022b3 	.word	0x080022b3
 800223c:	080022b3 	.word	0x080022b3
 8002240:	080022b3 	.word	0x080022b3
 8002244:	080022b3 	.word	0x080022b3
 8002248:	08002261 	.word	0x08002261
 800224c:	08002275 	.word	0x08002275
 8002250:	4a79      	ldr	r2, [pc, #484]	; (8002438 <HAL_GPIO_Init+0x2b4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002256:	e02c      	b.n	80022b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	623b      	str	r3, [r7, #32]
          break;
 800225e:	e029      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	3304      	adds	r3, #4
 8002266:	623b      	str	r3, [r7, #32]
          break;
 8002268:	e024      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	3308      	adds	r3, #8
 8002270:	623b      	str	r3, [r7, #32]
          break;
 8002272:	e01f      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	330c      	adds	r3, #12
 800227a:	623b      	str	r3, [r7, #32]
          break;
 800227c:	e01a      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002286:	2304      	movs	r3, #4
 8002288:	623b      	str	r3, [r7, #32]
          break;
 800228a:	e013      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002294:	2308      	movs	r3, #8
 8002296:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	611a      	str	r2, [r3, #16]
          break;
 800229e:	e009      	b.n	80022b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a0:	2308      	movs	r3, #8
 80022a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	615a      	str	r2, [r3, #20]
          break;
 80022aa:	e003      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
          break;
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          break;
 80022b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2bff      	cmp	r3, #255	; 0xff
 80022b8:	d801      	bhi.n	80022be <HAL_GPIO_Init+0x13a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	e001      	b.n	80022c2 <HAL_GPIO_Init+0x13e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2bff      	cmp	r3, #255	; 0xff
 80022c8:	d802      	bhi.n	80022d0 <HAL_GPIO_Init+0x14c>
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	e002      	b.n	80022d6 <HAL_GPIO_Init+0x152>
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	3b08      	subs	r3, #8
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	210f      	movs	r1, #15
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	401a      	ands	r2, r3
 80022e8:	6a39      	ldr	r1, [r7, #32]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	431a      	orrs	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80b1 	beq.w	8002466 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002304:	4b4d      	ldr	r3, [pc, #308]	; (800243c <HAL_GPIO_Init+0x2b8>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_GPIO_Init+0x2b8>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6193      	str	r3, [r2, #24]
 8002310:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_GPIO_Init+0x2b8>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800231c:	4a48      	ldr	r2, [pc, #288]	; (8002440 <HAL_GPIO_Init+0x2bc>)
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002328:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a40      	ldr	r2, [pc, #256]	; (8002444 <HAL_GPIO_Init+0x2c0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d013      	beq.n	8002370 <HAL_GPIO_Init+0x1ec>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3f      	ldr	r2, [pc, #252]	; (8002448 <HAL_GPIO_Init+0x2c4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00d      	beq.n	800236c <HAL_GPIO_Init+0x1e8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3e      	ldr	r2, [pc, #248]	; (800244c <HAL_GPIO_Init+0x2c8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <HAL_GPIO_Init+0x1e4>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a3d      	ldr	r2, [pc, #244]	; (8002450 <HAL_GPIO_Init+0x2cc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_GPIO_Init+0x1e0>
 8002360:	2303      	movs	r3, #3
 8002362:	e006      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002364:	2304      	movs	r3, #4
 8002366:	e004      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002368:	2302      	movs	r3, #2
 800236a:	e002      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002370:	2300      	movs	r3, #0
 8002372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002374:	f002 0203 	and.w	r2, r2, #3
 8002378:	0092      	lsls	r2, r2, #2
 800237a:	4093      	lsls	r3, r2
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002382:	492f      	ldr	r1, [pc, #188]	; (8002440 <HAL_GPIO_Init+0x2bc>)
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	492c      	ldr	r1, [pc, #176]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023aa:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	4928      	ldr	r1, [pc, #160]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023c4:	4b23      	ldr	r3, [pc, #140]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	4922      	ldr	r1, [pc, #136]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	43db      	mvns	r3, r3
 80023da:	491e      	ldr	r1, [pc, #120]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d006      	beq.n	80023fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023ec:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	4918      	ldr	r1, [pc, #96]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	43db      	mvns	r3, r3
 8002402:	4914      	ldr	r1, [pc, #80]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 8002404:	4013      	ands	r3, r2
 8002406:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d021      	beq.n	8002458 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	490e      	ldr	r1, [pc, #56]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	60cb      	str	r3, [r1, #12]
 8002420:	e021      	b.n	8002466 <HAL_GPIO_Init+0x2e2>
 8002422:	bf00      	nop
 8002424:	10320000 	.word	0x10320000
 8002428:	10310000 	.word	0x10310000
 800242c:	10220000 	.word	0x10220000
 8002430:	10210000 	.word	0x10210000
 8002434:	10120000 	.word	0x10120000
 8002438:	10110000 	.word	0x10110000
 800243c:	40021000 	.word	0x40021000
 8002440:	40010000 	.word	0x40010000
 8002444:	40010800 	.word	0x40010800
 8002448:	40010c00 	.word	0x40010c00
 800244c:	40011000 	.word	0x40011000
 8002450:	40011400 	.word	0x40011400
 8002454:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_GPIO_Init+0x304>)
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	43db      	mvns	r3, r3
 8002460:	4909      	ldr	r1, [pc, #36]	; (8002488 <HAL_GPIO_Init+0x304>)
 8002462:	4013      	ands	r3, r2
 8002464:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	3301      	adds	r3, #1
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	f47f ae8e 	bne.w	8002198 <HAL_GPIO_Init+0x14>
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	372c      	adds	r7, #44	; 0x2c
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	40010400 	.word	0x40010400

0800248c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800249c:	787b      	ldrb	r3, [r7, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024a8:	e003      	b.n	80024b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	041a      	lsls	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	611a      	str	r2, [r3, #16]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	041a      	lsls	r2, r3, #16
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43d9      	mvns	r1, r3
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	400b      	ands	r3, r1
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	611a      	str	r2, [r3, #16]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e272      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8087 	beq.w	800261e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002510:	4b92      	ldr	r3, [pc, #584]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b04      	cmp	r3, #4
 800251a:	d00c      	beq.n	8002536 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800251c:	4b8f      	ldr	r3, [pc, #572]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d112      	bne.n	800254e <HAL_RCC_OscConfig+0x5e>
 8002528:	4b8c      	ldr	r3, [pc, #560]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002534:	d10b      	bne.n	800254e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002536:	4b89      	ldr	r3, [pc, #548]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d06c      	beq.n	800261c <HAL_RCC_OscConfig+0x12c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d168      	bne.n	800261c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e24c      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x76>
 8002558:	4b80      	ldr	r3, [pc, #512]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a7f      	ldr	r2, [pc, #508]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 800255e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	e02e      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x98>
 800256e:	4b7b      	ldr	r3, [pc, #492]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a7a      	ldr	r2, [pc, #488]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b78      	ldr	r3, [pc, #480]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a77      	ldr	r2, [pc, #476]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e01d      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0xbc>
 8002592:	4b72      	ldr	r3, [pc, #456]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a71      	ldr	r2, [pc, #452]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b6f      	ldr	r3, [pc, #444]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6e      	ldr	r2, [pc, #440]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e00b      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 80025ac:	4b6b      	ldr	r3, [pc, #428]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a6a      	ldr	r2, [pc, #424]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 80025b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b68      	ldr	r3, [pc, #416]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a67      	ldr	r2, [pc, #412]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 80025be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe fc88 	bl	8000ee0 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7fe fc84 	bl	8000ee0 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e200      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b5d      	ldr	r3, [pc, #372]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0xe4>
 80025f2:	e014      	b.n	800261e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe fc74 	bl	8000ee0 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7fe fc70 	bl	8000ee0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1ec      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	4b53      	ldr	r3, [pc, #332]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x10c>
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d063      	beq.n	80026f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800262a:	4b4c      	ldr	r3, [pc, #304]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002636:	4b49      	ldr	r3, [pc, #292]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b08      	cmp	r3, #8
 8002640:	d11c      	bne.n	800267c <HAL_RCC_OscConfig+0x18c>
 8002642:	4b46      	ldr	r3, [pc, #280]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d116      	bne.n	800267c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264e:	4b43      	ldr	r3, [pc, #268]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_RCC_OscConfig+0x176>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d001      	beq.n	8002666 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e1c0      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002666:	4b3d      	ldr	r3, [pc, #244]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4939      	ldr	r1, [pc, #228]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267a:	e03a      	b.n	80026f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002684:	4b36      	ldr	r3, [pc, #216]	; (8002760 <HAL_RCC_OscConfig+0x270>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7fe fc29 	bl	8000ee0 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002692:	f7fe fc25 	bl	8000ee0 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e1a1      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a4:	4b2d      	ldr	r3, [pc, #180]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	4b2a      	ldr	r3, [pc, #168]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4927      	ldr	r1, [pc, #156]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
 80026c4:	e015      	b.n	80026f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <HAL_RCC_OscConfig+0x270>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fc08 	bl	8000ee0 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d4:	f7fe fc04 	bl	8000ee0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e180      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d03a      	beq.n	8002774 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d019      	beq.n	800273a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002706:	4b17      	ldr	r3, [pc, #92]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270c:	f7fe fbe8 	bl	8000ee0 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002714:	f7fe fbe4 	bl	8000ee0 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e160      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <HAL_RCC_OscConfig+0x26c>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002732:	2001      	movs	r0, #1
 8002734:	f000 faf4 	bl	8002d20 <RCC_Delay>
 8002738:	e01c      	b.n	8002774 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002740:	f7fe fbce 	bl	8000ee0 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002746:	e00f      	b.n	8002768 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002748:	f7fe fbca 	bl	8000ee0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d908      	bls.n	8002768 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e146      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	42420000 	.word	0x42420000
 8002764:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	4b92      	ldr	r3, [pc, #584]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e9      	bne.n	8002748 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a6 	beq.w	80028ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b8b      	ldr	r3, [pc, #556]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b88      	ldr	r3, [pc, #544]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a87      	ldr	r2, [pc, #540]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b85      	ldr	r3, [pc, #532]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ae:	4b82      	ldr	r3, [pc, #520]	; (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d118      	bne.n	80027ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ba:	4b7f      	ldr	r3, [pc, #508]	; (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7e      	ldr	r2, [pc, #504]	; (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c6:	f7fe fb8b 	bl	8000ee0 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe fb87 	bl	8000ee0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	; 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e103      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	4b75      	ldr	r3, [pc, #468]	; (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x312>
 80027f4:	4b6f      	ldr	r3, [pc, #444]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a6e      	ldr	r2, [pc, #440]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	e02d      	b.n	800285e <HAL_RCC_OscConfig+0x36e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x334>
 800280a:	4b6a      	ldr	r3, [pc, #424]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4a69      	ldr	r2, [pc, #420]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	6213      	str	r3, [r2, #32]
 8002816:	4b67      	ldr	r3, [pc, #412]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a66      	ldr	r2, [pc, #408]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	6213      	str	r3, [r2, #32]
 8002822:	e01c      	b.n	800285e <HAL_RCC_OscConfig+0x36e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d10c      	bne.n	8002846 <HAL_RCC_OscConfig+0x356>
 800282c:	4b61      	ldr	r3, [pc, #388]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4a60      	ldr	r2, [pc, #384]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	6213      	str	r3, [r2, #32]
 8002838:	4b5e      	ldr	r3, [pc, #376]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4a5d      	ldr	r2, [pc, #372]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6213      	str	r3, [r2, #32]
 8002844:	e00b      	b.n	800285e <HAL_RCC_OscConfig+0x36e>
 8002846:	4b5b      	ldr	r3, [pc, #364]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4a5a      	ldr	r2, [pc, #360]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6213      	str	r3, [r2, #32]
 8002852:	4b58      	ldr	r3, [pc, #352]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4a57      	ldr	r2, [pc, #348]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f023 0304 	bic.w	r3, r3, #4
 800285c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d015      	beq.n	8002892 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7fe fb3b 	bl	8000ee0 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fb37 	bl	8000ee0 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0b1      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	4b4b      	ldr	r3, [pc, #300]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ee      	beq.n	800286e <HAL_RCC_OscConfig+0x37e>
 8002890:	e014      	b.n	80028bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7fe fb25 	bl	8000ee0 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe fb21 	bl	8000ee0 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e09b      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ee      	bne.n	800289a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d105      	bne.n	80028ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c2:	4b3c      	ldr	r3, [pc, #240]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4a3b      	ldr	r2, [pc, #236]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8087 	beq.w	80029e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d061      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d146      	bne.n	800297a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ec:	4b33      	ldr	r3, [pc, #204]	; (80029bc <HAL_RCC_OscConfig+0x4cc>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe faf5 	bl	8000ee0 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fa:	f7fe faf1 	bl	8000ee0 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e06d      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290c:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002920:	d108      	bne.n	8002934 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002922:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4921      	ldr	r1, [pc, #132]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a19      	ldr	r1, [r3, #32]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	430b      	orrs	r3, r1
 8002946:	491b      	ldr	r1, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294c:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x4cc>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7fe fac5 	bl	8000ee0 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe fac1 	bl	8000ee0 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e03d      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x46a>
 8002978:	e035      	b.n	80029e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x4cc>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7fe faae 	bl	8000ee0 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe faaa 	bl	8000ee0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e026      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x498>
 80029a6:	e01e      	b.n	80029e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e019      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40007000 	.word	0x40007000
 80029bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_OscConfig+0x500>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000

080029f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0d0      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a08:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d910      	bls.n	8002a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 0207 	bic.w	r2, r3, #7
 8002a1e:	4965      	ldr	r1, [pc, #404]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b63      	ldr	r3, [pc, #396]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0b8      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a50:	4b59      	ldr	r3, [pc, #356]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a58      	ldr	r2, [pc, #352]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a68:	4b53      	ldr	r3, [pc, #332]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a52      	ldr	r2, [pc, #328]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4b50      	ldr	r3, [pc, #320]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	494d      	ldr	r1, [pc, #308]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d040      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d115      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e07f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	4b41      	ldr	r3, [pc, #260]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e073      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	4b3d      	ldr	r3, [pc, #244]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06b      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4936      	ldr	r1, [pc, #216]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe f9fc 	bl	8000ee0 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7fe f9f8 	bl	8000ee0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e053      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 020c 	and.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d1eb      	bne.n	8002aec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b14:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d210      	bcs.n	8002b44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 0207 	bic.w	r2, r3, #7
 8002b2a:	4922      	ldr	r1, [pc, #136]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e032      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4916      	ldr	r1, [pc, #88]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b6e:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	490e      	ldr	r1, [pc, #56]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b82:	f000 f821 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	490a      	ldr	r1, [pc, #40]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	5ccb      	ldrb	r3, [r1, r3]
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe f8a2 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	080051f8 	.word	0x080051f8
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	20000004 	.word	0x20000004

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	b490      	push	{r4, r7}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bce:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xac>)
 8002bd0:	1d3c      	adds	r4, r7, #4
 8002bd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bd8:	f240 2301 	movw	r3, #513	; 0x201
 8002bdc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bf2:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d002      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x40>
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d003      	beq.n	8002c0e <HAL_RCC_GetSysClockFreq+0x46>
 8002c06:	e02b      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c08:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c0a:	623b      	str	r3, [r7, #32]
      break;
 8002c0c:	e02b      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	0c9b      	lsrs	r3, r3, #18
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	3328      	adds	r3, #40	; 0x28
 8002c18:	443b      	add	r3, r7
 8002c1a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c1e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d012      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0c5b      	lsrs	r3, r3, #17
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	3328      	adds	r3, #40	; 0x28
 8002c36:	443b      	add	r3, r7
 8002c38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c42:	fb03 f202 	mul.w	r2, r3, r2
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4e:	e004      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	4a0b      	ldr	r2, [pc, #44]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	623b      	str	r3, [r7, #32]
      break;
 8002c5e:	e002      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c62:	623b      	str	r3, [r7, #32]
      break;
 8002c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c66:	6a3b      	ldr	r3, [r7, #32]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3728      	adds	r7, #40	; 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc90      	pop	{r4, r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	080051e0 	.word	0x080051e0
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	007a1200 	.word	0x007a1200
 8002c80:	003d0900 	.word	0x003d0900

08002c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c88:	4b02      	ldr	r3, [pc, #8]	; (8002c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	20000000 	.word	0x20000000

08002c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c9c:	f7ff fff2 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0adb      	lsrs	r3, r3, #11
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4903      	ldr	r1, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	08005208 	.word	0x08005208

08002cc0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	220f      	movs	r2, #15
 8002cce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_RCC_GetClockConfig+0x58>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0203 	and.w	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <HAL_RCC_GetClockConfig+0x58>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_GetClockConfig+0x58>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_RCC_GetClockConfig+0x58>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	08db      	lsrs	r3, r3, #3
 8002cfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCC_GetClockConfig+0x5c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0207 	and.w	r2, r3, #7
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40022000 	.word	0x40022000

08002d20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <RCC_Delay+0x34>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <RCC_Delay+0x38>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	0a5b      	lsrs	r3, r3, #9
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d3c:	bf00      	nop
  }
  while (Delay --);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1e5a      	subs	r2, r3, #1
 8002d42:	60fa      	str	r2, [r7, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f9      	bne.n	8002d3c <RCC_Delay+0x1c>
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	20000000 	.word	0x20000000
 8002d58:	10624dd3 	.word	0x10624dd3

08002d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d07d      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7c:	4b4f      	ldr	r3, [pc, #316]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10d      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d88:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	4a4b      	ldr	r2, [pc, #300]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d92:	61d3      	str	r3, [r2, #28]
 8002d94:	4b49      	ldr	r3, [pc, #292]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da0:	2301      	movs	r3, #1
 8002da2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d118      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db0:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a42      	ldr	r2, [pc, #264]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dbc:	f7fe f890 	bl	8000ee0 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc4:	f7fe f88c 	bl	8000ee0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e06d      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b3a      	ldr	r3, [pc, #232]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002de2:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d02e      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d027      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e00:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e10:	4b2c      	ldr	r3, [pc, #176]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e16:	4a29      	ldr	r2, [pc, #164]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d014      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fe f85b 	bl	8000ee0 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2c:	e00a      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7fe f857 	bl	8000ee0 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e036      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ee      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4917      	ldr	r1, [pc, #92]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	490b      	ldr	r1, [pc, #44]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	4904      	ldr	r1, [pc, #16]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40007000 	.word	0x40007000
 8002ec4:	42420440 	.word	0x42420440

08002ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e041      	b.n	8002f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fd fe42 	bl	8000b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f000 fc20 	bl	800374c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d001      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e03a      	b.n	8002ff6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a18      	ldr	r2, [pc, #96]	; (8003000 <HAL_TIM_Base_Start_IT+0x98>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00e      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x58>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002faa:	d009      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x58>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a14      	ldr	r2, [pc, #80]	; (8003004 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x58>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a13      	ldr	r2, [pc, #76]	; (8003008 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d111      	bne.n	8002fe4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d010      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe2:	e007      	b.n	8002ff4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	40012c00 	.word	0x40012c00
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800

0800300c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e041      	b.n	80030a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fdbc 	bl	8000bb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f000 fb7e 	bl	800374c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <HAL_TIM_PWM_Start+0x24>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	bf14      	ite	ne
 80030c8:	2301      	movne	r3, #1
 80030ca:	2300      	moveq	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	e022      	b.n	8003116 <HAL_TIM_PWM_Start+0x6a>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d109      	bne.n	80030ea <HAL_TIM_PWM_Start+0x3e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	e015      	b.n	8003116 <HAL_TIM_PWM_Start+0x6a>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d109      	bne.n	8003104 <HAL_TIM_PWM_Start+0x58>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e008      	b.n	8003116 <HAL_TIM_PWM_Start+0x6a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e05e      	b.n	80031dc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d104      	bne.n	800312e <HAL_TIM_PWM_Start+0x82>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800312c:	e013      	b.n	8003156 <HAL_TIM_PWM_Start+0xaa>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b04      	cmp	r3, #4
 8003132:	d104      	bne.n	800313e <HAL_TIM_PWM_Start+0x92>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800313c:	e00b      	b.n	8003156 <HAL_TIM_PWM_Start+0xaa>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d104      	bne.n	800314e <HAL_TIM_PWM_Start+0xa2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800314c:	e003      	b.n	8003156 <HAL_TIM_PWM_Start+0xaa>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	6839      	ldr	r1, [r7, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fd74 	bl	8003c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <HAL_TIM_PWM_Start+0x138>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d107      	bne.n	800317e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800317c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <HAL_TIM_PWM_Start+0x138>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00e      	beq.n	80031a6 <HAL_TIM_PWM_Start+0xfa>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d009      	beq.n	80031a6 <HAL_TIM_PWM_Start+0xfa>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <HAL_TIM_PWM_Start+0x13c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_TIM_PWM_Start+0xfa>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a12      	ldr	r2, [pc, #72]	; (80031ec <HAL_TIM_PWM_Start+0x140>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d111      	bne.n	80031ca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b06      	cmp	r3, #6
 80031b6:	d010      	beq.n	80031da <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c8:	e007      	b.n	80031da <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0201 	orr.w	r2, r2, #1
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800

080031f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d122      	bne.n	800324c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b02      	cmp	r3, #2
 8003212:	d11b      	bne.n	800324c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0202 	mvn.w	r2, #2
 800321c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fa6f 	bl	8003716 <HAL_TIM_IC_CaptureCallback>
 8003238:	e005      	b.n	8003246 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa62 	bl	8003704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fa71 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b04      	cmp	r3, #4
 8003258:	d122      	bne.n	80032a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b04      	cmp	r3, #4
 8003266:	d11b      	bne.n	80032a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0204 	mvn.w	r2, #4
 8003270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2202      	movs	r2, #2
 8003276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa45 	bl	8003716 <HAL_TIM_IC_CaptureCallback>
 800328c:	e005      	b.n	800329a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa38 	bl	8003704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fa47 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d122      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d11b      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0208 	mvn.w	r2, #8
 80032c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2204      	movs	r2, #4
 80032ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa1b 	bl	8003716 <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fa0e 	bl	8003704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fa1d 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d122      	bne.n	8003348 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b10      	cmp	r3, #16
 800330e:	d11b      	bne.n	8003348 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0210 	mvn.w	r2, #16
 8003318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2208      	movs	r2, #8
 800331e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9f1 	bl	8003716 <HAL_TIM_IC_CaptureCallback>
 8003334:	e005      	b.n	8003342 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f9e4 	bl	8003704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f9f3 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10e      	bne.n	8003374 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d107      	bne.n	8003374 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0201 	mvn.w	r2, #1
 800336c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fa12 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b80      	cmp	r3, #128	; 0x80
 8003380:	d10e      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d107      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fce1 	bl	8003d62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d10e      	bne.n	80033cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b40      	cmp	r3, #64	; 0x40
 80033ba:	d107      	bne.n	80033cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f9b7 	bl	800373a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d10e      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d107      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0220 	mvn.w	r2, #32
 80033f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fcac 	bl	8003d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003416:	2302      	movs	r3, #2
 8003418:	e0ac      	b.n	8003574 <HAL_TIM_PWM_ConfigChannel+0x174>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b0c      	cmp	r3, #12
 8003426:	f200 809f 	bhi.w	8003568 <HAL_TIM_PWM_ConfigChannel+0x168>
 800342a:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	08003465 	.word	0x08003465
 8003434:	08003569 	.word	0x08003569
 8003438:	08003569 	.word	0x08003569
 800343c:	08003569 	.word	0x08003569
 8003440:	080034a5 	.word	0x080034a5
 8003444:	08003569 	.word	0x08003569
 8003448:	08003569 	.word	0x08003569
 800344c:	08003569 	.word	0x08003569
 8003450:	080034e7 	.word	0x080034e7
 8003454:	08003569 	.word	0x08003569
 8003458:	08003569 	.word	0x08003569
 800345c:	08003569 	.word	0x08003569
 8003460:	08003527 	.word	0x08003527
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f9d0 	bl	8003810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0208 	orr.w	r2, r2, #8
 800347e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0204 	bic.w	r2, r2, #4
 800348e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6999      	ldr	r1, [r3, #24]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	619a      	str	r2, [r3, #24]
      break;
 80034a2:	e062      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fa16 	bl	80038dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6999      	ldr	r1, [r3, #24]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	021a      	lsls	r2, r3, #8
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]
      break;
 80034e4:	e041      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fa5f 	bl	80039b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0208 	orr.w	r2, r2, #8
 8003500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0204 	bic.w	r2, r2, #4
 8003510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69d9      	ldr	r1, [r3, #28]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	61da      	str	r2, [r3, #28]
      break;
 8003524:	e021      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 faa9 	bl	8003a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69d9      	ldr	r1, [r3, #28]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	021a      	lsls	r2, r3, #8
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	61da      	str	r2, [r3, #28]
      break;
 8003566:	e000      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003568:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_TIM_ConfigClockSource+0x18>
 8003590:	2302      	movs	r3, #2
 8003592:	e0b3      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x180>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035cc:	d03e      	beq.n	800364c <HAL_TIM_ConfigClockSource+0xd0>
 80035ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d2:	f200 8087 	bhi.w	80036e4 <HAL_TIM_ConfigClockSource+0x168>
 80035d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035da:	f000 8085 	beq.w	80036e8 <HAL_TIM_ConfigClockSource+0x16c>
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e2:	d87f      	bhi.n	80036e4 <HAL_TIM_ConfigClockSource+0x168>
 80035e4:	2b70      	cmp	r3, #112	; 0x70
 80035e6:	d01a      	beq.n	800361e <HAL_TIM_ConfigClockSource+0xa2>
 80035e8:	2b70      	cmp	r3, #112	; 0x70
 80035ea:	d87b      	bhi.n	80036e4 <HAL_TIM_ConfigClockSource+0x168>
 80035ec:	2b60      	cmp	r3, #96	; 0x60
 80035ee:	d050      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0x116>
 80035f0:	2b60      	cmp	r3, #96	; 0x60
 80035f2:	d877      	bhi.n	80036e4 <HAL_TIM_ConfigClockSource+0x168>
 80035f4:	2b50      	cmp	r3, #80	; 0x50
 80035f6:	d03c      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0xf6>
 80035f8:	2b50      	cmp	r3, #80	; 0x50
 80035fa:	d873      	bhi.n	80036e4 <HAL_TIM_ConfigClockSource+0x168>
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	d058      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0x136>
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d86f      	bhi.n	80036e4 <HAL_TIM_ConfigClockSource+0x168>
 8003604:	2b30      	cmp	r3, #48	; 0x30
 8003606:	d064      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x156>
 8003608:	2b30      	cmp	r3, #48	; 0x30
 800360a:	d86b      	bhi.n	80036e4 <HAL_TIM_ConfigClockSource+0x168>
 800360c:	2b20      	cmp	r3, #32
 800360e:	d060      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x156>
 8003610:	2b20      	cmp	r3, #32
 8003612:	d867      	bhi.n	80036e4 <HAL_TIM_ConfigClockSource+0x168>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d05c      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x156>
 8003618:	2b10      	cmp	r3, #16
 800361a:	d05a      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800361c:	e062      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	6899      	ldr	r1, [r3, #8]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f000 faee 	bl	8003c0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003640:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	609a      	str	r2, [r3, #8]
      break;
 800364a:	e04e      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	6899      	ldr	r1, [r3, #8]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f000 fad7 	bl	8003c0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800366e:	609a      	str	r2, [r3, #8]
      break;
 8003670:	e03b      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6859      	ldr	r1, [r3, #4]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	461a      	mov	r2, r3
 8003680:	f000 fa4e 	bl	8003b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2150      	movs	r1, #80	; 0x50
 800368a:	4618      	mov	r0, r3
 800368c:	f000 faa5 	bl	8003bda <TIM_ITRx_SetConfig>
      break;
 8003690:	e02b      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	461a      	mov	r2, r3
 80036a0:	f000 fa6c 	bl	8003b7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2160      	movs	r1, #96	; 0x60
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fa95 	bl	8003bda <TIM_ITRx_SetConfig>
      break;
 80036b0:	e01b      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	461a      	mov	r2, r3
 80036c0:	f000 fa2e 	bl	8003b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2140      	movs	r1, #64	; 0x40
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fa85 	bl	8003bda <TIM_ITRx_SetConfig>
      break;
 80036d0:	e00b      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4619      	mov	r1, r3
 80036dc:	4610      	mov	r0, r2
 80036de:	f000 fa7c 	bl	8003bda <TIM_ITRx_SetConfig>
        break;
 80036e2:	e002      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036e4:	bf00      	nop
 80036e6:	e000      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a29      	ldr	r2, [pc, #164]	; (8003804 <TIM_Base_SetConfig+0xb8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00b      	beq.n	800377c <TIM_Base_SetConfig+0x30>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376a:	d007      	beq.n	800377c <TIM_Base_SetConfig+0x30>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a26      	ldr	r2, [pc, #152]	; (8003808 <TIM_Base_SetConfig+0xbc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_Base_SetConfig+0x30>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a25      	ldr	r2, [pc, #148]	; (800380c <TIM_Base_SetConfig+0xc0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d108      	bne.n	800378e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a1c      	ldr	r2, [pc, #112]	; (8003804 <TIM_Base_SetConfig+0xb8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <TIM_Base_SetConfig+0x62>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379c:	d007      	beq.n	80037ae <TIM_Base_SetConfig+0x62>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a19      	ldr	r2, [pc, #100]	; (8003808 <TIM_Base_SetConfig+0xbc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_Base_SetConfig+0x62>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a18      	ldr	r2, [pc, #96]	; (800380c <TIM_Base_SetConfig+0xc0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d108      	bne.n	80037c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a07      	ldr	r2, [pc, #28]	; (8003804 <TIM_Base_SetConfig+0xb8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d103      	bne.n	80037f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	615a      	str	r2, [r3, #20]
}
 80037fa:	bf00      	nop
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800

08003810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f023 0201 	bic.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f023 0302 	bic.w	r3, r3, #2
 8003858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <TIM_OC1_SetConfig+0xc8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d10c      	bne.n	8003886 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0308 	bic.w	r3, r3, #8
 8003872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <TIM_OC1_SetConfig+0xc8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d111      	bne.n	80038b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800389c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	621a      	str	r2, [r3, #32]
}
 80038cc:	bf00      	nop
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40012c00 	.word	0x40012c00

080038dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f023 0210 	bic.w	r2, r3, #16
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f023 0320 	bic.w	r3, r3, #32
 8003926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <TIM_OC2_SetConfig+0xd0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d10d      	bne.n	8003958 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003956:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a14      	ldr	r2, [pc, #80]	; (80039ac <TIM_OC2_SetConfig+0xd0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d113      	bne.n	8003988 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr
 80039ac:	40012c00 	.word	0x40012c00

080039b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0303 	bic.w	r3, r3, #3
 80039e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <TIM_OC3_SetConfig+0xd0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10d      	bne.n	8003a2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <TIM_OC3_SetConfig+0xd0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d113      	bne.n	8003a5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	621a      	str	r2, [r3, #32]
}
 8003a74:	bf00      	nop
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40012c00 	.word	0x40012c00

08003a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	031b      	lsls	r3, r3, #12
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a0f      	ldr	r2, [pc, #60]	; (8003b1c <TIM_OC4_SetConfig+0x98>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d109      	bne.n	8003af8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	019b      	lsls	r3, r3, #6
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	621a      	str	r2, [r3, #32]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	40012c00 	.word	0x40012c00

08003b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f023 0201 	bic.w	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f023 030a 	bic.w	r3, r3, #10
 8003b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	621a      	str	r2, [r3, #32]
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f023 0210 	bic.w	r2, r3, #16
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ba6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	031b      	lsls	r3, r3, #12
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	621a      	str	r2, [r3, #32]
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b085      	sub	sp, #20
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f043 0307 	orr.w	r3, r3, #7
 8003bfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	609a      	str	r2, [r3, #8]
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b087      	sub	sp, #28
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	021a      	lsls	r2, r3, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	609a      	str	r2, [r3, #8]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	2201      	movs	r2, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1a      	ldr	r2, [r3, #32]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	fa01 f303 	lsl.w	r3, r1, r3
 8003c84:	431a      	orrs	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	621a      	str	r2, [r3, #32]
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e046      	b.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf8:	d009      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a12      	ldr	r2, [pc, #72]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a10      	ldr	r2, [pc, #64]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d10c      	bne.n	8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40000800 	.word	0x40000800

08003d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d86:	2b84      	cmp	r3, #132	; 0x84
 8003d88:	d005      	beq.n	8003d96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4413      	add	r3, r2
 8003d92:	3303      	adds	r3, #3
 8003d94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d96:	68fb      	ldr	r3, [r7, #12]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003da6:	f000 fad1 	bl	800434c <vTaskStartScheduler>
  
  return osOK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af04      	add	r7, sp, #16
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d020      	beq.n	8003e04 <osThreadCreate+0x54>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01c      	beq.n	8003e04 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685c      	ldr	r4, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681d      	ldr	r5, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691e      	ldr	r6, [r3, #16]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ffc9 	bl	8003d74 <makeFreeRtosPriority>
 8003de2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dec:	9202      	str	r2, [sp, #8]
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	9100      	str	r1, [sp, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	4632      	mov	r2, r6
 8003df6:	4629      	mov	r1, r5
 8003df8:	4620      	mov	r0, r4
 8003dfa:	f000 f8e8 	bl	8003fce <xTaskCreateStatic>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e01c      	b.n	8003e3e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685c      	ldr	r4, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e10:	b29e      	uxth	r6, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ffab 	bl	8003d74 <makeFreeRtosPriority>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	f107 030c 	add.w	r3, r7, #12
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	9200      	str	r2, [sp, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	4632      	mov	r2, r6
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f000 f929 	bl	8004086 <xTaskCreate>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d001      	beq.n	8003e3e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e000      	b.n	8003e40 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e48 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <osDelay+0x16>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	e000      	b.n	8003e60 <osDelay+0x18>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fa3f 	bl	80042e4 <vTaskDelay>
  
  return osOK;
 8003e66:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f103 0208 	add.w	r2, r3, #8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f04f 32ff 	mov.w	r2, #4294967295
 8003e88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f103 0208 	add.w	r2, r3, #8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f103 0208 	add.w	r2, r3, #8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d103      	bne.n	8003f2c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	e00c      	b.n	8003f46 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	e002      	b.n	8003f3a <vListInsert+0x2e>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d2f6      	bcs.n	8003f34 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6892      	ldr	r2, [r2, #8]
 8003f92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6852      	ldr	r2, [r2, #4]
 8003f9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d103      	bne.n	8003fb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	1e5a      	subs	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b08e      	sub	sp, #56	; 0x38
 8003fd2:	af04      	add	r7, sp, #16
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ff4:	bf00      	nop
 8003ff6:	e7fe      	b.n	8003ff6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <xTaskCreateStatic+0x46>
	__asm volatile
 8003ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	61fb      	str	r3, [r7, #28]
}
 8004010:	bf00      	nop
 8004012:	e7fe      	b.n	8004012 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004014:	2354      	movs	r3, #84	; 0x54
 8004016:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b54      	cmp	r3, #84	; 0x54
 800401c:	d00a      	beq.n	8004034 <xTaskCreateStatic+0x66>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	61bb      	str	r3, [r7, #24]
}
 8004030:	bf00      	nop
 8004032:	e7fe      	b.n	8004032 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01e      	beq.n	8004078 <xTaskCreateStatic+0xaa>
 800403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01b      	beq.n	8004078 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004048:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	2202      	movs	r2, #2
 800404e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004052:	2300      	movs	r3, #0
 8004054:	9303      	str	r3, [sp, #12]
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	9302      	str	r3, [sp, #8]
 800405a:	f107 0314 	add.w	r3, r7, #20
 800405e:	9301      	str	r3, [sp, #4]
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68b9      	ldr	r1, [r7, #8]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f850 	bl	8004110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004072:	f000 f8cd 	bl	8004210 <prvAddNewTaskToReadyList>
 8004076:	e001      	b.n	800407c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800407c:	697b      	ldr	r3, [r7, #20]
	}
 800407e:	4618      	mov	r0, r3
 8004080:	3728      	adds	r7, #40	; 0x28
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004086:	b580      	push	{r7, lr}
 8004088:	b08c      	sub	sp, #48	; 0x30
 800408a:	af04      	add	r7, sp, #16
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	4613      	mov	r3, r2
 8004094:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fe68 	bl	8004d70 <pvPortMalloc>
 80040a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80040a8:	2054      	movs	r0, #84	; 0x54
 80040aa:	f000 fe61 	bl	8004d70 <pvPortMalloc>
 80040ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
 80040bc:	e005      	b.n	80040ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040be:	6978      	ldr	r0, [r7, #20]
 80040c0:	f000 ff1a 	bl	8004ef8 <vPortFree>
 80040c4:	e001      	b.n	80040ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d017      	beq.n	8004100 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040d8:	88fa      	ldrh	r2, [r7, #6]
 80040da:	2300      	movs	r3, #0
 80040dc:	9303      	str	r3, [sp, #12]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	9302      	str	r3, [sp, #8]
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f80e 	bl	8004110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040f4:	69f8      	ldr	r0, [r7, #28]
 80040f6:	f000 f88b 	bl	8004210 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040fa:	2301      	movs	r3, #1
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	e002      	b.n	8004106 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004100:	f04f 33ff 	mov.w	r3, #4294967295
 8004104:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004106:	69bb      	ldr	r3, [r7, #24]
	}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004128:	3b01      	subs	r3, #1
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f023 0307 	bic.w	r3, r3, #7
 8004136:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	617b      	str	r3, [r7, #20]
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	e012      	b.n	8004184 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	4413      	add	r3, r2
 8004164:	7819      	ldrb	r1, [r3, #0]
 8004166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	4413      	add	r3, r2
 800416c:	3334      	adds	r3, #52	; 0x34
 800416e:	460a      	mov	r2, r1
 8004170:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	4413      	add	r3, r2
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d006      	beq.n	800418c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3301      	adds	r3, #1
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b0f      	cmp	r3, #15
 8004188:	d9e9      	bls.n	800415e <prvInitialiseNewTask+0x4e>
 800418a:	e000      	b.n	800418e <prvInitialiseNewTask+0x7e>
		{
			break;
 800418c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2b06      	cmp	r3, #6
 800419a:	d901      	bls.n	80041a0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800419c:	2306      	movs	r3, #6
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	2200      	movs	r2, #0
 80041b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	3304      	adds	r3, #4
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fe79 	bl	8003eae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	3318      	adds	r3, #24
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fe74 	bl	8003eae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	f1c3 0207 	rsb	r2, r3, #7
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	2200      	movs	r2, #0
 80041e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	68f9      	ldr	r1, [r7, #12]
 80041ee:	69b8      	ldr	r0, [r7, #24]
 80041f0:	f000 fc0e 	bl	8004a10 <pxPortInitialiseStack>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004206:	bf00      	nop
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004218:	f000 fce8 	bl	8004bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800421c:	4b2a      	ldr	r3, [pc, #168]	; (80042c8 <prvAddNewTaskToReadyList+0xb8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3301      	adds	r3, #1
 8004222:	4a29      	ldr	r2, [pc, #164]	; (80042c8 <prvAddNewTaskToReadyList+0xb8>)
 8004224:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004226:	4b29      	ldr	r3, [pc, #164]	; (80042cc <prvAddNewTaskToReadyList+0xbc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800422e:	4a27      	ldr	r2, [pc, #156]	; (80042cc <prvAddNewTaskToReadyList+0xbc>)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004234:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <prvAddNewTaskToReadyList+0xb8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d110      	bne.n	800425e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800423c:	f000 fac0 	bl	80047c0 <prvInitialiseTaskLists>
 8004240:	e00d      	b.n	800425e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004242:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <prvAddNewTaskToReadyList+0xc0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800424a:	4b20      	ldr	r3, [pc, #128]	; (80042cc <prvAddNewTaskToReadyList+0xbc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	429a      	cmp	r2, r3
 8004256:	d802      	bhi.n	800425e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004258:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <prvAddNewTaskToReadyList+0xbc>)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800425e:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <prvAddNewTaskToReadyList+0xc4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3301      	adds	r3, #1
 8004264:	4a1b      	ldr	r2, [pc, #108]	; (80042d4 <prvAddNewTaskToReadyList+0xc4>)
 8004266:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	2201      	movs	r2, #1
 800426e:	409a      	lsls	r2, r3
 8004270:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <prvAddNewTaskToReadyList+0xc8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4313      	orrs	r3, r2
 8004276:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <prvAddNewTaskToReadyList+0xc8>)
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4a15      	ldr	r2, [pc, #84]	; (80042dc <prvAddNewTaskToReadyList+0xcc>)
 8004288:	441a      	add	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3304      	adds	r3, #4
 800428e:	4619      	mov	r1, r3
 8004290:	4610      	mov	r0, r2
 8004292:	f7ff fe18 	bl	8003ec6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004296:	f000 fcd9 	bl	8004c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <prvAddNewTaskToReadyList+0xc0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00e      	beq.n	80042c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <prvAddNewTaskToReadyList+0xbc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d207      	bcs.n	80042c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <prvAddNewTaskToReadyList+0xd0>)
 80042b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000538 	.word	0x20000538
 80042cc:	20000438 	.word	0x20000438
 80042d0:	20000544 	.word	0x20000544
 80042d4:	20000554 	.word	0x20000554
 80042d8:	20000540 	.word	0x20000540
 80042dc:	2000043c 	.word	0x2000043c
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d017      	beq.n	8004326 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042f6:	4b13      	ldr	r3, [pc, #76]	; (8004344 <vTaskDelay+0x60>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <vTaskDelay+0x30>
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	60bb      	str	r3, [r7, #8]
}
 8004310:	bf00      	nop
 8004312:	e7fe      	b.n	8004312 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004314:	f000 f87a 	bl	800440c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004318:	2100      	movs	r1, #0
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fb12 	bl	8004944 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004320:	f000 f882 	bl	8004428 <xTaskResumeAll>
 8004324:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d107      	bne.n	800433c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <vTaskDelay+0x64>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000560 	.word	0x20000560
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08a      	sub	sp, #40	; 0x28
 8004350:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004356:	2300      	movs	r3, #0
 8004358:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800435a:	463a      	mov	r2, r7
 800435c:	1d39      	adds	r1, r7, #4
 800435e:	f107 0308 	add.w	r3, r7, #8
 8004362:	4618      	mov	r0, r3
 8004364:	f7fb ff66 	bl	8000234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004368:	6839      	ldr	r1, [r7, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	9202      	str	r2, [sp, #8]
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	2300      	movs	r3, #0
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	2300      	movs	r3, #0
 8004378:	460a      	mov	r2, r1
 800437a:	491e      	ldr	r1, [pc, #120]	; (80043f4 <vTaskStartScheduler+0xa8>)
 800437c:	481e      	ldr	r0, [pc, #120]	; (80043f8 <vTaskStartScheduler+0xac>)
 800437e:	f7ff fe26 	bl	8003fce <xTaskCreateStatic>
 8004382:	4603      	mov	r3, r0
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <vTaskStartScheduler+0xb0>)
 8004386:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004388:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <vTaskStartScheduler+0xb0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004390:	2301      	movs	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e001      	b.n	800439a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d116      	bne.n	80043ce <vTaskStartScheduler+0x82>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	613b      	str	r3, [r7, #16]
}
 80043b2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043b4:	4b12      	ldr	r3, [pc, #72]	; (8004400 <vTaskStartScheduler+0xb4>)
 80043b6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <vTaskStartScheduler+0xb8>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <vTaskStartScheduler+0xbc>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043c8:	f000 fb9e 	bl	8004b08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043cc:	e00e      	b.n	80043ec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d10a      	bne.n	80043ec <vTaskStartScheduler+0xa0>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	60fb      	str	r3, [r7, #12]
}
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <vTaskStartScheduler+0x9e>
}
 80043ec:	bf00      	nop
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	080051f0 	.word	0x080051f0
 80043f8:	08004791 	.word	0x08004791
 80043fc:	2000055c 	.word	0x2000055c
 8004400:	20000558 	.word	0x20000558
 8004404:	20000544 	.word	0x20000544
 8004408:	2000053c 	.word	0x2000053c

0800440c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <vTaskSuspendAll+0x18>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	4a03      	ldr	r2, [pc, #12]	; (8004424 <vTaskSuspendAll+0x18>)
 8004418:	6013      	str	r3, [r2, #0]
}
 800441a:	bf00      	nop
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000560 	.word	0x20000560

08004428 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004436:	4b41      	ldr	r3, [pc, #260]	; (800453c <xTaskResumeAll+0x114>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <xTaskResumeAll+0x2c>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	603b      	str	r3, [r7, #0]
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004454:	f000 fbca 	bl	8004bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004458:	4b38      	ldr	r3, [pc, #224]	; (800453c <xTaskResumeAll+0x114>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3b01      	subs	r3, #1
 800445e:	4a37      	ldr	r2, [pc, #220]	; (800453c <xTaskResumeAll+0x114>)
 8004460:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004462:	4b36      	ldr	r3, [pc, #216]	; (800453c <xTaskResumeAll+0x114>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d161      	bne.n	800452e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800446a:	4b35      	ldr	r3, [pc, #212]	; (8004540 <xTaskResumeAll+0x118>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d05d      	beq.n	800452e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004472:	e02e      	b.n	80044d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004474:	4b33      	ldr	r3, [pc, #204]	; (8004544 <xTaskResumeAll+0x11c>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3318      	adds	r3, #24
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff fd7b 	bl	8003f7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3304      	adds	r3, #4
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fd76 	bl	8003f7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	2201      	movs	r2, #1
 8004496:	409a      	lsls	r2, r3
 8004498:	4b2b      	ldr	r3, [pc, #172]	; (8004548 <xTaskResumeAll+0x120>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4313      	orrs	r3, r2
 800449e:	4a2a      	ldr	r2, [pc, #168]	; (8004548 <xTaskResumeAll+0x120>)
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4a27      	ldr	r2, [pc, #156]	; (800454c <xTaskResumeAll+0x124>)
 80044b0:	441a      	add	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4619      	mov	r1, r3
 80044b8:	4610      	mov	r0, r2
 80044ba:	f7ff fd04 	bl	8003ec6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c2:	4b23      	ldr	r3, [pc, #140]	; (8004550 <xTaskResumeAll+0x128>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d302      	bcc.n	80044d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80044cc:	4b21      	ldr	r3, [pc, #132]	; (8004554 <xTaskResumeAll+0x12c>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044d2:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <xTaskResumeAll+0x11c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1cc      	bne.n	8004474 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044e0:	f000 fa0c 	bl	80048fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044e4:	4b1c      	ldr	r3, [pc, #112]	; (8004558 <xTaskResumeAll+0x130>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d010      	beq.n	8004512 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044f0:	f000 f836 	bl	8004560 <xTaskIncrementTick>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80044fa:	4b16      	ldr	r3, [pc, #88]	; (8004554 <xTaskResumeAll+0x12c>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3b01      	subs	r3, #1
 8004504:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f1      	bne.n	80044f0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800450c:	4b12      	ldr	r3, [pc, #72]	; (8004558 <xTaskResumeAll+0x130>)
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004512:	4b10      	ldr	r3, [pc, #64]	; (8004554 <xTaskResumeAll+0x12c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800451a:	2301      	movs	r3, #1
 800451c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800451e:	4b0f      	ldr	r3, [pc, #60]	; (800455c <xTaskResumeAll+0x134>)
 8004520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800452e:	f000 fb8d 	bl	8004c4c <vPortExitCritical>

	return xAlreadyYielded;
 8004532:	68bb      	ldr	r3, [r7, #8]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000560 	.word	0x20000560
 8004540:	20000538 	.word	0x20000538
 8004544:	200004f8 	.word	0x200004f8
 8004548:	20000540 	.word	0x20000540
 800454c:	2000043c 	.word	0x2000043c
 8004550:	20000438 	.word	0x20000438
 8004554:	2000054c 	.word	0x2000054c
 8004558:	20000548 	.word	0x20000548
 800455c:	e000ed04 	.word	0xe000ed04

08004560 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800456a:	4b51      	ldr	r3, [pc, #324]	; (80046b0 <xTaskIncrementTick+0x150>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f040 808d 	bne.w	800468e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004574:	4b4f      	ldr	r3, [pc, #316]	; (80046b4 <xTaskIncrementTick+0x154>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3301      	adds	r3, #1
 800457a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800457c:	4a4d      	ldr	r2, [pc, #308]	; (80046b4 <xTaskIncrementTick+0x154>)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d120      	bne.n	80045ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004588:	4b4b      	ldr	r3, [pc, #300]	; (80046b8 <xTaskIncrementTick+0x158>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	603b      	str	r3, [r7, #0]
}
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <xTaskIncrementTick+0x46>
 80045a8:	4b43      	ldr	r3, [pc, #268]	; (80046b8 <xTaskIncrementTick+0x158>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	4b43      	ldr	r3, [pc, #268]	; (80046bc <xTaskIncrementTick+0x15c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a41      	ldr	r2, [pc, #260]	; (80046b8 <xTaskIncrementTick+0x158>)
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	4a41      	ldr	r2, [pc, #260]	; (80046bc <xTaskIncrementTick+0x15c>)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b40      	ldr	r3, [pc, #256]	; (80046c0 <xTaskIncrementTick+0x160>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3301      	adds	r3, #1
 80045c2:	4a3f      	ldr	r2, [pc, #252]	; (80046c0 <xTaskIncrementTick+0x160>)
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	f000 f999 	bl	80048fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045ca:	4b3e      	ldr	r3, [pc, #248]	; (80046c4 <xTaskIncrementTick+0x164>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d34d      	bcc.n	8004670 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045d4:	4b38      	ldr	r3, [pc, #224]	; (80046b8 <xTaskIncrementTick+0x158>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <xTaskIncrementTick+0x82>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <xTaskIncrementTick+0x84>
 80045e2:	2300      	movs	r3, #0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d004      	beq.n	80045f2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e8:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <xTaskIncrementTick+0x164>)
 80045ea:	f04f 32ff 	mov.w	r2, #4294967295
 80045ee:	601a      	str	r2, [r3, #0]
					break;
 80045f0:	e03e      	b.n	8004670 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045f2:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <xTaskIncrementTick+0x158>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	429a      	cmp	r2, r3
 8004608:	d203      	bcs.n	8004612 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800460a:	4a2e      	ldr	r2, [pc, #184]	; (80046c4 <xTaskIncrementTick+0x164>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6013      	str	r3, [r2, #0]
						break;
 8004610:	e02e      	b.n	8004670 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	3304      	adds	r3, #4
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fcb0 	bl	8003f7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	3318      	adds	r3, #24
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff fca7 	bl	8003f7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	2201      	movs	r2, #1
 8004634:	409a      	lsls	r2, r3
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <xTaskIncrementTick+0x168>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4313      	orrs	r3, r2
 800463c:	4a22      	ldr	r2, [pc, #136]	; (80046c8 <xTaskIncrementTick+0x168>)
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <xTaskIncrementTick+0x16c>)
 800464e:	441a      	add	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	3304      	adds	r3, #4
 8004654:	4619      	mov	r1, r3
 8004656:	4610      	mov	r0, r2
 8004658:	f7ff fc35 	bl	8003ec6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <xTaskIncrementTick+0x170>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	429a      	cmp	r2, r3
 8004668:	d3b4      	bcc.n	80045d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800466a:	2301      	movs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800466e:	e7b1      	b.n	80045d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004670:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <xTaskIncrementTick+0x170>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004676:	4915      	ldr	r1, [pc, #84]	; (80046cc <xTaskIncrementTick+0x16c>)
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d907      	bls.n	8004698 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004688:	2301      	movs	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	e004      	b.n	8004698 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <xTaskIncrementTick+0x174>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3301      	adds	r3, #1
 8004694:	4a0f      	ldr	r2, [pc, #60]	; (80046d4 <xTaskIncrementTick+0x174>)
 8004696:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <xTaskIncrementTick+0x178>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80046a0:	2301      	movs	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046a4:	697b      	ldr	r3, [r7, #20]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000560 	.word	0x20000560
 80046b4:	2000053c 	.word	0x2000053c
 80046b8:	200004f0 	.word	0x200004f0
 80046bc:	200004f4 	.word	0x200004f4
 80046c0:	20000550 	.word	0x20000550
 80046c4:	20000558 	.word	0x20000558
 80046c8:	20000540 	.word	0x20000540
 80046cc:	2000043c 	.word	0x2000043c
 80046d0:	20000438 	.word	0x20000438
 80046d4:	20000548 	.word	0x20000548
 80046d8:	2000054c 	.word	0x2000054c

080046dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046e2:	4b26      	ldr	r3, [pc, #152]	; (800477c <vTaskSwitchContext+0xa0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046ea:	4b25      	ldr	r3, [pc, #148]	; (8004780 <vTaskSwitchContext+0xa4>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046f0:	e03f      	b.n	8004772 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80046f2:	4b23      	ldr	r3, [pc, #140]	; (8004780 <vTaskSwitchContext+0xa4>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80046f8:	4b22      	ldr	r3, [pc, #136]	; (8004784 <vTaskSwitchContext+0xa8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	fab3 f383 	clz	r3, r3
 8004704:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004706:	7afb      	ldrb	r3, [r7, #11]
 8004708:	f1c3 031f 	rsb	r3, r3, #31
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	491e      	ldr	r1, [pc, #120]	; (8004788 <vTaskSwitchContext+0xac>)
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	607b      	str	r3, [r7, #4]
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <vTaskSwitchContext+0x5a>
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4a11      	ldr	r2, [pc, #68]	; (8004788 <vTaskSwitchContext+0xac>)
 8004744:	4413      	add	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	3308      	adds	r3, #8
 800475a:	429a      	cmp	r2, r3
 800475c:	d104      	bne.n	8004768 <vTaskSwitchContext+0x8c>
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	605a      	str	r2, [r3, #4]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	4a07      	ldr	r2, [pc, #28]	; (800478c <vTaskSwitchContext+0xb0>)
 8004770:	6013      	str	r3, [r2, #0]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	20000560 	.word	0x20000560
 8004780:	2000054c 	.word	0x2000054c
 8004784:	20000540 	.word	0x20000540
 8004788:	2000043c 	.word	0x2000043c
 800478c:	20000438 	.word	0x20000438

08004790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004798:	f000 f852 	bl	8004840 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <prvIdleTask+0x28>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d9f9      	bls.n	8004798 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <prvIdleTask+0x2c>)
 80047a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047b4:	e7f0      	b.n	8004798 <prvIdleTask+0x8>
 80047b6:	bf00      	nop
 80047b8:	2000043c 	.word	0x2000043c
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047c6:	2300      	movs	r3, #0
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	e00c      	b.n	80047e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4a12      	ldr	r2, [pc, #72]	; (8004820 <prvInitialiseTaskLists+0x60>)
 80047d8:	4413      	add	r3, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fb48 	bl	8003e70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3301      	adds	r3, #1
 80047e4:	607b      	str	r3, [r7, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b06      	cmp	r3, #6
 80047ea:	d9ef      	bls.n	80047cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047ec:	480d      	ldr	r0, [pc, #52]	; (8004824 <prvInitialiseTaskLists+0x64>)
 80047ee:	f7ff fb3f 	bl	8003e70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047f2:	480d      	ldr	r0, [pc, #52]	; (8004828 <prvInitialiseTaskLists+0x68>)
 80047f4:	f7ff fb3c 	bl	8003e70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047f8:	480c      	ldr	r0, [pc, #48]	; (800482c <prvInitialiseTaskLists+0x6c>)
 80047fa:	f7ff fb39 	bl	8003e70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047fe:	480c      	ldr	r0, [pc, #48]	; (8004830 <prvInitialiseTaskLists+0x70>)
 8004800:	f7ff fb36 	bl	8003e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004804:	480b      	ldr	r0, [pc, #44]	; (8004834 <prvInitialiseTaskLists+0x74>)
 8004806:	f7ff fb33 	bl	8003e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <prvInitialiseTaskLists+0x78>)
 800480c:	4a05      	ldr	r2, [pc, #20]	; (8004824 <prvInitialiseTaskLists+0x64>)
 800480e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004810:	4b0a      	ldr	r3, [pc, #40]	; (800483c <prvInitialiseTaskLists+0x7c>)
 8004812:	4a05      	ldr	r2, [pc, #20]	; (8004828 <prvInitialiseTaskLists+0x68>)
 8004814:	601a      	str	r2, [r3, #0]
}
 8004816:	bf00      	nop
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	2000043c 	.word	0x2000043c
 8004824:	200004c8 	.word	0x200004c8
 8004828:	200004dc 	.word	0x200004dc
 800482c:	200004f8 	.word	0x200004f8
 8004830:	2000050c 	.word	0x2000050c
 8004834:	20000524 	.word	0x20000524
 8004838:	200004f0 	.word	0x200004f0
 800483c:	200004f4 	.word	0x200004f4

08004840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004846:	e019      	b.n	800487c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004848:	f000 f9d0 	bl	8004bec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800484c:	4b10      	ldr	r3, [pc, #64]	; (8004890 <prvCheckTasksWaitingTermination+0x50>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3304      	adds	r3, #4
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff fb8f 	bl	8003f7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800485e:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <prvCheckTasksWaitingTermination+0x54>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3b01      	subs	r3, #1
 8004864:	4a0b      	ldr	r2, [pc, #44]	; (8004894 <prvCheckTasksWaitingTermination+0x54>)
 8004866:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <prvCheckTasksWaitingTermination+0x58>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3b01      	subs	r3, #1
 800486e:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <prvCheckTasksWaitingTermination+0x58>)
 8004870:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004872:	f000 f9eb 	bl	8004c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f810 	bl	800489c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <prvCheckTasksWaitingTermination+0x58>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e1      	bne.n	8004848 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	2000050c 	.word	0x2000050c
 8004894:	20000538 	.word	0x20000538
 8004898:	20000520 	.word	0x20000520

0800489c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d108      	bne.n	80048c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fb20 	bl	8004ef8 <vPortFree>
				vPortFree( pxTCB );
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fb1d 	bl	8004ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048be:	e018      	b.n	80048f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d103      	bne.n	80048d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fb14 	bl	8004ef8 <vPortFree>
	}
 80048d0:	e00f      	b.n	80048f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d00a      	beq.n	80048f2 <prvDeleteTCB+0x56>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	60fb      	str	r3, [r7, #12]
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <prvDeleteTCB+0x54>
	}
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004902:	4b0e      	ldr	r3, [pc, #56]	; (800493c <prvResetNextTaskUnblockTime+0x40>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <prvResetNextTaskUnblockTime+0x14>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <prvResetNextTaskUnblockTime+0x16>
 8004910:	2300      	movs	r3, #0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d004      	beq.n	8004920 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004916:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <prvResetNextTaskUnblockTime+0x44>)
 8004918:	f04f 32ff 	mov.w	r2, #4294967295
 800491c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800491e:	e008      	b.n	8004932 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004920:	4b06      	ldr	r3, [pc, #24]	; (800493c <prvResetNextTaskUnblockTime+0x40>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4a04      	ldr	r2, [pc, #16]	; (8004940 <prvResetNextTaskUnblockTime+0x44>)
 8004930:	6013      	str	r3, [r2, #0]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr
 800493c:	200004f0 	.word	0x200004f0
 8004940:	20000558 	.word	0x20000558

08004944 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800494e:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004954:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3304      	adds	r3, #4
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fb0e 	bl	8003f7c <uxListRemove>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10b      	bne.n	800497e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004966:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	2201      	movs	r2, #1
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43da      	mvns	r2, r3
 8004974:	4b21      	ldr	r3, [pc, #132]	; (80049fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4013      	ands	r3, r2
 800497a:	4a20      	ldr	r2, [pc, #128]	; (80049fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800497c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d10a      	bne.n	800499c <prvAddCurrentTaskToDelayedList+0x58>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800498c:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	481a      	ldr	r0, [pc, #104]	; (8004a00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004996:	f7ff fa96 	bl	8003ec6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800499a:	e026      	b.n	80049ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4413      	add	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049a4:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d209      	bcs.n	80049c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049b4:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <prvAddCurrentTaskToDelayedList+0xc0>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3304      	adds	r3, #4
 80049be:	4619      	mov	r1, r3
 80049c0:	4610      	mov	r0, r2
 80049c2:	f7ff faa3 	bl	8003f0c <vListInsert>
}
 80049c6:	e010      	b.n	80049ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <prvAddCurrentTaskToDelayedList+0xc4>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3304      	adds	r3, #4
 80049d2:	4619      	mov	r1, r3
 80049d4:	4610      	mov	r0, r2
 80049d6:	f7ff fa99 	bl	8003f0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049da:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d202      	bcs.n	80049ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049e4:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	6013      	str	r3, [r2, #0]
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	2000053c 	.word	0x2000053c
 80049f8:	20000438 	.word	0x20000438
 80049fc:	20000540 	.word	0x20000540
 8004a00:	20000524 	.word	0x20000524
 8004a04:	200004f4 	.word	0x200004f4
 8004a08:	200004f0 	.word	0x200004f0
 8004a0c:	20000558 	.word	0x20000558

08004a10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3b04      	subs	r3, #4
 8004a20:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3b04      	subs	r3, #4
 8004a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f023 0201 	bic.w	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3b04      	subs	r3, #4
 8004a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a40:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <pxPortInitialiseStack+0x54>)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3b14      	subs	r3, #20
 8004a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3b20      	subs	r3, #32
 8004a56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a58:	68fb      	ldr	r3, [r7, #12]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr
 8004a64:	08004a69 	.word	0x08004a69

08004a68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <prvTaskExitError+0x54>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d00a      	beq.n	8004a92 <prvTaskExitError+0x2a>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	60fb      	str	r3, [r7, #12]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <prvTaskExitError+0x28>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	60bb      	str	r3, [r7, #8]
}
 8004aa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004aa6:	bf00      	nop
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0fc      	beq.n	8004aa8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	2000000c 	.word	0x2000000c

08004ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <pxCurrentTCBConst2>)
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	6808      	ldr	r0, [r1, #0]
 8004ac6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004aca:	f380 8809 	msr	PSP, r0
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f380 8811 	msr	BASEPRI, r0
 8004ada:	f04e 0e0d 	orr.w	lr, lr, #13
 8004ade:	4770      	bx	lr

08004ae0 <pxCurrentTCBConst2>:
 8004ae0:	20000438 	.word	0x20000438
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop

08004ae8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ae8:	4806      	ldr	r0, [pc, #24]	; (8004b04 <prvPortStartFirstTask+0x1c>)
 8004aea:	6800      	ldr	r0, [r0, #0]
 8004aec:	6800      	ldr	r0, [r0, #0]
 8004aee:	f380 8808 	msr	MSP, r0
 8004af2:	b662      	cpsie	i
 8004af4:	b661      	cpsie	f
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	df00      	svc	0
 8004b00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b02:	bf00      	nop
 8004b04:	e000ed08 	.word	0xe000ed08

08004b08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b0e:	4b32      	ldr	r3, [pc, #200]	; (8004bd8 <xPortStartScheduler+0xd0>)
 8004b10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	22ff      	movs	r2, #255	; 0xff
 8004b1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b2a      	ldr	r3, [pc, #168]	; (8004bdc <xPortStartScheduler+0xd4>)
 8004b34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b36:	4b2a      	ldr	r3, [pc, #168]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b38:	2207      	movs	r2, #7
 8004b3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b3c:	e009      	b.n	8004b52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004b3e:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	4a26      	ldr	r2, [pc, #152]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	d0ef      	beq.n	8004b3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1c3 0307 	rsb	r3, r3, #7
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d00a      	beq.n	8004b80 <xPortStartScheduler+0x78>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60bb      	str	r3, [r7, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b8a:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b92:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b9e:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <xPortStartScheduler+0xdc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <xPortStartScheduler+0xdc>)
 8004ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004baa:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <xPortStartScheduler+0xdc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a0d      	ldr	r2, [pc, #52]	; (8004be4 <xPortStartScheduler+0xdc>)
 8004bb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bb6:	f000 f8b9 	bl	8004d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <xPortStartScheduler+0xe0>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bc0:	f7ff ff92 	bl	8004ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bc4:	f7ff fd8a 	bl	80046dc <vTaskSwitchContext>
	prvTaskExitError();
 8004bc8:	f7ff ff4e 	bl	8004a68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	e000e400 	.word	0xe000e400
 8004bdc:	20000564 	.word	0x20000564
 8004be0:	20000568 	.word	0x20000568
 8004be4:	e000ed20 	.word	0xe000ed20
 8004be8:	2000000c 	.word	0x2000000c

08004bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	607b      	str	r3, [r7, #4]
}
 8004c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <vPortEnterCritical+0x58>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	4a0d      	ldr	r2, [pc, #52]	; (8004c44 <vPortEnterCritical+0x58>)
 8004c0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <vPortEnterCritical+0x58>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d10f      	bne.n	8004c38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <vPortEnterCritical+0x5c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	603b      	str	r3, [r7, #0]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <vPortEnterCritical+0x4a>
	}
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	2000000c 	.word	0x2000000c
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <vPortExitCritical+0x4c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <vPortExitCritical+0x24>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	607b      	str	r3, [r7, #4]
}
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <vPortExitCritical+0x4c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <vPortExitCritical+0x4c>)
 8004c78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <vPortExitCritical+0x4c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d105      	bne.n	8004c8e <vPortExitCritical+0x42>
 8004c82:	2300      	movs	r3, #0
 8004c84:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	2000000c 	.word	0x2000000c
 8004c9c:	00000000 	.word	0x00000000

08004ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ca0:	f3ef 8009 	mrs	r0, PSP
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <pxCurrentTCBConst>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cb0:	6010      	str	r0, [r2, #0]
 8004cb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004cb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cba:	f380 8811 	msr	BASEPRI, r0
 8004cbe:	f7ff fd0d 	bl	80046dc <vTaskSwitchContext>
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f380 8811 	msr	BASEPRI, r0
 8004cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	6808      	ldr	r0, [r1, #0]
 8004cd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cd6:	f380 8809 	msr	PSP, r0
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	4770      	bx	lr

08004ce0 <pxCurrentTCBConst>:
 8004ce0:	20000438 	.word	0x20000438
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop

08004ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	607b      	str	r3, [r7, #4]
}
 8004d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d02:	f7ff fc2d 	bl	8004560 <xTaskIncrementTick>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <SysTick_Handler+0x40>)
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	2300      	movs	r3, #0
 8004d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f383 8811 	msr	BASEPRI, r3
}
 8004d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <vPortSetupTimerInterrupt+0x30>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <vPortSetupTimerInterrupt+0x34>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <vPortSetupTimerInterrupt+0x38>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a09      	ldr	r2, [pc, #36]	; (8004d68 <vPortSetupTimerInterrupt+0x3c>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	099b      	lsrs	r3, r3, #6
 8004d48:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <vPortSetupTimerInterrupt+0x40>)
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d4e:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <vPortSetupTimerInterrupt+0x30>)
 8004d50:	2207      	movs	r2, #7
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr
 8004d5c:	e000e010 	.word	0xe000e010
 8004d60:	e000e018 	.word	0xe000e018
 8004d64:	20000000 	.word	0x20000000
 8004d68:	10624dd3 	.word	0x10624dd3
 8004d6c:	e000e014 	.word	0xe000e014

08004d70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	; 0x28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d7c:	f7ff fb46 	bl	800440c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d80:	4b58      	ldr	r3, [pc, #352]	; (8004ee4 <pvPortMalloc+0x174>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d88:	f000 f910 	bl	8004fac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d8c:	4b56      	ldr	r3, [pc, #344]	; (8004ee8 <pvPortMalloc+0x178>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 808e 	bne.w	8004eb6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01d      	beq.n	8004ddc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004da0:	2208      	movs	r2, #8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4413      	add	r3, r2
 8004da6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d014      	beq.n	8004ddc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f023 0307 	bic.w	r3, r3, #7
 8004db8:	3308      	adds	r3, #8
 8004dba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <pvPortMalloc+0x6c>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	617b      	str	r3, [r7, #20]
}
 8004dd8:	bf00      	nop
 8004dda:	e7fe      	b.n	8004dda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d069      	beq.n	8004eb6 <pvPortMalloc+0x146>
 8004de2:	4b42      	ldr	r3, [pc, #264]	; (8004eec <pvPortMalloc+0x17c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d864      	bhi.n	8004eb6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dec:	4b40      	ldr	r3, [pc, #256]	; (8004ef0 <pvPortMalloc+0x180>)
 8004dee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004df0:	4b3f      	ldr	r3, [pc, #252]	; (8004ef0 <pvPortMalloc+0x180>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004df6:	e004      	b.n	8004e02 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d903      	bls.n	8004e14 <pvPortMalloc+0xa4>
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f1      	bne.n	8004df8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e14:	4b33      	ldr	r3, [pc, #204]	; (8004ee4 <pvPortMalloc+0x174>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d04b      	beq.n	8004eb6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2208      	movs	r2, #8
 8004e24:	4413      	add	r3, r2
 8004e26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	1ad2      	subs	r2, r2, r3
 8004e38:	2308      	movs	r3, #8
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d91f      	bls.n	8004e80 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4413      	add	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <pvPortMalloc+0xf8>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	613b      	str	r3, [r7, #16]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	1ad2      	subs	r2, r2, r3
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e7a:	69b8      	ldr	r0, [r7, #24]
 8004e7c:	f000 f8f8 	bl	8005070 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e80:	4b1a      	ldr	r3, [pc, #104]	; (8004eec <pvPortMalloc+0x17c>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	4a18      	ldr	r2, [pc, #96]	; (8004eec <pvPortMalloc+0x17c>)
 8004e8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e8e:	4b17      	ldr	r3, [pc, #92]	; (8004eec <pvPortMalloc+0x17c>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4b18      	ldr	r3, [pc, #96]	; (8004ef4 <pvPortMalloc+0x184>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d203      	bcs.n	8004ea2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e9a:	4b14      	ldr	r3, [pc, #80]	; (8004eec <pvPortMalloc+0x17c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <pvPortMalloc+0x184>)
 8004ea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <pvPortMalloc+0x178>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004eb6:	f7ff fab7 	bl	8004428 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <pvPortMalloc+0x16a>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	60fb      	str	r3, [r7, #12]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <pvPortMalloc+0x168>
	return pvReturn;
 8004eda:	69fb      	ldr	r3, [r7, #28]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3728      	adds	r7, #40	; 0x28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20001174 	.word	0x20001174
 8004ee8:	20001180 	.word	0x20001180
 8004eec:	20001178 	.word	0x20001178
 8004ef0:	2000116c 	.word	0x2000116c
 8004ef4:	2000117c 	.word	0x2000117c

08004ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d048      	beq.n	8004f9c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	425b      	negs	r3, r3
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4413      	add	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <vPortFree+0xac>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <vPortFree+0x44>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	60fb      	str	r3, [r7, #12]
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <vPortFree+0x62>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	60bb      	str	r3, [r7, #8]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <vPortFree+0xac>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d019      	beq.n	8004f9c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d115      	bne.n	8004f9c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <vPortFree+0xac>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f80:	f7ff fa44 	bl	800440c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <vPortFree+0xb0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	4a06      	ldr	r2, [pc, #24]	; (8004fa8 <vPortFree+0xb0>)
 8004f90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f92:	6938      	ldr	r0, [r7, #16]
 8004f94:	f000 f86c 	bl	8005070 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f98:	f7ff fa46 	bl	8004428 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f9c:	bf00      	nop
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20001180 	.word	0x20001180
 8004fa8:	20001178 	.word	0x20001178

08004fac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004fb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fb8:	4b27      	ldr	r3, [pc, #156]	; (8005058 <prvHeapInit+0xac>)
 8004fba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3307      	adds	r3, #7
 8004fca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0307 	bic.w	r3, r3, #7
 8004fd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	4a1f      	ldr	r2, [pc, #124]	; (8005058 <prvHeapInit+0xac>)
 8004fdc:	4413      	add	r3, r2
 8004fde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	; (800505c <prvHeapInit+0xb0>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fea:	4b1c      	ldr	r3, [pc, #112]	; (800505c <prvHeapInit+0xb0>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0307 	bic.w	r3, r3, #7
 8005006:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <prvHeapInit+0xb4>)
 800500c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800500e:	4b14      	ldr	r3, [pc, #80]	; (8005060 <prvHeapInit+0xb4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2200      	movs	r2, #0
 8005014:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <prvHeapInit+0xb4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	1ad2      	subs	r2, r2, r3
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800502c:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <prvHeapInit+0xb4>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	4a0a      	ldr	r2, [pc, #40]	; (8005064 <prvHeapInit+0xb8>)
 800503a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	4a09      	ldr	r2, [pc, #36]	; (8005068 <prvHeapInit+0xbc>)
 8005042:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005044:	4b09      	ldr	r3, [pc, #36]	; (800506c <prvHeapInit+0xc0>)
 8005046:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800504a:	601a      	str	r2, [r3, #0]
}
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	2000056c 	.word	0x2000056c
 800505c:	2000116c 	.word	0x2000116c
 8005060:	20001174 	.word	0x20001174
 8005064:	2000117c 	.word	0x2000117c
 8005068:	20001178 	.word	0x20001178
 800506c:	20001180 	.word	0x20001180

08005070 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005078:	4b27      	ldr	r3, [pc, #156]	; (8005118 <prvInsertBlockIntoFreeList+0xa8>)
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	e002      	b.n	8005084 <prvInsertBlockIntoFreeList+0x14>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	429a      	cmp	r2, r3
 800508c:	d8f7      	bhi.n	800507e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4413      	add	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	429a      	cmp	r2, r3
 800509e:	d108      	bne.n	80050b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	441a      	add	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	441a      	add	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d118      	bne.n	80050f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4b14      	ldr	r3, [pc, #80]	; (800511c <prvInsertBlockIntoFreeList+0xac>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d00d      	beq.n	80050ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	441a      	add	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e008      	b.n	8005100 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050ee:	4b0b      	ldr	r3, [pc, #44]	; (800511c <prvInsertBlockIntoFreeList+0xac>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e003      	b.n	8005100 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	429a      	cmp	r2, r3
 8005106:	d002      	beq.n	800510e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr
 8005118:	2000116c 	.word	0x2000116c
 800511c:	20001174 	.word	0x20001174

08005120 <__libc_init_array>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	2600      	movs	r6, #0
 8005124:	4d0c      	ldr	r5, [pc, #48]	; (8005158 <__libc_init_array+0x38>)
 8005126:	4c0d      	ldr	r4, [pc, #52]	; (800515c <__libc_init_array+0x3c>)
 8005128:	1b64      	subs	r4, r4, r5
 800512a:	10a4      	asrs	r4, r4, #2
 800512c:	42a6      	cmp	r6, r4
 800512e:	d109      	bne.n	8005144 <__libc_init_array+0x24>
 8005130:	f000 f822 	bl	8005178 <_init>
 8005134:	2600      	movs	r6, #0
 8005136:	4d0a      	ldr	r5, [pc, #40]	; (8005160 <__libc_init_array+0x40>)
 8005138:	4c0a      	ldr	r4, [pc, #40]	; (8005164 <__libc_init_array+0x44>)
 800513a:	1b64      	subs	r4, r4, r5
 800513c:	10a4      	asrs	r4, r4, #2
 800513e:	42a6      	cmp	r6, r4
 8005140:	d105      	bne.n	800514e <__libc_init_array+0x2e>
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	f855 3b04 	ldr.w	r3, [r5], #4
 8005148:	4798      	blx	r3
 800514a:	3601      	adds	r6, #1
 800514c:	e7ee      	b.n	800512c <__libc_init_array+0xc>
 800514e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005152:	4798      	blx	r3
 8005154:	3601      	adds	r6, #1
 8005156:	e7f2      	b.n	800513e <__libc_init_array+0x1e>
 8005158:	08005210 	.word	0x08005210
 800515c:	08005210 	.word	0x08005210
 8005160:	08005210 	.word	0x08005210
 8005164:	08005214 	.word	0x08005214

08005168 <memset>:
 8005168:	4603      	mov	r3, r0
 800516a:	4402      	add	r2, r0
 800516c:	4293      	cmp	r3, r2
 800516e:	d100      	bne.n	8005172 <memset+0xa>
 8005170:	4770      	bx	lr
 8005172:	f803 1b01 	strb.w	r1, [r3], #1
 8005176:	e7f9      	b.n	800516c <memset+0x4>

08005178 <_init>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	bf00      	nop
 800517c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517e:	bc08      	pop	{r3}
 8005180:	469e      	mov	lr, r3
 8005182:	4770      	bx	lr

08005184 <_fini>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	bf00      	nop
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr
