
Dev Board CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080050b8  080050b8  000150b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005160  08005160  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005160  08005160  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005160  08005160  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000110c  20000010  08005178  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000111c  08005178  0002111c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001355b  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003503  00000000  00000000  00033594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00036a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  00037d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003cc5  00000000  00000000  00038e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014316  00000000  00000000  0003cb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000976a0  00000000  00000000  00050e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e84db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c0c  00000000  00000000  000e852c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080050a0 	.word	0x080050a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080050a0 	.word	0x080050a0

08000150 <current_sense_init>:
static void Error_Handler(void);

ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

void current_sense_init(){
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8000154:	f000 f808 	bl	8000168 <MX_ADC1_Init>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <pot_sense_init>:
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	raw = HAL_ADC_GetValue(&hadc1);
	return raw;
}

void pot_sense_init(){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	MX_ADC2_Init();
 8000160:	f000 f840 	bl	80001e4 <MX_ADC2_Init>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b084      	sub	sp, #16
 800016c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800016e:	1d3b      	adds	r3, r7, #4
 8000170:	2200      	movs	r2, #0
 8000172:	601a      	str	r2, [r3, #0]
 8000174:	605a      	str	r2, [r3, #4]
 8000176:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000178:	4b18      	ldr	r3, [pc, #96]	; (80001dc <MX_ADC1_Init+0x74>)
 800017a:	4a19      	ldr	r2, [pc, #100]	; (80001e0 <MX_ADC1_Init+0x78>)
 800017c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800017e:	4b17      	ldr	r3, [pc, #92]	; (80001dc <MX_ADC1_Init+0x74>)
 8000180:	2200      	movs	r2, #0
 8000182:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000184:	4b15      	ldr	r3, [pc, #84]	; (80001dc <MX_ADC1_Init+0x74>)
 8000186:	2200      	movs	r2, #0
 8000188:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800018a:	4b14      	ldr	r3, [pc, #80]	; (80001dc <MX_ADC1_Init+0x74>)
 800018c:	2200      	movs	r2, #0
 800018e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <MX_ADC1_Init+0x74>)
 8000192:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000196:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000198:	4b10      	ldr	r3, [pc, #64]	; (80001dc <MX_ADC1_Init+0x74>)
 800019a:	2200      	movs	r2, #0
 800019c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800019e:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <MX_ADC1_Init+0x74>)
 80001a0:	2201      	movs	r2, #1
 80001a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80001a4:	480d      	ldr	r0, [pc, #52]	; (80001dc <MX_ADC1_Init+0x74>)
 80001a6:	f000 fe3b 	bl	8000e20 <HAL_ADC_Init>
 80001aa:	4603      	mov	r3, r0
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d001      	beq.n	80001b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80001b0:	f000 f856 	bl	8000260 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80001b4:	2304      	movs	r3, #4
 80001b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001b8:	2301      	movs	r3, #1
 80001ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001bc:	2300      	movs	r3, #0
 80001be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	4619      	mov	r1, r3
 80001c4:	4805      	ldr	r0, [pc, #20]	; (80001dc <MX_ADC1_Init+0x74>)
 80001c6:	f000 ff03 	bl	8000fd0 <HAL_ADC_ConfigChannel>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001d0:	f000 f846 	bl	8000260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001d4:	bf00      	nop
 80001d6:	3710      	adds	r7, #16
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	40012400 	.word	0x40012400

080001e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
 80001f0:	605a      	str	r2, [r3, #4]
 80001f2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001f4:	4b18      	ldr	r3, [pc, #96]	; (8000258 <MX_ADC2_Init+0x74>)
 80001f6:	4a19      	ldr	r2, [pc, #100]	; (800025c <MX_ADC2_Init+0x78>)
 80001f8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001fa:	4b17      	ldr	r3, [pc, #92]	; (8000258 <MX_ADC2_Init+0x74>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000200:	4b15      	ldr	r3, [pc, #84]	; (8000258 <MX_ADC2_Init+0x74>)
 8000202:	2200      	movs	r2, #0
 8000204:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000206:	4b14      	ldr	r3, [pc, #80]	; (8000258 <MX_ADC2_Init+0x74>)
 8000208:	2200      	movs	r2, #0
 800020a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <MX_ADC2_Init+0x74>)
 800020e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000212:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000214:	4b10      	ldr	r3, [pc, #64]	; (8000258 <MX_ADC2_Init+0x74>)
 8000216:	2200      	movs	r2, #0
 8000218:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <MX_ADC2_Init+0x74>)
 800021c:	2201      	movs	r2, #1
 800021e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <MX_ADC2_Init+0x74>)
 8000222:	f000 fdfd 	bl	8000e20 <HAL_ADC_Init>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800022c:	f000 f818 	bl	8000260 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000230:	2305      	movs	r3, #5
 8000232:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000234:	2301      	movs	r3, #1
 8000236:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4805      	ldr	r0, [pc, #20]	; (8000258 <MX_ADC2_Init+0x74>)
 8000242:	f000 fec5 	bl	8000fd0 <HAL_ADC_ConfigChannel>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800024c:	f000 f808 	bl	8000260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000250:	bf00      	nop
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	2000005c 	.word	0x2000005c
 800025c:	40012800 	.word	0x40012800

08000260 <Error_Handler>:

static void Error_Handler(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000264:	b672      	cpsid	i
}
 8000266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000268:	e7fe      	b.n	8000268 <Error_Handler+0x8>

0800026a <Error_Handler>:
#include "stm32f1xx_hal.h"
#include "cmsis_os.h"


static void Error_Handler(void)
{
 800026a:	b480      	push	{r7}
 800026c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800026e:	b672      	cpsid	i
}
 8000270:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000272:	e7fe      	b.n	8000272 <Error_Handler+0x8>

08000274 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b08a      	sub	sp, #40	; 0x28
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800027a:	f107 0320 	add.w	r3, r7, #32
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]
 8000292:	615a      	str	r2, [r3, #20]
 8000294:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000296:	4b28      	ldr	r3, [pc, #160]	; (8000338 <MX_TIM3_Init+0xc4>)
 8000298:	4a28      	ldr	r2, [pc, #160]	; (800033c <MX_TIM3_Init+0xc8>)
 800029a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 800029c:	4b26      	ldr	r3, [pc, #152]	; (8000338 <MX_TIM3_Init+0xc4>)
 800029e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a4:	4b24      	ldr	r3, [pc, #144]	; (8000338 <MX_TIM3_Init+0xc4>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80002aa:	4b23      	ldr	r3, [pc, #140]	; (8000338 <MX_TIM3_Init+0xc4>)
 80002ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b2:	4b21      	ldr	r3, [pc, #132]	; (8000338 <MX_TIM3_Init+0xc4>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002b8:	4b1f      	ldr	r3, [pc, #124]	; (8000338 <MX_TIM3_Init+0xc4>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80002be:	481e      	ldr	r0, [pc, #120]	; (8000338 <MX_TIM3_Init+0xc4>)
 80002c0:	f002 fd5a 	bl	8002d78 <HAL_TIM_PWM_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80002ca:	f7ff ffce 	bl	800026a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002ce:	2300      	movs	r3, #0
 80002d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002d2:	2300      	movs	r3, #0
 80002d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80002d6:	f107 0320 	add.w	r3, r7, #32
 80002da:	4619      	mov	r1, r3
 80002dc:	4816      	ldr	r0, [pc, #88]	; (8000338 <MX_TIM3_Init+0xc4>)
 80002de:	f003 f96f 	bl	80035c0 <HAL_TIMEx_MasterConfigSynchronization>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80002e8:	f7ff ffbf 	bl	800026a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002ec:	2360      	movs	r3, #96	; 0x60
 80002ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2204      	movs	r2, #4
 8000300:	4619      	mov	r1, r3
 8000302:	480d      	ldr	r0, [pc, #52]	; (8000338 <MX_TIM3_Init+0xc4>)
 8000304:	f002 fe90 	bl	8003028 <HAL_TIM_PWM_ConfigChannel>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800030e:	f7ff ffac 	bl	800026a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	220c      	movs	r2, #12
 8000316:	4619      	mov	r1, r3
 8000318:	4807      	ldr	r0, [pc, #28]	; (8000338 <MX_TIM3_Init+0xc4>)
 800031a:	f002 fe85 	bl	8003028 <HAL_TIM_PWM_ConfigChannel>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000324:	f7ff ffa1 	bl	800026a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000328:	4803      	ldr	r0, [pc, #12]	; (8000338 <MX_TIM3_Init+0xc4>)
 800032a:	f000 fb1d 	bl	8000968 <HAL_TIM_MspPostInit>

}
 800032e:	bf00      	nop
 8000330:	3728      	adds	r7, #40	; 0x28
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	2000008c 	.word	0x2000008c
 800033c:	40000400 	.word	0x40000400

08000340 <blinkers_init>:
uint8_t left_state  = 0;
uint8_t right_state = 0;



void blinkers_init(){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 8000344:	f7ff ff96 	bl	8000274 <MX_TIM3_Init>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}

0800034c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	4a06      	ldr	r2, [pc, #24]	; (8000374 <vApplicationGetIdleTaskMemory+0x28>)
 800035c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	4a05      	ldr	r2, [pc, #20]	; (8000378 <vApplicationGetIdleTaskMemory+0x2c>)
 8000362:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	200000d4 	.word	0x200000d4
 8000378:	20000128 	.word	0x20000128

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b5b0      	push	{r4, r5, r7, lr}
 800037e:	b096      	sub	sp, #88	; 0x58
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000382:	f000 fcf7 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000386:	f000 f85b 	bl	8000440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038a:	f000 f8a9 	bl	80004e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  blinkers_init();
 800038e:	f7ff ffd7 	bl	8000340 <blinkers_init>
  //servo_init();
  can_init();
 8000392:	f000 fc15 	bl	8000bc0 <can_init>
  current_sense_init();
 8000396:	f7ff fedb 	bl	8000150 <current_sense_init>
  pot_sense_init();
 800039a:	f7ff fedf 	bl	800015c <pot_sense_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800039e:	4b21      	ldr	r3, [pc, #132]	; (8000424 <main+0xa8>)
 80003a0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80003a4:	461d      	mov	r5, r3
 80003a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f003 f98f 	bl	80036dc <osThreadCreate>
 80003be:	4603      	mov	r3, r0
 80003c0:	4a19      	ldr	r2, [pc, #100]	; (8000428 <main+0xac>)
 80003c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of mcuStatus */
  osThreadDef(mcuStatus, blink, osPriorityNormal, 0, 128);
 80003c4:	4b19      	ldr	r3, [pc, #100]	; (800042c <main+0xb0>)
 80003c6:	f107 0420 	add.w	r4, r7, #32
 80003ca:	461d      	mov	r5, r3
 80003cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mcuStatusHandle = osThreadCreate(osThread(mcuStatus), NULL);
 80003d8:	f107 0320 	add.w	r3, r7, #32
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f003 f97c 	bl	80036dc <osThreadCreate>
 80003e4:	4603      	mov	r3, r0
 80003e6:	4a12      	ldr	r2, [pc, #72]	; (8000430 <main+0xb4>)
 80003e8:	6013      	str	r3, [r2, #0]
//  canRecieveHandle = osThreadCreate(osThread(canRecieve), NULL);
//
//  osThreadDef(motorControl, motor_controller, osPriorityHigh, 0, 128);
//  motorControlHandle = osThreadCreate(osThread(motorControl), NULL);

  osThreadDef(selfTest, self_test, osPriorityNormal, 0, 128);
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <main+0xb8>)
 80003ec:	1d3c      	adds	r4, r7, #4
 80003ee:	461d      	mov	r5, r3
 80003f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  selfTestHandle = osThreadCreate(osThread(selfTest), NULL);
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2100      	movs	r1, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f003 f96b 	bl	80036dc <osThreadCreate>
 8000406:	4603      	mov	r3, r0
 8000408:	4a0b      	ldr	r2, [pc, #44]	; (8000438 <main+0xbc>)
 800040a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800040c:	f003 f95f 	bl	80036ce <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 8000410:	2104      	movs	r1, #4
 8000412:	480a      	ldr	r0, [pc, #40]	; (800043c <main+0xc0>)
 8000414:	f001 ff09 	bl	800222a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800041c:	f000 fcdc 	bl	8000dd8 <HAL_Delay>
	  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 8000420:	e7f6      	b.n	8000410 <main+0x94>
 8000422:	bf00      	nop
 8000424:	080050dc 	.word	0x080050dc
 8000428:	20000328 	.word	0x20000328
 800042c:	080050f8 	.word	0x080050f8
 8000430:	2000032c 	.word	0x2000032c
 8000434:	08005114 	.word	0x08005114
 8000438:	20000330 	.word	0x20000330
 800043c:	40010800 	.word	0x40010800

08000440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b094      	sub	sp, #80	; 0x50
 8000444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044a:	2228      	movs	r2, #40	; 0x28
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f004 fe1e 	bl	8005090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000470:	2301      	movs	r3, #1
 8000472:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000478:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800047a:	2300      	movs	r3, #0
 800047c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000482:	4618      	mov	r0, r3
 8000484:	f001 feea 	bl	800225c <HAL_RCC_OscConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x52>
  {
    Error_Handler();
 800048e:	f000 f92f 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000492:	230f      	movs	r3, #15
 8000494:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000496:	2301      	movs	r3, #1
 8000498:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	2100      	movs	r1, #0
 80004ac:	4618      	mov	r0, r3
 80004ae:	f002 f957 	bl	8002760 <HAL_RCC_ClockConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80004b8:	f000 f91a 	bl	80006f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004bc:	2302      	movs	r3, #2
 80004be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fafe 	bl	8002ac8 <HAL_RCCEx_PeriphCLKConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004d2:	f000 f90d 	bl	80006f0 <Error_Handler>
  }
}
 80004d6:	bf00      	nop
 80004d8:	3750      	adds	r7, #80	; 0x50
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f4:	4b34      	ldr	r3, [pc, #208]	; (80005c8 <MX_GPIO_Init+0xe8>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a33      	ldr	r2, [pc, #204]	; (80005c8 <MX_GPIO_Init+0xe8>)
 80004fa:	f043 0310 	orr.w	r3, r3, #16
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b31      	ldr	r3, [pc, #196]	; (80005c8 <MX_GPIO_Init+0xe8>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0310 	and.w	r3, r3, #16
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800050c:	4b2e      	ldr	r3, [pc, #184]	; (80005c8 <MX_GPIO_Init+0xe8>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a2d      	ldr	r2, [pc, #180]	; (80005c8 <MX_GPIO_Init+0xe8>)
 8000512:	f043 0320 	orr.w	r3, r3, #32
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <MX_GPIO_Init+0xe8>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0320 	and.w	r3, r3, #32
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <MX_GPIO_Init+0xe8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a27      	ldr	r2, [pc, #156]	; (80005c8 <MX_GPIO_Init+0xe8>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <MX_GPIO_Init+0xe8>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MX_GPIO_Init+0xe8>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <MX_GPIO_Init+0xe8>)
 8000542:	f043 0308 	orr.w	r3, r3, #8
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <MX_GPIO_Init+0xe8>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0308 	and.w	r3, r3, #8
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_IND_GPIO_Port, MCU_IND_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2104      	movs	r1, #4
 8000558:	481c      	ldr	r0, [pc, #112]	; (80005cc <MX_GPIO_Init+0xec>)
 800055a:	f001 fe4e 	bl	80021fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN2_Pin|MOTOR_IN1_Pin|GPIO_1_Pin|GPIO_2_Pin
 800055e:	2200      	movs	r2, #0
 8000560:	f247 4104 	movw	r1, #29700	; 0x7404
 8000564:	481a      	ldr	r0, [pc, #104]	; (80005d0 <MX_GPIO_Init+0xf0>)
 8000566:	f001 fe48 	bl	80021fa <HAL_GPIO_WritePin>
                          |GPIO_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800056a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4619      	mov	r1, r3
 800057e:	4815      	ldr	r0, [pc, #84]	; (80005d4 <MX_GPIO_Init+0xf4>)
 8000580:	f001 fca0 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_IND_Pin */
  GPIO_InitStruct.Pin = MCU_IND_Pin;
 8000584:	2304      	movs	r3, #4
 8000586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2302      	movs	r3, #2
 8000592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_IND_GPIO_Port, &GPIO_InitStruct);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4619      	mov	r1, r3
 800059a:	480c      	ldr	r0, [pc, #48]	; (80005cc <MX_GPIO_Init+0xec>)
 800059c:	f001 fc92 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN2_Pin MOTOR_IN1_Pin GPIO_1_Pin GPIO_2_Pin
                           GPIO_3_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN2_Pin|MOTOR_IN1_Pin|GPIO_1_Pin|GPIO_2_Pin
 80005a0:	f247 4304 	movw	r3, #29700	; 0x7404
 80005a4:	613b      	str	r3, [r7, #16]
                          |GPIO_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_GPIO_Init+0xf0>)
 80005ba:	f001 fc83 	bl	8001ec4 <HAL_GPIO_Init>

}
 80005be:	bf00      	nop
 80005c0:	3720      	adds	r7, #32
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010800 	.word	0x40010800
 80005d0:	40010c00 	.word	0x40010c00
 80005d4:	40011000 	.word	0x40011000

080005d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80005e0:	2064      	movs	r0, #100	; 0x64
 80005e2:	f003 f8c7 	bl	8003774 <osDelay>
 80005e6:	e7fb      	b.n	80005e0 <StartDefaultTask+0x8>

080005e8 <blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink */
void blink(void const * argument)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink */
//	motor_init();
	HAL_GPIO_WritePin(MCU_IND_GPIO_Port,MCU_IND_Pin,GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2104      	movs	r1, #4
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <blink+0x20>)
 80005f6:	f001 fe00 	bl	80021fa <HAL_GPIO_WritePin>
	//set_servo_pos(0);
	int pos = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
//		  pos = 0;
//	  }
//	  else if (pos == 0){
//		  pos = 50;
//	  }
	  osDelay(1000);
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	f003 f8b7 	bl	8003774 <osDelay>
 8000606:	e7fa      	b.n	80005fe <blink+0x16>
 8000608:	40010800 	.word	0x40010800

0800060c <self_test>:
		osDelay(10);
	}
}

// Self-Test Button Task
void self_test(void const * argument){
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	zone_state_e zone_state = NORMAL;
 8000614:	2303      	movs	r3, #3
 8000616:	73fb      	strb	r3, [r7, #15]
	uint8_t button_debounce = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	73bb      	strb	r3, [r7, #14]
	uint8_t button_release = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	737b      	strb	r3, [r7, #13]
	uint8_t button_state = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	733b      	strb	r3, [r7, #12]

	for (;;){
		GPIO_PinState button = HAL_GPIO_ReadPin(BUTTON_GPIO_Port,BUTTON_Pin);
 8000624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000628:	4826      	ldr	r0, [pc, #152]	; (80006c4 <self_test+0xb8>)
 800062a:	f001 fdcf 	bl	80021cc <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	72fb      	strb	r3, [r7, #11]
		// debounce button
		if (button == GPIO_PIN_SET){
 8000632:	7afb      	ldrb	r3, [r7, #11]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d107      	bne.n	8000648 <self_test+0x3c>
			button_debounce = (button_debounce << 1) | 1;
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b25b      	sxtb	r3, r3
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	b25b      	sxtb	r3, r3
 8000644:	73bb      	strb	r3, [r7, #14]
 8000646:	e002      	b.n	800064e <self_test+0x42>
		}
		else {
			button_debounce = button_debounce << 1;
 8000648:	7bbb      	ldrb	r3, [r7, #14]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	73bb      	strb	r3, [r7, #14]
		}
		if (button_debounce == 0xFF && button_state == 0){
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	2bff      	cmp	r3, #255	; 0xff
 8000652:	d105      	bne.n	8000660 <self_test+0x54>
 8000654:	7b3b      	ldrb	r3, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d102      	bne.n	8000660 <self_test+0x54>
			button_state = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	733b      	strb	r3, [r7, #12]
 800065e:	e009      	b.n	8000674 <self_test+0x68>
		}
		else if (button_debounce == 0 && button_state == 1){
 8000660:	7bbb      	ldrb	r3, [r7, #14]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d106      	bne.n	8000674 <self_test+0x68>
 8000666:	7b3b      	ldrb	r3, [r7, #12]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d103      	bne.n	8000674 <self_test+0x68>
			button_state = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	733b      	strb	r3, [r7, #12]
			button_release = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	737b      	strb	r3, [r7, #13]
		}
		switch (zone_state) {
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d00d      	beq.n	8000696 <self_test+0x8a>
 800067a:	2b03      	cmp	r3, #3
 800067c:	d11d      	bne.n	80006ba <self_test+0xae>
			case NORMAL:
				if (button_state == 1) {
 800067e:	7b3b      	ldrb	r3, [r7, #12]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d117      	bne.n	80006b4 <self_test+0xa8>
					HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 8000684:	2104      	movs	r1, #4
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <self_test+0xbc>)
 8000688:	f001 fdcf 	bl	800222a <HAL_GPIO_TogglePin>
					zone_state = ERROR_BUTTON;
 800068c:	2301      	movs	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
					button_release = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	737b      	strb	r3, [r7, #13]
				}
				break;
 8000694:	e00e      	b.n	80006b4 <self_test+0xa8>
			case ERROR_BUTTON:
				if (button_state == 1 && button_release == 1) {
 8000696:	7b3b      	ldrb	r3, [r7, #12]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d10d      	bne.n	80006b8 <self_test+0xac>
 800069c:	7b7b      	ldrb	r3, [r7, #13]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10a      	bne.n	80006b8 <self_test+0xac>
					HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 80006a2:	2104      	movs	r1, #4
 80006a4:	4808      	ldr	r0, [pc, #32]	; (80006c8 <self_test+0xbc>)
 80006a6:	f001 fdc0 	bl	800222a <HAL_GPIO_TogglePin>
					zone_state = NORMAL;
 80006aa:	2303      	movs	r3, #3
 80006ac:	73fb      	strb	r3, [r7, #15]
					button_release = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	737b      	strb	r3, [r7, #13]
				}
				break;
 80006b2:	e001      	b.n	80006b8 <self_test+0xac>
				break;
 80006b4:	bf00      	nop
 80006b6:	e000      	b.n	80006ba <self_test+0xae>
				break;
 80006b8:	bf00      	nop
		}
		osDelay(10);
 80006ba:	200a      	movs	r0, #10
 80006bc:	f003 f85a 	bl	8003774 <osDelay>
	for (;;){
 80006c0:	e7b0      	b.n	8000624 <self_test+0x18>
 80006c2:	bf00      	nop
 80006c4:	40011000 	.word	0x40011000
 80006c8:	40010800 	.word	0x40010800

080006cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d101      	bne.n	80006e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006de:	f000 fb5f 	bl	8000da0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40012c00 	.word	0x40012c00

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <HAL_MspInit+0x68>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <HAL_MspInit+0x68>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_MspInit+0x68>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_MspInit+0x68>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <HAL_MspInit+0x68>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_MspInit+0x68>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	210f      	movs	r1, #15
 8000736:	f06f 0001 	mvn.w	r0, #1
 800073a:	f001 fb98 	bl	8001e6e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_MspInit+0x6c>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_MspInit+0x6c>)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	40010000 	.word	0x40010000

0800076c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0318 	add.w	r3, r7, #24
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a28      	ldr	r2, [pc, #160]	; (8000828 <HAL_ADC_MspInit+0xbc>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d122      	bne.n	80007d2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800078c:	4b27      	ldr	r3, [pc, #156]	; (800082c <HAL_ADC_MspInit+0xc0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a26      	ldr	r2, [pc, #152]	; (800082c <HAL_ADC_MspInit+0xc0>)
 8000792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <HAL_ADC_MspInit+0xc0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <HAL_ADC_MspInit+0xc0>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a20      	ldr	r2, [pc, #128]	; (800082c <HAL_ADC_MspInit+0xc0>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <HAL_ADC_MspInit+0xc0>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = I_SENSE_Pin;
 80007bc:	2310      	movs	r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c0:	2303      	movs	r3, #3
 80007c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SENSE_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 0318 	add.w	r3, r7, #24
 80007c8:	4619      	mov	r1, r3
 80007ca:	4819      	ldr	r0, [pc, #100]	; (8000830 <HAL_ADC_MspInit+0xc4>)
 80007cc:	f001 fb7a 	bl	8001ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80007d0:	e026      	b.n	8000820 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a17      	ldr	r2, [pc, #92]	; (8000834 <HAL_ADC_MspInit+0xc8>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d121      	bne.n	8000820 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <HAL_ADC_MspInit+0xc0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <HAL_ADC_MspInit+0xc0>)
 80007e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_ADC_MspInit+0xc0>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_ADC_MspInit+0xc0>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <HAL_ADC_MspInit+0xc0>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_ADC_MspInit+0xc0>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 800080c:	2320      	movs	r3, #32
 800080e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0318 	add.w	r3, r7, #24
 8000818:	4619      	mov	r1, r3
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <HAL_ADC_MspInit+0xc4>)
 800081c:	f001 fb52 	bl	8001ec4 <HAL_GPIO_Init>
}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	; 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40012400 	.word	0x40012400
 800082c:	40021000 	.word	0x40021000
 8000830:	40010800 	.word	0x40010800
 8000834:	40012800 	.word	0x40012800

08000838 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a25      	ldr	r2, [pc, #148]	; (80008e8 <HAL_CAN_MspInit+0xb0>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d143      	bne.n	80008e0 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000858:	4b24      	ldr	r3, [pc, #144]	; (80008ec <HAL_CAN_MspInit+0xb4>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	4a23      	ldr	r2, [pc, #140]	; (80008ec <HAL_CAN_MspInit+0xb4>)
 800085e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000862:	61d3      	str	r3, [r2, #28]
 8000864:	4b21      	ldr	r3, [pc, #132]	; (80008ec <HAL_CAN_MspInit+0xb4>)
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <HAL_CAN_MspInit+0xb4>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <HAL_CAN_MspInit+0xb4>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <HAL_CAN_MspInit+0xb4>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800088c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	4619      	mov	r1, r3
 80008a0:	4813      	ldr	r0, [pc, #76]	; (80008f0 <HAL_CAN_MspInit+0xb8>)
 80008a2:	f001 fb0f 	bl	8001ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	; (80008f0 <HAL_CAN_MspInit+0xb8>)
 80008bc:	f001 fb02 	bl	8001ec4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2105      	movs	r1, #5
 80008c4:	2014      	movs	r0, #20
 80008c6:	f001 fad2 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80008ca:	2014      	movs	r0, #20
 80008cc:	f001 faeb 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2105      	movs	r1, #5
 80008d4:	2015      	movs	r0, #21
 80008d6:	f001 faca 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80008da:	2015      	movs	r0, #21
 80008dc:	f001 fae3 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40006400 	.word	0x40006400
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010800 	.word	0x40010800

080008f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000904:	d10b      	bne.n	800091e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_TIM_Base_MspInit+0x34>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_TIM_Base_MspInit+0x34>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_TIM_Base_MspInit+0x34>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a09      	ldr	r2, [pc, #36]	; (8000960 <HAL_TIM_PWM_MspInit+0x34>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d10b      	bne.n	8000956 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_TIM_PWM_MspInit+0x38>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_TIM_PWM_MspInit+0x38>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_TIM_PWM_MspInit+0x38>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40000400 	.word	0x40000400
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000986:	d12b      	bne.n	80009e0 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <HAL_TIM_MspPostInit+0xec>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a31      	ldr	r2, [pc, #196]	; (8000a54 <HAL_TIM_MspPostInit+0xec>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <HAL_TIM_MspPostInit+0xec>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_EN_PWM_Pin;
 80009a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MOTOR_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4828      	ldr	r0, [pc, #160]	; (8000a58 <HAL_TIM_MspPostInit+0xf0>)
 80009b6:	f001 fa85 	bl	8001ec4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <HAL_TIM_MspPostInit+0xf4>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
 80009d8:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <HAL_TIM_MspPostInit+0xf4>)
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009de:	e034      	b.n	8000a4a <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <HAL_TIM_MspPostInit+0xf8>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12f      	bne.n	8000a4a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_TIM_MspPostInit+0xec>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_TIM_MspPostInit+0xec>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_TIM_MspPostInit+0xec>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_TIM_MspPostInit+0xec>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <HAL_TIM_MspPostInit+0xec>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6193      	str	r3, [r2, #24]
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_TIM_MspPostInit+0xec>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_BLINKER_Pin;
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LEFT_BLINKER_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <HAL_TIM_MspPostInit+0xfc>)
 8000a2e:	f001 fa49 	bl	8001ec4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RIGHT_BLINKER_Pin;
 8000a32:	2302      	movs	r3, #2
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RIGHT_BLINKER_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <HAL_TIM_MspPostInit+0xf0>)
 8000a46:	f001 fa3d 	bl	8001ec4 <HAL_GPIO_Init>
}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	40010000 	.word	0x40010000
 8000a60:	40000400 	.word	0x40000400
 8000a64:	40010800 	.word	0x40010800

08000a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a7e:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <HAL_InitTick+0xd0>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a2d      	ldr	r2, [pc, #180]	; (8000b38 <HAL_InitTick+0xd0>)
 8000a84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a88:	6193      	str	r3, [r2, #24]
 8000a8a:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <HAL_InitTick+0xd0>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a96:	f107 020c 	add.w	r2, r7, #12
 8000a9a:	f107 0310 	add.w	r3, r7, #16
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 ffc3 	bl	8002a2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000aa6:	f001 ffad 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 8000aaa:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <HAL_InitTick+0xd4>)
 8000ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab4:	0c9b      	lsrs	r3, r3, #18
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <HAL_InitTick+0xd8>)
 8000abc:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <HAL_InitTick+0xdc>)
 8000abe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_InitTick+0xd8>)
 8000ac2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ac6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <HAL_InitTick+0xd8>)
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_InitTick+0xd8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <HAL_InitTick+0xd8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_InitTick+0xd8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ae0:	4817      	ldr	r0, [pc, #92]	; (8000b40 <HAL_InitTick+0xd8>)
 8000ae2:	f002 f8a7 	bl	8002c34 <HAL_TIM_Base_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000aec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d11b      	bne.n	8000b2c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000af4:	4812      	ldr	r0, [pc, #72]	; (8000b40 <HAL_InitTick+0xd8>)
 8000af6:	f002 f8ed 	bl	8002cd4 <HAL_TIM_Base_Start_IT>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d111      	bne.n	8000b2c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b08:	2019      	movs	r0, #25
 8000b0a:	f001 f9cc 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d808      	bhi.n	8000b26 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	2019      	movs	r0, #25
 8000b1a:	f001 f9a8 	bl	8001e6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_InitTick+0xe0>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	e002      	b.n	8000b2c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3730      	adds	r7, #48	; 0x30
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	431bde83 	.word	0x431bde83
 8000b40:	20000334 	.word	0x20000334
 8000b44:	40012c00 	.word	0x40012c00
 8000b48:	20000004 	.word	0x20000004

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
	...

08000b78 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b7e:	f000 fe9e 	bl	80018be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000037c 	.word	0x2000037c

08000b8c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <CAN1_RX1_IRQHandler+0x10>)
 8000b92:	f000 fe94 	bl	80018be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000037c 	.word	0x2000037c

08000ba0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <TIM1_UP_IRQHandler+0x10>)
 8000ba6:	f002 f936 	bl	8002e16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000334 	.word	0x20000334

08000bb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <can_init>:
CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;

QueueHandle_t xQueueCANRx;

void can_init(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	MX_CAN_Init();
 8000bc4:	f000 f840 	bl	8000c48 <MX_CAN_Init>
	xQueueCANRx = xQueueCreate( 10,sizeof(can_msg_t));
 8000bc8:	2200      	movs	r2, #0
 8000bca:	210a      	movs	r1, #10
 8000bcc:	200a      	movs	r0, #10
 8000bce:	f002 fefd 	bl	80039cc <xQueueGenericCreate>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a01      	ldr	r2, [pc, #4]	; (8000bdc <can_init+0x1c>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200003c8 	.word	0x200003c8

08000be0 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Interrupt Handler for receiving a can message.
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000bea:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000bec:	2100      	movs	r1, #0
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 fd2f 	bl	8001652 <HAL_CAN_GetRxMessage>
	can_msg_t msg;
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
	if (RxHeader.DLC !=0)
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d018      	beq.n	8000c32 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		msg.id = RxHeader.StdId;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	823b      	strh	r3, [r7, #16]
		memcpy(msg.msg, RxData, 8);
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000c0a:	f107 0212 	add.w	r2, r7, #18
 8000c0e:	cb03      	ldmia	r3!, {r0, r1}
 8000c10:	6010      	str	r0, [r2, #0]
 8000c12:	6051      	str	r1, [r2, #4]
		BaseType_t res = xQueueSendFromISR(xQueueCANRx,(void * )&msg, &xHigherPriorityTaskWoken );
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	f107 020c 	add.w	r2, r7, #12
 8000c1c:	f107 0110 	add.w	r1, r7, #16
 8000c20:	2300      	movs	r3, #0
 8000c22:	f002 ff30 	bl	8003a86 <xQueueGenericSendFromISR>
 8000c26:	61f8      	str	r0, [r7, #28]
		if (res == pdTRUE){
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d101      	bne.n	8000c32 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
			res = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
	if( xHigherPriorityTaskWoken )
	{
	        /* Actual macro used here is port specific. */

	}
}
 8000c32:	bf00      	nop
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200003a4 	.word	0x200003a4
 8000c40:	200003ac 	.word	0x200003ac
 8000c44:	200003c8 	.word	0x200003c8

08000c48 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c50:	4a31      	ldr	r2, [pc, #196]	; (8000d18 <MX_CAN_Init+0xd0>)
 8000c52:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000c54:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c56:	2204      	movs	r2, #4
 8000c58:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c5a:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c66:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c6c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c98:	481e      	ldr	r0, [pc, #120]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000c9a:	f000 fad2 	bl	8001242 <HAL_CAN_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000ca4:	f000 f83a 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x200<<5;
 8000cb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cb8:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x100<<5;
 8000cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc2:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;  // doesn't matter in single can controllers
 8000cd0:	230e      	movs	r3, #14
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig)!= HAL_OK){
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000cda:	f000 fbad 	bl	8001438 <HAL_CAN_ConfigFilter>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_CAN_Init+0xa0>
		// Filter Config Error
		Error_Handler();
 8000ce4:	f000 f81a 	bl	8000d1c <Error_Handler>
	}

	// Start CAN
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000ce8:	480a      	ldr	r0, [pc, #40]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000cea:	f000 fc6e 	bl	80015ca <HAL_CAN_Start>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_CAN_Init+0xb0>
	{
	  /* Start Error */
	  Error_Handler();
 8000cf4:	f000 f812 	bl	8000d1c <Error_Handler>
	}
	// Activate RX Notification
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK){
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_CAN_Init+0xcc>)
 8000cfc:	f000 fdba 	bl	8001874 <HAL_CAN_ActivateNotification>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_CAN_Init+0xc2>
		// Notification Error
		Error_Handler();
 8000d06:	f000 f809 	bl	8000d1c <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000037c 	.word	0x2000037c
 8000d18:	40006400 	.word	0x40006400

08000d1c <Error_Handler>:

void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d2a:	490d      	ldr	r1, [pc, #52]	; (8000d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d40:	4c0a      	ldr	r4, [pc, #40]	; (8000d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d4e:	f7ff ff31 	bl	8000bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f004 f96b 	bl	800502c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d56:	f7ff fb11 	bl	800037c <main>
  bx lr
 8000d5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d64:	08005168 	.word	0x08005168
  ldr r2, =_sbss
 8000d68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d6c:	2000111c 	.word	0x2000111c

08000d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC1_2_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_Init+0x28>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_Init+0x28>)
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f001 f867 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f7ff fe6c 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fcb4 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40022000 	.word	0x40022000

08000da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_IncTick+0x1c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_IncTick+0x20>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a03      	ldr	r2, [pc, #12]	; (8000dc0 <HAL_IncTick+0x20>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	200003cc 	.word	0x200003cc

08000dc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <HAL_GetTick+0x10>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	200003cc 	.word	0x200003cc

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff fff0 	bl	8000dc4 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_Delay+0x44>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffe0 	bl	8000dc4 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008

08000e20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e0be      	b.n	8000fc0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d109      	bne.n	8000e64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fc84 	bl	800076c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f9ab 	bl	80011c0 <ADC_ConversionStop_Disable>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f040 8099 	bne.w	8000fae <HAL_ADC_Init+0x18e>
 8000e7c:	7dfb      	ldrb	r3, [r7, #23]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f040 8095 	bne.w	8000fae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e8c:	f023 0302 	bic.w	r3, r3, #2
 8000e90:	f043 0202 	orr.w	r2, r3, #2
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ea0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7b1b      	ldrb	r3, [r3, #12]
 8000ea6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ea8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000eb8:	d003      	beq.n	8000ec2 <HAL_ADC_Init+0xa2>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d102      	bne.n	8000ec8 <HAL_ADC_Init+0xa8>
 8000ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec6:	e000      	b.n	8000eca <HAL_ADC_Init+0xaa>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7d1b      	ldrb	r3, [r3, #20]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d119      	bne.n	8000f0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7b1b      	ldrb	r3, [r3, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d109      	bne.n	8000ef4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	035a      	lsls	r2, r3, #13
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	e00b      	b.n	8000f0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	f043 0220 	orr.w	r2, r3, #32
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	f043 0201 	orr.w	r2, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_ADC_Init+0x1a8>)
 8000f28:	4013      	ands	r3, r2
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6812      	ldr	r2, [r2, #0]
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	430b      	orrs	r3, r1
 8000f32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f3c:	d003      	beq.n	8000f46 <HAL_ADC_Init+0x126>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d104      	bne.n	8000f50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	051b      	lsls	r3, r3, #20
 8000f4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_ADC_Init+0x1ac>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d10b      	bne.n	8000f8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7e:	f023 0303 	bic.w	r3, r3, #3
 8000f82:	f043 0201 	orr.w	r2, r3, #1
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f8a:	e018      	b.n	8000fbe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f90:	f023 0312 	bic.w	r3, r3, #18
 8000f94:	f043 0210 	orr.w	r2, r3, #16
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	f043 0201 	orr.w	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fac:	e007      	b.n	8000fbe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	f043 0210 	orr.w	r2, r3, #16
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	ffe1f7fd 	.word	0xffe1f7fd
 8000fcc:	ff1f0efe 	.word	0xff1f0efe

08000fd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <HAL_ADC_ConfigChannel+0x20>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e0dc      	b.n	80011aa <HAL_ADC_ConfigChannel+0x1da>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b06      	cmp	r3, #6
 8000ffe:	d81c      	bhi.n	800103a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	3b05      	subs	r3, #5
 8001012:	221f      	movs	r2, #31
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	4019      	ands	r1, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	3b05      	subs	r3, #5
 800102c:	fa00 f203 	lsl.w	r2, r0, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
 8001038:	e03c      	b.n	80010b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b0c      	cmp	r3, #12
 8001040:	d81c      	bhi.n	800107c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	3b23      	subs	r3, #35	; 0x23
 8001054:	221f      	movs	r2, #31
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	4019      	ands	r1, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	3b23      	subs	r3, #35	; 0x23
 800106e:	fa00 f203 	lsl.w	r2, r0, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	631a      	str	r2, [r3, #48]	; 0x30
 800107a:	e01b      	b.n	80010b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	3b41      	subs	r3, #65	; 0x41
 800108e:	221f      	movs	r2, #31
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	4019      	ands	r1, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	3b41      	subs	r3, #65	; 0x41
 80010a8:	fa00 f203 	lsl.w	r2, r0, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b09      	cmp	r3, #9
 80010ba:	d91c      	bls.n	80010f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68d9      	ldr	r1, [r3, #12]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	3b1e      	subs	r3, #30
 80010ce:	2207      	movs	r2, #7
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4019      	ands	r1, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6898      	ldr	r0, [r3, #8]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	3b1e      	subs	r3, #30
 80010e8:	fa00 f203 	lsl.w	r2, r0, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	e019      	b.n	800112a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6919      	ldr	r1, [r3, #16]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	2207      	movs	r2, #7
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	4019      	ands	r1, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6898      	ldr	r0, [r3, #8]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	fa00 f203 	lsl.w	r2, r0, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b10      	cmp	r3, #16
 8001130:	d003      	beq.n	800113a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001136:	2b11      	cmp	r3, #17
 8001138:	d132      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d125      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d126      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001160:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b10      	cmp	r3, #16
 8001168:	d11a      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <HAL_ADC_ConfigChannel+0x1ec>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	0c9a      	lsrs	r2, r3, #18
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001180:	e002      	b.n	8001188 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	3b01      	subs	r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f9      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x1b2>
 800118e:	e007      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001194:	f043 0220 	orr.w	r2, r3, #32
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	40012400 	.word	0x40012400
 80011b8:	20000000 	.word	0x20000000
 80011bc:	431bde83 	.word	0x431bde83

080011c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d12e      	bne.n	8001238 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0201 	bic.w	r2, r2, #1
 80011e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011ea:	f7ff fdeb 	bl	8000dc4 <HAL_GetTick>
 80011ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011f0:	e01b      	b.n	800122a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011f2:	f7ff fde7 	bl	8000dc4 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d914      	bls.n	800122a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b01      	cmp	r3, #1
 800120c:	d10d      	bne.n	800122a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001212:	f043 0210 	orr.w	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	f043 0201 	orr.w	r2, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e007      	b.n	800123a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b01      	cmp	r3, #1
 8001236:	d0dc      	beq.n	80011f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0ed      	b.n	8001430 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fae9 	bl	8000838 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 0201 	orr.w	r2, r2, #1
 8001274:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001276:	f7ff fda5 	bl	8000dc4 <HAL_GetTick>
 800127a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800127c:	e012      	b.n	80012a4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800127e:	f7ff fda1 	bl	8000dc4 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b0a      	cmp	r3, #10
 800128a:	d90b      	bls.n	80012a4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2205      	movs	r2, #5
 800129c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e0c5      	b.n	8001430 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0e5      	beq.n	800127e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0202 	bic.w	r2, r2, #2
 80012c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c2:	f7ff fd7f 	bl	8000dc4 <HAL_GetTick>
 80012c6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012c8:	e012      	b.n	80012f0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012ca:	f7ff fd7b 	bl	8000dc4 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b0a      	cmp	r3, #10
 80012d6:	d90b      	bls.n	80012f0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2205      	movs	r2, #5
 80012e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e09f      	b.n	8001430 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1e5      	bne.n	80012ca <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7e1b      	ldrb	r3, [r3, #24]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d108      	bne.n	8001318 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e007      	b.n	8001328 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001326:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7e5b      	ldrb	r3, [r3, #25]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d108      	bne.n	8001342 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e007      	b.n	8001352 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7e9b      	ldrb	r3, [r3, #26]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d108      	bne.n	800136c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0220 	orr.w	r2, r2, #32
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e007      	b.n	800137c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0220 	bic.w	r2, r2, #32
 800137a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7edb      	ldrb	r3, [r3, #27]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d108      	bne.n	8001396 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0210 	bic.w	r2, r2, #16
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e007      	b.n	80013a6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0210 	orr.w	r2, r2, #16
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7f1b      	ldrb	r3, [r3, #28]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d108      	bne.n	80013c0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0208 	orr.w	r2, r2, #8
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e007      	b.n	80013d0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0208 	bic.w	r2, r2, #8
 80013ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7f5b      	ldrb	r3, [r3, #29]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d108      	bne.n	80013ea <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0204 	orr.w	r2, r2, #4
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e007      	b.n	80013fa <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0204 	bic.w	r2, r2, #4
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	ea42 0103 	orr.w	r1, r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	1e5a      	subs	r2, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001450:	7cfb      	ldrb	r3, [r7, #19]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d003      	beq.n	800145e <HAL_CAN_ConfigFilter+0x26>
 8001456:	7cfb      	ldrb	r3, [r7, #19]
 8001458:	2b02      	cmp	r3, #2
 800145a:	f040 80aa 	bne.w	80015b2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	2201      	movs	r2, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43db      	mvns	r3, r3
 8001488:	401a      	ands	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d123      	bne.n	80014e0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3248      	adds	r2, #72	; 0x48
 80014c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014d6:	6979      	ldr	r1, [r7, #20]
 80014d8:	3348      	adds	r3, #72	; 0x48
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d122      	bne.n	800152e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001508:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3248      	adds	r2, #72	; 0x48
 800150e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001522:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001524:	6979      	ldr	r1, [r7, #20]
 8001526:	3348      	adds	r3, #72	; 0x48
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	401a      	ands	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001548:	e007      	b.n	800155a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	431a      	orrs	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43db      	mvns	r3, r3
 800156c:	401a      	ands	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001574:	e007      	b.n	8001586 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	431a      	orrs	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	431a      	orrs	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015a4:	f023 0201 	bic.w	r2, r3, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e006      	b.n	80015c0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
  }
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d12e      	bne.n	800163c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2202      	movs	r2, #2
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015f6:	f7ff fbe5 	bl	8000dc4 <HAL_GetTick>
 80015fa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015fc:	e012      	b.n	8001624 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015fe:	f7ff fbe1 	bl	8000dc4 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b0a      	cmp	r3, #10
 800160a:	d90b      	bls.n	8001624 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2205      	movs	r2, #5
 800161c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e012      	b.n	800164a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1e5      	bne.n	80015fe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	e006      	b.n	800164a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
  }
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001652:	b480      	push	{r7}
 8001654:	b087      	sub	sp, #28
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001666:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d003      	beq.n	8001676 <HAL_CAN_GetRxMessage+0x24>
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b02      	cmp	r3, #2
 8001672:	f040 80f3 	bne.w	800185c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10e      	bne.n	800169a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d116      	bne.n	80016b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0e7      	b.n	800186a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d107      	bne.n	80016b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0d8      	b.n	800186a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	331b      	adds	r3, #27
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4413      	add	r3, r2
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0204 	and.w	r2, r3, #4
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10c      	bne.n	80016f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	331b      	adds	r3, #27
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	4413      	add	r3, r2
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0d5b      	lsrs	r3, r3, #21
 80016e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e00b      	b.n	8001708 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	331b      	adds	r3, #27
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	4413      	add	r3, r2
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	08db      	lsrs	r3, r3, #3
 8001700:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	331b      	adds	r3, #27
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	4413      	add	r3, r2
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0202 	and.w	r2, r3, #2
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	331b      	adds	r3, #27
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	3304      	adds	r3, #4
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 020f 	and.w	r2, r3, #15
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	331b      	adds	r3, #27
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	4413      	add	r3, r2
 8001742:	3304      	adds	r3, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	b2da      	uxtb	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	331b      	adds	r3, #27
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	4413      	add	r3, r2
 800175a:	3304      	adds	r3, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	0c1b      	lsrs	r3, r3, #16
 8001760:	b29a      	uxth	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	4413      	add	r3, r2
 8001770:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0a1a      	lsrs	r2, r3, #8
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	4413      	add	r3, r2
 80017a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0c1a      	lsrs	r2, r3, #16
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	3302      	adds	r3, #2
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0e1a      	lsrs	r2, r3, #24
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	3303      	adds	r3, #3
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	4413      	add	r3, r2
 80017d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3304      	adds	r3, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0a1a      	lsrs	r2, r3, #8
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3305      	adds	r3, #5
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0c1a      	lsrs	r2, r3, #16
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	3306      	adds	r3, #6
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	4413      	add	r3, r2
 8001820:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	0e1a      	lsrs	r2, r3, #24
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	3307      	adds	r3, #7
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d108      	bne.n	8001848 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0220 	orr.w	r2, r2, #32
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	e007      	b.n	8001858 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0220 	orr.w	r2, r2, #32
 8001856:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	e006      	b.n	800186a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
  }
}
 800186a:	4618      	mov	r0, r3
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001884:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d002      	beq.n	8001892 <HAL_CAN_ActivateNotification+0x1e>
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d109      	bne.n	80018a6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6959      	ldr	r1, [r3, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e006      	b.n	80018b4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
  }
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b08a      	sub	sp, #40	; 0x28
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d07c      	beq.n	80019fe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d023      	beq.n	8001956 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2201      	movs	r2, #1
 8001914:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f983 	bl	8001c2c <HAL_CAN_TxMailbox0CompleteCallback>
 8001926:	e016      	b.n	8001956 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d004      	beq.n	800193c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	e00c      	b.n	8001956 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
 800194e:	e002      	b.n	8001956 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f986 	bl	8001c62 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d024      	beq.n	80019aa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001968:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f962 	bl	8001c3e <HAL_CAN_TxMailbox1CompleteCallback>
 800197a:	e016      	b.n	80019aa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001982:	2b00      	cmp	r3, #0
 8001984:	d004      	beq.n	8001990 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
 800198e:	e00c      	b.n	80019aa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
 80019a2:	e002      	b.n	80019aa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f965 	bl	8001c74 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d024      	beq.n	80019fe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f941 	bl	8001c50 <HAL_CAN_TxMailbox2CompleteCallback>
 80019ce:	e016      	b.n	80019fe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d004      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	e00c      	b.n	80019fe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
 80019f6:	e002      	b.n	80019fe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f944 	bl	8001c86 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00c      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2210      	movs	r2, #16
 8001a20:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00b      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d006      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f92a 	bl	8001c98 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff f8bf 	bl	8000be0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00c      	beq.n	8001a86 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2210      	movs	r2, #16
 8001a84:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00b      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f90a 	bl	8001cbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d009      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f8f2 	bl	8001caa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00b      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2210      	movs	r2, #16
 8001ae0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f8f3 	bl	8001cce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00b      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2208      	movs	r2, #8
 8001b02:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f8eb 	bl	8001ce0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d07b      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d072      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d043      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d03e      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b8c:	2b60      	cmp	r3, #96	; 0x60
 8001b8e:	d02b      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x32a>
 8001b90:	2b60      	cmp	r3, #96	; 0x60
 8001b92:	d82e      	bhi.n	8001bf2 <HAL_CAN_IRQHandler+0x334>
 8001b94:	2b50      	cmp	r3, #80	; 0x50
 8001b96:	d022      	beq.n	8001bde <HAL_CAN_IRQHandler+0x320>
 8001b98:	2b50      	cmp	r3, #80	; 0x50
 8001b9a:	d82a      	bhi.n	8001bf2 <HAL_CAN_IRQHandler+0x334>
 8001b9c:	2b40      	cmp	r3, #64	; 0x40
 8001b9e:	d019      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x316>
 8001ba0:	2b40      	cmp	r3, #64	; 0x40
 8001ba2:	d826      	bhi.n	8001bf2 <HAL_CAN_IRQHandler+0x334>
 8001ba4:	2b30      	cmp	r3, #48	; 0x30
 8001ba6:	d010      	beq.n	8001bca <HAL_CAN_IRQHandler+0x30c>
 8001ba8:	2b30      	cmp	r3, #48	; 0x30
 8001baa:	d822      	bhi.n	8001bf2 <HAL_CAN_IRQHandler+0x334>
 8001bac:	2b10      	cmp	r3, #16
 8001bae:	d002      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x2f8>
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d005      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bb4:	e01d      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	f043 0308 	orr.w	r3, r3, #8
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bbe:	e019      	b.n	8001bf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	f043 0310 	orr.w	r3, r3, #16
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bc8:	e014      	b.n	8001bf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	f043 0320 	orr.w	r3, r3, #32
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bd2:	e00f      	b.n	8001bf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bdc:	e00a      	b.n	8001bf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001be6:	e005      	b.n	8001bf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf0:	e000      	b.n	8001bf4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001bf2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c02:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2204      	movs	r2, #4
 8001c0a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f867 	bl	8001cf2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4906      	ldr	r1, [pc, #24]	; (8001d9c <__NVIC_EnableIRQ+0x34>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff4f 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e80:	f7ff ff64 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff ffb2 	bl	8001df4 <NVIC_EncodePriority>
 8001e90:	4602      	mov	r2, r0
 8001e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff81 	bl	8001da0 <__NVIC_SetPriority>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff57 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b08b      	sub	sp, #44	; 0x2c
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed6:	e169      	b.n	80021ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 8158 	bne.w	80021a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4a9a      	ldr	r2, [pc, #616]	; (8002164 <HAL_GPIO_Init+0x2a0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d05e      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f00:	4a98      	ldr	r2, [pc, #608]	; (8002164 <HAL_GPIO_Init+0x2a0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d875      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f06:	4a98      	ldr	r2, [pc, #608]	; (8002168 <HAL_GPIO_Init+0x2a4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d058      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f0c:	4a96      	ldr	r2, [pc, #600]	; (8002168 <HAL_GPIO_Init+0x2a4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d86f      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f12:	4a96      	ldr	r2, [pc, #600]	; (800216c <HAL_GPIO_Init+0x2a8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d052      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f18:	4a94      	ldr	r2, [pc, #592]	; (800216c <HAL_GPIO_Init+0x2a8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d869      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f1e:	4a94      	ldr	r2, [pc, #592]	; (8002170 <HAL_GPIO_Init+0x2ac>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d04c      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f24:	4a92      	ldr	r2, [pc, #584]	; (8002170 <HAL_GPIO_Init+0x2ac>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d863      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f2a:	4a92      	ldr	r2, [pc, #584]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d046      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f30:	4a90      	ldr	r2, [pc, #576]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d85d      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f36:	2b12      	cmp	r3, #18
 8001f38:	d82a      	bhi.n	8001f90 <HAL_GPIO_Init+0xcc>
 8001f3a:	2b12      	cmp	r3, #18
 8001f3c:	d859      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <HAL_GPIO_Init+0x80>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001fbf 	.word	0x08001fbf
 8001f48:	08001f99 	.word	0x08001f99
 8001f4c:	08001fab 	.word	0x08001fab
 8001f50:	08001fed 	.word	0x08001fed
 8001f54:	08001ff3 	.word	0x08001ff3
 8001f58:	08001ff3 	.word	0x08001ff3
 8001f5c:	08001ff3 	.word	0x08001ff3
 8001f60:	08001ff3 	.word	0x08001ff3
 8001f64:	08001ff3 	.word	0x08001ff3
 8001f68:	08001ff3 	.word	0x08001ff3
 8001f6c:	08001ff3 	.word	0x08001ff3
 8001f70:	08001ff3 	.word	0x08001ff3
 8001f74:	08001ff3 	.word	0x08001ff3
 8001f78:	08001ff3 	.word	0x08001ff3
 8001f7c:	08001ff3 	.word	0x08001ff3
 8001f80:	08001ff3 	.word	0x08001ff3
 8001f84:	08001ff3 	.word	0x08001ff3
 8001f88:	08001fa1 	.word	0x08001fa1
 8001f8c:	08001fb5 	.word	0x08001fb5
 8001f90:	4a79      	ldr	r2, [pc, #484]	; (8002178 <HAL_GPIO_Init+0x2b4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f96:	e02c      	b.n	8001ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	623b      	str	r3, [r7, #32]
          break;
 8001f9e:	e029      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e024      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	3308      	adds	r3, #8
 8001fb0:	623b      	str	r3, [r7, #32]
          break;
 8001fb2:	e01f      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	330c      	adds	r3, #12
 8001fba:	623b      	str	r3, [r7, #32]
          break;
 8001fbc:	e01a      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d102      	bne.n	8001fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	623b      	str	r3, [r7, #32]
          break;
 8001fca:	e013      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	611a      	str	r2, [r3, #16]
          break;
 8001fde:	e009      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	615a      	str	r2, [r3, #20]
          break;
 8001fea:	e003      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
          break;
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          break;
 8001ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2bff      	cmp	r3, #255	; 0xff
 8001ff8:	d801      	bhi.n	8001ffe <HAL_GPIO_Init+0x13a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	e001      	b.n	8002002 <HAL_GPIO_Init+0x13e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2bff      	cmp	r3, #255	; 0xff
 8002008:	d802      	bhi.n	8002010 <HAL_GPIO_Init+0x14c>
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	e002      	b.n	8002016 <HAL_GPIO_Init+0x152>
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	3b08      	subs	r3, #8
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	210f      	movs	r1, #15
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	401a      	ands	r2, r3
 8002028:	6a39      	ldr	r1, [r7, #32]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	431a      	orrs	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80b1 	beq.w	80021a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002044:	4b4d      	ldr	r3, [pc, #308]	; (800217c <HAL_GPIO_Init+0x2b8>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a4c      	ldr	r2, [pc, #304]	; (800217c <HAL_GPIO_Init+0x2b8>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b4a      	ldr	r3, [pc, #296]	; (800217c <HAL_GPIO_Init+0x2b8>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800205c:	4a48      	ldr	r2, [pc, #288]	; (8002180 <HAL_GPIO_Init+0x2bc>)
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a40      	ldr	r2, [pc, #256]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <HAL_GPIO_Init+0x1ec>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3f      	ldr	r2, [pc, #252]	; (8002188 <HAL_GPIO_Init+0x2c4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d00d      	beq.n	80020ac <HAL_GPIO_Init+0x1e8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3e      	ldr	r2, [pc, #248]	; (800218c <HAL_GPIO_Init+0x2c8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d007      	beq.n	80020a8 <HAL_GPIO_Init+0x1e4>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a3d      	ldr	r2, [pc, #244]	; (8002190 <HAL_GPIO_Init+0x2cc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_GPIO_Init+0x1e0>
 80020a0:	2303      	movs	r3, #3
 80020a2:	e006      	b.n	80020b2 <HAL_GPIO_Init+0x1ee>
 80020a4:	2304      	movs	r3, #4
 80020a6:	e004      	b.n	80020b2 <HAL_GPIO_Init+0x1ee>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e002      	b.n	80020b2 <HAL_GPIO_Init+0x1ee>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_GPIO_Init+0x1ee>
 80020b0:	2300      	movs	r3, #0
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	f002 0203 	and.w	r2, r2, #3
 80020b8:	0092      	lsls	r2, r2, #2
 80020ba:	4093      	lsls	r3, r2
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020c2:	492f      	ldr	r1, [pc, #188]	; (8002180 <HAL_GPIO_Init+0x2bc>)
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020dc:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	492c      	ldr	r1, [pc, #176]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
 80020e8:	e006      	b.n	80020f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ea:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	4928      	ldr	r1, [pc, #160]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002104:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4922      	ldr	r1, [pc, #136]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
 8002110:	e006      	b.n	8002120 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	43db      	mvns	r3, r3
 800211a:	491e      	ldr	r1, [pc, #120]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 800211c:	4013      	ands	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4918      	ldr	r1, [pc, #96]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	43db      	mvns	r3, r3
 8002142:	4914      	ldr	r1, [pc, #80]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 8002144:	4013      	ands	r3, r2
 8002146:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d021      	beq.n	8002198 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	490e      	ldr	r1, [pc, #56]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
 8002160:	e021      	b.n	80021a6 <HAL_GPIO_Init+0x2e2>
 8002162:	bf00      	nop
 8002164:	10320000 	.word	0x10320000
 8002168:	10310000 	.word	0x10310000
 800216c:	10220000 	.word	0x10220000
 8002170:	10210000 	.word	0x10210000
 8002174:	10120000 	.word	0x10120000
 8002178:	10110000 	.word	0x10110000
 800217c:	40021000 	.word	0x40021000
 8002180:	40010000 	.word	0x40010000
 8002184:	40010800 	.word	0x40010800
 8002188:	40010c00 	.word	0x40010c00
 800218c:	40011000 	.word	0x40011000
 8002190:	40011400 	.word	0x40011400
 8002194:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_GPIO_Init+0x304>)
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	43db      	mvns	r3, r3
 80021a0:	4909      	ldr	r1, [pc, #36]	; (80021c8 <HAL_GPIO_Init+0x304>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	3301      	adds	r3, #1
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f47f ae8e 	bne.w	8001ed8 <HAL_GPIO_Init+0x14>
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	372c      	adds	r7, #44	; 0x2c
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	40010400 	.word	0x40010400

080021cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e001      	b.n	80021ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	807b      	strh	r3, [r7, #2]
 8002206:	4613      	mov	r3, r2
 8002208:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800220a:	787b      	ldrb	r3, [r7, #1]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002210:	887a      	ldrh	r2, [r7, #2]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002216:	e003      	b.n	8002220 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	041a      	lsls	r2, r3, #16
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	611a      	str	r2, [r3, #16]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800223c:	887a      	ldrh	r2, [r7, #2]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4013      	ands	r3, r2
 8002242:	041a      	lsls	r2, r3, #16
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43d9      	mvns	r1, r3
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	400b      	ands	r3, r1
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e272      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8087 	beq.w	800238a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800227c:	4b92      	ldr	r3, [pc, #584]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b04      	cmp	r3, #4
 8002286:	d00c      	beq.n	80022a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002288:	4b8f      	ldr	r3, [pc, #572]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b08      	cmp	r3, #8
 8002292:	d112      	bne.n	80022ba <HAL_RCC_OscConfig+0x5e>
 8002294:	4b8c      	ldr	r3, [pc, #560]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a0:	d10b      	bne.n	80022ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a2:	4b89      	ldr	r3, [pc, #548]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d06c      	beq.n	8002388 <HAL_RCC_OscConfig+0x12c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d168      	bne.n	8002388 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e24c      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c2:	d106      	bne.n	80022d2 <HAL_RCC_OscConfig+0x76>
 80022c4:	4b80      	ldr	r3, [pc, #512]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a7f      	ldr	r2, [pc, #508]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	e02e      	b.n	8002330 <HAL_RCC_OscConfig+0xd4>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x98>
 80022da:	4b7b      	ldr	r3, [pc, #492]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7a      	ldr	r2, [pc, #488]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a77      	ldr	r2, [pc, #476]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e01d      	b.n	8002330 <HAL_RCC_OscConfig+0xd4>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0xbc>
 80022fe:	4b72      	ldr	r3, [pc, #456]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a71      	ldr	r2, [pc, #452]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b6f      	ldr	r3, [pc, #444]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a6e      	ldr	r2, [pc, #440]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e00b      	b.n	8002330 <HAL_RCC_OscConfig+0xd4>
 8002318:	4b6b      	ldr	r3, [pc, #428]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a6a      	ldr	r2, [pc, #424]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800231e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b68      	ldr	r3, [pc, #416]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a67      	ldr	r2, [pc, #412]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800232a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d013      	beq.n	8002360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fd44 	bl	8000dc4 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7fe fd40 	bl	8000dc4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e200      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	4b5d      	ldr	r3, [pc, #372]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0xe4>
 800235e:	e014      	b.n	800238a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe fd30 	bl	8000dc4 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002368:	f7fe fd2c 	bl	8000dc4 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1ec      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237a:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x10c>
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d063      	beq.n	800245e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002396:	4b4c      	ldr	r3, [pc, #304]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00b      	beq.n	80023ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023a2:	4b49      	ldr	r3, [pc, #292]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d11c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x18c>
 80023ae:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d116      	bne.n	80023e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ba:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_RCC_OscConfig+0x176>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e1c0      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4939      	ldr	r1, [pc, #228]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	e03a      	b.n	800245e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f0:	4b36      	ldr	r3, [pc, #216]	; (80024cc <HAL_RCC_OscConfig+0x270>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7fe fce5 	bl	8000dc4 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fe:	f7fe fce1 	bl	8000dc4 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e1a1      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241c:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4927      	ldr	r1, [pc, #156]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
 8002430:	e015      	b.n	800245e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <HAL_RCC_OscConfig+0x270>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7fe fcc4 	bl	8000dc4 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002440:	f7fe fcc0 	bl	8000dc4 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e180      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d03a      	beq.n	80024e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d019      	beq.n	80024a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002472:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002474:	2201      	movs	r2, #1
 8002476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7fe fca4 	bl	8000dc4 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002480:	f7fe fca0 	bl	8000dc4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e160      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002492:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800249e:	2001      	movs	r0, #1
 80024a0:	f000 faf4 	bl	8002a8c <RCC_Delay>
 80024a4:	e01c      	b.n	80024e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_RCC_OscConfig+0x274>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ac:	f7fe fc8a 	bl	8000dc4 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b2:	e00f      	b.n	80024d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b4:	f7fe fc86 	bl	8000dc4 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d908      	bls.n	80024d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e146      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	42420000 	.word	0x42420000
 80024d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d4:	4b92      	ldr	r3, [pc, #584]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e9      	bne.n	80024b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a6 	beq.w	800263a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f2:	4b8b      	ldr	r3, [pc, #556]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10d      	bne.n	800251a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	4b88      	ldr	r3, [pc, #544]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a87      	ldr	r2, [pc, #540]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	61d3      	str	r3, [r2, #28]
 800250a:	4b85      	ldr	r3, [pc, #532]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002516:	2301      	movs	r3, #1
 8002518:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4b82      	ldr	r3, [pc, #520]	; (8002724 <HAL_RCC_OscConfig+0x4c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d118      	bne.n	8002558 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002526:	4b7f      	ldr	r3, [pc, #508]	; (8002724 <HAL_RCC_OscConfig+0x4c8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7e      	ldr	r2, [pc, #504]	; (8002724 <HAL_RCC_OscConfig+0x4c8>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002532:	f7fe fc47 	bl	8000dc4 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253a:	f7fe fc43 	bl	8000dc4 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b64      	cmp	r3, #100	; 0x64
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e103      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	4b75      	ldr	r3, [pc, #468]	; (8002724 <HAL_RCC_OscConfig+0x4c8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x312>
 8002560:	4b6f      	ldr	r3, [pc, #444]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4a6e      	ldr	r2, [pc, #440]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6213      	str	r3, [r2, #32]
 800256c:	e02d      	b.n	80025ca <HAL_RCC_OscConfig+0x36e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x334>
 8002576:	4b6a      	ldr	r3, [pc, #424]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4a69      	ldr	r2, [pc, #420]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6213      	str	r3, [r2, #32]
 8002582:	4b67      	ldr	r3, [pc, #412]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a66      	ldr	r2, [pc, #408]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	f023 0304 	bic.w	r3, r3, #4
 800258c:	6213      	str	r3, [r2, #32]
 800258e:	e01c      	b.n	80025ca <HAL_RCC_OscConfig+0x36e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b05      	cmp	r3, #5
 8002596:	d10c      	bne.n	80025b2 <HAL_RCC_OscConfig+0x356>
 8002598:	4b61      	ldr	r3, [pc, #388]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4a60      	ldr	r2, [pc, #384]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800259e:	f043 0304 	orr.w	r3, r3, #4
 80025a2:	6213      	str	r3, [r2, #32]
 80025a4:	4b5e      	ldr	r3, [pc, #376]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4a5d      	ldr	r2, [pc, #372]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6213      	str	r3, [r2, #32]
 80025b0:	e00b      	b.n	80025ca <HAL_RCC_OscConfig+0x36e>
 80025b2:	4b5b      	ldr	r3, [pc, #364]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4a5a      	ldr	r2, [pc, #360]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	6213      	str	r3, [r2, #32]
 80025be:	4b58      	ldr	r3, [pc, #352]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4a57      	ldr	r2, [pc, #348]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d015      	beq.n	80025fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d2:	f7fe fbf7 	bl	8000dc4 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fbf3 	bl	8000dc4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e0b1      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f0:	4b4b      	ldr	r3, [pc, #300]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0ee      	beq.n	80025da <HAL_RCC_OscConfig+0x37e>
 80025fc:	e014      	b.n	8002628 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fe:	f7fe fbe1 	bl	8000dc4 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002604:	e00a      	b.n	800261c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f7fe fbdd 	bl	8000dc4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	; 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e09b      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261c:	4b40      	ldr	r3, [pc, #256]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ee      	bne.n	8002606 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002628:	7dfb      	ldrb	r3, [r7, #23]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d105      	bne.n	800263a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262e:	4b3c      	ldr	r3, [pc, #240]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a3b      	ldr	r2, [pc, #236]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002638:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8087 	beq.w	8002752 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002644:	4b36      	ldr	r3, [pc, #216]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d061      	beq.n	8002714 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d146      	bne.n	80026e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002658:	4b33      	ldr	r3, [pc, #204]	; (8002728 <HAL_RCC_OscConfig+0x4cc>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe fbb1 	bl	8000dc4 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002666:	f7fe fbad 	bl	8000dc4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e06d      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002678:	4b29      	ldr	r3, [pc, #164]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268c:	d108      	bne.n	80026a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800268e:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	4921      	ldr	r1, [pc, #132]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a19      	ldr	r1, [r3, #32]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	430b      	orrs	r3, r1
 80026b2:	491b      	ldr	r1, [pc, #108]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_RCC_OscConfig+0x4cc>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fe fb81 	bl	8000dc4 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c6:	f7fe fb7d 	bl	8000dc4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e03d      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x46a>
 80026e4:	e035      	b.n	8002752 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_RCC_OscConfig+0x4cc>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fb6a 	bl	8000dc4 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f4:	f7fe fb66 	bl	8000dc4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e026      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x498>
 8002712:	e01e      	b.n	8002752 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d107      	bne.n	800272c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e019      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
 8002728:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_OscConfig+0x500>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	429a      	cmp	r2, r3
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000

08002760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0d0      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002774:	4b6a      	ldr	r3, [pc, #424]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d910      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b67      	ldr	r3, [pc, #412]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 0207 	bic.w	r2, r3, #7
 800278a:	4965      	ldr	r1, [pc, #404]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b63      	ldr	r3, [pc, #396]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0b8      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d020      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027bc:	4b59      	ldr	r3, [pc, #356]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a58      	ldr	r2, [pc, #352]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d4:	4b53      	ldr	r3, [pc, #332]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	4b50      	ldr	r3, [pc, #320]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	494d      	ldr	r1, [pc, #308]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d040      	beq.n	8002880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d115      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e07f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281e:	4b41      	ldr	r3, [pc, #260]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e073      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e06b      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800283e:	4b39      	ldr	r3, [pc, #228]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f023 0203 	bic.w	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4936      	ldr	r1, [pc, #216]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002850:	f7fe fab8 	bl	8000dc4 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	e00a      	b.n	800286e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002858:	f7fe fab4 	bl	8000dc4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e053      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 020c 	and.w	r2, r3, #12
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	429a      	cmp	r2, r3
 800287e:	d1eb      	bne.n	8002858 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002880:	4b27      	ldr	r3, [pc, #156]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d210      	bcs.n	80028b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 0207 	bic.w	r2, r3, #7
 8002896:	4922      	ldr	r1, [pc, #136]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e032      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4916      	ldr	r1, [pc, #88]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	490e      	ldr	r1, [pc, #56]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ee:	f000 f821 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028f2:	4602      	mov	r2, r0
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	490a      	ldr	r1, [pc, #40]	; (8002928 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	5ccb      	ldrb	r3, [r1, r3]
 8002902:	fa22 f303 	lsr.w	r3, r2, r3
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x1cc>)
 8002908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_RCC_ClockConfig+0x1d0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe f8aa 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40022000 	.word	0x40022000
 8002924:	40021000 	.word	0x40021000
 8002928:	08005148 	.word	0x08005148
 800292c:	20000000 	.word	0x20000000
 8002930:	20000004 	.word	0x20000004

08002934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	b490      	push	{r4, r7}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800293a:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800293c:	1d3c      	adds	r4, r7, #4
 800293e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002944:	f240 2301 	movw	r3, #513	; 0x201
 8002948:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800295e:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b04      	cmp	r3, #4
 800296c:	d002      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x40>
 800296e:	2b08      	cmp	r3, #8
 8002970:	d003      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x46>
 8002972:	e02b      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002974:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002976:	623b      	str	r3, [r7, #32]
      break;
 8002978:	e02b      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	0c9b      	lsrs	r3, r3, #18
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3328      	adds	r3, #40	; 0x28
 8002984:	443b      	add	r3, r7
 8002986:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800298a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d012      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	0c5b      	lsrs	r3, r3, #17
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	3328      	adds	r3, #40	; 0x28
 80029a2:	443b      	add	r3, r7
 80029a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ae:	fb03 f202 	mul.w	r2, r3, r2
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	e004      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	623b      	str	r3, [r7, #32]
      break;
 80029ca:	e002      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ce:	623b      	str	r3, [r7, #32]
      break;
 80029d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d2:	6a3b      	ldr	r3, [r7, #32]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3728      	adds	r7, #40	; 0x28
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc90      	pop	{r4, r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	08005130 	.word	0x08005130
 80029e4:	40021000 	.word	0x40021000
 80029e8:	007a1200 	.word	0x007a1200
 80029ec:	003d0900 	.word	0x003d0900

080029f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f4:	4b02      	ldr	r3, [pc, #8]	; (8002a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	20000000 	.word	0x20000000

08002a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a08:	f7ff fff2 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	0adb      	lsrs	r3, r3, #11
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4903      	ldr	r1, [pc, #12]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	08005158 	.word	0x08005158

08002a2c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	220f      	movs	r2, #15
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_RCC_GetClockConfig+0x58>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0203 	and.w	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a48:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_RCC_GetClockConfig+0x58>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_GetClockConfig+0x58>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_RCC_GetClockConfig+0x58>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_RCC_GetClockConfig+0x5c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0207 	and.w	r2, r3, #7
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40022000 	.word	0x40022000

08002a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <RCC_Delay+0x34>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <RCC_Delay+0x38>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0a5b      	lsrs	r3, r3, #9
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002aa8:	bf00      	nop
  }
  while (Delay --);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1e5a      	subs	r2, r3, #1
 8002aae:	60fa      	str	r2, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f9      	bne.n	8002aa8 <RCC_Delay+0x1c>
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	10624dd3 	.word	0x10624dd3

08002ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d07d      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae8:	4b4f      	ldr	r3, [pc, #316]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10d      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af4:	4b4c      	ldr	r3, [pc, #304]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	4a4b      	ldr	r2, [pc, #300]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afe:	61d3      	str	r3, [r2, #28]
 8002b00:	4b49      	ldr	r3, [pc, #292]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d118      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1c:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a42      	ldr	r2, [pc, #264]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b28:	f7fe f94c 	bl	8000dc4 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	e008      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7fe f948 	bl	8000dc4 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e06d      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b4e:	4b36      	ldr	r3, [pc, #216]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d02e      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d027      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b6c:	4b2e      	ldr	r3, [pc, #184]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b76:	4b2e      	ldr	r3, [pc, #184]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b7c:	4b2c      	ldr	r3, [pc, #176]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b82:	4a29      	ldr	r2, [pc, #164]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d014      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fe f917 	bl	8000dc4 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe f913 	bl	8000dc4 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e036      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ee      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4917      	ldr	r1, [pc, #92]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	490b      	ldr	r1, [pc, #44]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4904      	ldr	r1, [pc, #16]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	42420440 	.word	0x42420440

08002c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e041      	b.n	8002cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fd fe4a 	bl	80008f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f000 faba 	bl	80031ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d001      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e03a      	b.n	8002d62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <HAL_TIM_Base_Start_IT+0x98>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00e      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x58>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d16:	d009      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x58>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x58>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d111      	bne.n	8002d50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d010      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0201 	orr.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4e:	e007      	b.n	8002d60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40000800 	.word	0x40000800

08002d78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e041      	b.n	8002e0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fd fdc4 	bl	800092c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f000 fa18 	bl	80031ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d122      	bne.n	8002e72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d11b      	bne.n	8002e72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f06f 0202 	mvn.w	r2, #2
 8002e42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f9ac 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002e5e:	e005      	b.n	8002e6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f99f 	bl	80031a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f9ae 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d122      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d11b      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f06f 0204 	mvn.w	r2, #4
 8002e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f982 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002eb2:	e005      	b.n	8002ec0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f975 	bl	80031a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f984 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d122      	bne.n	8002f1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d11b      	bne.n	8002f1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f06f 0208 	mvn.w	r2, #8
 8002eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2204      	movs	r2, #4
 8002ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f958 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002f06:	e005      	b.n	8002f14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f94b 	bl	80031a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f95a 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d122      	bne.n	8002f6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b10      	cmp	r3, #16
 8002f34:	d11b      	bne.n	8002f6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f06f 0210 	mvn.w	r2, #16
 8002f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2208      	movs	r2, #8
 8002f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f92e 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002f5a:	e005      	b.n	8002f68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f921 	bl	80031a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f930 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10e      	bne.n	8002f9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d107      	bne.n	8002f9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f06f 0201 	mvn.w	r2, #1
 8002f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7fd fb99 	bl	80006cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa4:	2b80      	cmp	r3, #128	; 0x80
 8002fa6:	d10e      	bne.n	8002fc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb2:	2b80      	cmp	r3, #128	; 0x80
 8002fb4:	d107      	bne.n	8002fc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fb64 	bl	800368e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd0:	2b40      	cmp	r3, #64	; 0x40
 8002fd2:	d10e      	bne.n	8002ff2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d107      	bne.n	8002ff2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f8f4 	bl	80031da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d10e      	bne.n	800301e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b20      	cmp	r3, #32
 800300c:	d107      	bne.n	800301e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f06f 0220 	mvn.w	r2, #32
 8003016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fb2f 	bl	800367c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800303e:	2302      	movs	r3, #2
 8003040:	e0ac      	b.n	800319c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	f200 809f 	bhi.w	8003190 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003052:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	0800308d 	.word	0x0800308d
 800305c:	08003191 	.word	0x08003191
 8003060:	08003191 	.word	0x08003191
 8003064:	08003191 	.word	0x08003191
 8003068:	080030cd 	.word	0x080030cd
 800306c:	08003191 	.word	0x08003191
 8003070:	08003191 	.word	0x08003191
 8003074:	08003191 	.word	0x08003191
 8003078:	0800310f 	.word	0x0800310f
 800307c:	08003191 	.word	0x08003191
 8003080:	08003191 	.word	0x08003191
 8003084:	08003191 	.word	0x08003191
 8003088:	0800314f 	.word	0x0800314f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f90c 	bl	80032b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0208 	orr.w	r2, r2, #8
 80030a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0204 	bic.w	r2, r2, #4
 80030b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6999      	ldr	r1, [r3, #24]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	619a      	str	r2, [r3, #24]
      break;
 80030ca:	e062      	b.n	8003192 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f952 	bl	800337c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6999      	ldr	r1, [r3, #24]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	021a      	lsls	r2, r3, #8
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	619a      	str	r2, [r3, #24]
      break;
 800310c:	e041      	b.n	8003192 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f99b 	bl	8003450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0208 	orr.w	r2, r2, #8
 8003128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69da      	ldr	r2, [r3, #28]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0204 	bic.w	r2, r2, #4
 8003138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69d9      	ldr	r1, [r3, #28]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	61da      	str	r2, [r3, #28]
      break;
 800314c:	e021      	b.n	8003192 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f9e5 	bl	8003524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69d9      	ldr	r1, [r3, #28]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	021a      	lsls	r2, r3, #8
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	61da      	str	r2, [r3, #28]
      break;
 800318e:	e000      	b.n	8003192 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003190:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a29      	ldr	r2, [pc, #164]	; (80032a4 <TIM_Base_SetConfig+0xb8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00b      	beq.n	800321c <TIM_Base_SetConfig+0x30>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d007      	beq.n	800321c <TIM_Base_SetConfig+0x30>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <TIM_Base_SetConfig+0xbc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0x30>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a25      	ldr	r2, [pc, #148]	; (80032ac <TIM_Base_SetConfig+0xc0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d108      	bne.n	800322e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a1c      	ldr	r2, [pc, #112]	; (80032a4 <TIM_Base_SetConfig+0xb8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00b      	beq.n	800324e <TIM_Base_SetConfig+0x62>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323c:	d007      	beq.n	800324e <TIM_Base_SetConfig+0x62>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <TIM_Base_SetConfig+0xbc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d003      	beq.n	800324e <TIM_Base_SetConfig+0x62>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a18      	ldr	r2, [pc, #96]	; (80032ac <TIM_Base_SetConfig+0xc0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d108      	bne.n	8003260 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <TIM_Base_SetConfig+0xb8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d103      	bne.n	8003294 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	615a      	str	r2, [r3, #20]
}
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800

080032b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f023 0201 	bic.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f023 0302 	bic.w	r3, r3, #2
 80032f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a1c      	ldr	r2, [pc, #112]	; (8003378 <TIM_OC1_SetConfig+0xc8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d10c      	bne.n	8003326 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f023 0308 	bic.w	r3, r3, #8
 8003312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f023 0304 	bic.w	r3, r3, #4
 8003324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a13      	ldr	r2, [pc, #76]	; (8003378 <TIM_OC1_SetConfig+0xc8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d111      	bne.n	8003352 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800333c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	621a      	str	r2, [r3, #32]
}
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40012c00 	.word	0x40012c00

0800337c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f023 0210 	bic.w	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0320 	bic.w	r3, r3, #32
 80033c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a1d      	ldr	r2, [pc, #116]	; (800344c <TIM_OC2_SetConfig+0xd0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d10d      	bne.n	80033f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a14      	ldr	r2, [pc, #80]	; (800344c <TIM_OC2_SetConfig+0xd0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d113      	bne.n	8003428 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800340e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	621a      	str	r2, [r3, #32]
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	40012c00 	.word	0x40012c00

08003450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <TIM_OC3_SetConfig+0xd0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10d      	bne.n	80034ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a14      	ldr	r2, [pc, #80]	; (8003520 <TIM_OC3_SetConfig+0xd0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d113      	bne.n	80034fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	621a      	str	r2, [r3, #32]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40012c00 	.word	0x40012c00

08003524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800356e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	031b      	lsls	r3, r3, #12
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a0f      	ldr	r2, [pc, #60]	; (80035bc <TIM_OC4_SetConfig+0x98>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d109      	bne.n	8003598 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800358a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	019b      	lsls	r3, r3, #6
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr
 80035bc:	40012c00 	.word	0x40012c00

080035c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e046      	b.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a16      	ldr	r2, [pc, #88]	; (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d009      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a10      	ldr	r2, [pc, #64]	; (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10c      	bne.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4313      	orrs	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800

0800367c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80036ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036b2:	2b84      	cmp	r3, #132	; 0x84
 80036b4:	d005      	beq.n	80036c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80036b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4413      	add	r3, r2
 80036be:	3303      	adds	r3, #3
 80036c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80036c2:	68fb      	ldr	r3, [r7, #12]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80036d2:	f000 fc99 	bl	8004008 <vTaskStartScheduler>
  
  return osOK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}

080036dc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80036dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af04      	add	r7, sp, #16
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d020      	beq.n	8003730 <osThreadCreate+0x54>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01c      	beq.n	8003730 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685c      	ldr	r4, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681d      	ldr	r5, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691e      	ldr	r6, [r3, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ffc9 	bl	80036a0 <makeFreeRtosPriority>
 800370e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003718:	9202      	str	r2, [sp, #8]
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	9100      	str	r1, [sp, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	4632      	mov	r2, r6
 8003722:	4629      	mov	r1, r5
 8003724:	4620      	mov	r0, r4
 8003726:	f000 fab0 	bl	8003c8a <xTaskCreateStatic>
 800372a:	4603      	mov	r3, r0
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	e01c      	b.n	800376a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685c      	ldr	r4, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800373c:	b29e      	uxth	r6, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ffab 	bl	80036a0 <makeFreeRtosPriority>
 800374a:	4602      	mov	r2, r0
 800374c:	f107 030c 	add.w	r3, r7, #12
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	9200      	str	r2, [sp, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4632      	mov	r2, r6
 8003758:	4629      	mov	r1, r5
 800375a:	4620      	mov	r0, r4
 800375c:	f000 faf1 	bl	8003d42 <xTaskCreate>
 8003760:	4603      	mov	r3, r0
 8003762:	2b01      	cmp	r3, #1
 8003764:	d001      	beq.n	800376a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800376a:	68fb      	ldr	r3, [r7, #12]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003774 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <osDelay+0x16>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	e000      	b.n	800378c <osDelay+0x18>
 800378a:	2301      	movs	r3, #1
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fc07 	bl	8003fa0 <vTaskDelay>
  
  return osOK;
 8003792:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f103 0208 	add.w	r2, r3, #8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295
 80037b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f103 0208 	add.w	r2, r3, #8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f103 0208 	add.w	r2, r3, #8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	601a      	str	r2, [r3, #0]
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d103      	bne.n	8003858 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e00c      	b.n	8003872 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3308      	adds	r3, #8
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	e002      	b.n	8003866 <vListInsert+0x2e>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	429a      	cmp	r2, r3
 8003870:	d2f6      	bcs.n	8003860 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6892      	ldr	r2, [r2, #8]
 80038be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6852      	ldr	r2, [r2, #4]
 80038c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d103      	bne.n	80038dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	1e5a      	subs	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
	...

080038fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003926:	f001 f8a9 	bl	8004a7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	441a      	add	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	3b01      	subs	r3, #1
 8003958:	68f9      	ldr	r1, [r7, #12]
 800395a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	441a      	add	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	22ff      	movs	r2, #255	; 0xff
 8003972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d114      	bne.n	80039a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01a      	beq.n	80039ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3310      	adds	r3, #16
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fd5f 	bl	800444c <xTaskRemoveFromEventList>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d012      	beq.n	80039ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <xQueueGenericReset+0xcc>)
 8003996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	e009      	b.n	80039ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3310      	adds	r3, #16
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fef6 	bl	800379c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3324      	adds	r3, #36	; 0x24
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fef1 	bl	800379c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039ba:	f001 f88f 	bl	8004adc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039be:	2301      	movs	r3, #1
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	e000ed04 	.word	0xe000ed04

080039cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	; 0x28
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	613b      	str	r3, [r7, #16]
}
 80039f2:	bf00      	nop
 80039f4:	e7fe      	b.n	80039f4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	e004      	b.n	8003a0c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	3348      	adds	r3, #72	; 0x48
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 f933 	bl	8004c7c <pvPortMalloc>
 8003a16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00f      	beq.n	8003a3e <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	3348      	adds	r3, #72	; 0x48
 8003a22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a2c:	79fa      	ldrb	r2, [r7, #7]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	4613      	mov	r3, r2
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f805 	bl	8003a48 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a3e:	69bb      	ldr	r3, [r7, #24]
	}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e002      	b.n	8003a6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a76:	2101      	movs	r1, #1
 8003a78:	69b8      	ldr	r0, [r7, #24]
 8003a7a:	f7ff ff3f 	bl	80038fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b08e      	sub	sp, #56	; 0x38
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ab0:	bf00      	nop
 8003ab2:	e7fe      	b.n	8003ab2 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <xQueueGenericSendFromISR+0x3c>
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <xQueueGenericSendFromISR+0x40>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <xQueueGenericSendFromISR+0x42>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	623b      	str	r3, [r7, #32]
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d103      	bne.n	8003af0 <xQueueGenericSendFromISR+0x6a>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <xQueueGenericSendFromISR+0x6e>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <xQueueGenericSendFromISR+0x70>
 8003af4:	2300      	movs	r3, #0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	61fb      	str	r3, [r7, #28]
}
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b10:	f001 f876 	bl	8004c00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b14:	f3ef 8211 	mrs	r2, BASEPRI
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	61ba      	str	r2, [r7, #24]
 8003b2a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d302      	bcc.n	8003b42 <xQueueGenericSendFromISR+0xbc>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d12c      	bne.n	8003b9c <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b52:	f000 f830 	bl	8003bb6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b56:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5e:	d112      	bne.n	8003b86 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d016      	beq.n	8003b96 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	3324      	adds	r3, #36	; 0x24
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fc6d 	bl	800444c <xTaskRemoveFromEventList>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	e007      	b.n	8003b96 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	b25a      	sxtb	r2, r3
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b96:	2301      	movs	r3, #1
 8003b98:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003b9a:	e001      	b.n	8003ba0 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003baa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3738      	adds	r7, #56	; 0x38
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10d      	bne.n	8003bf0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d14d      	bne.n	8003c78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fd6f 	bl	80046c4 <xTaskPriorityDisinherit>
 8003be6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	e043      	b.n	8003c78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d119      	bne.n	8003c2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6898      	ldr	r0, [r3, #8]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	f001 fa37 	bl	8005074 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	441a      	add	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d32b      	bcc.n	8003c78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	e026      	b.n	8003c78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68d8      	ldr	r0, [r3, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	461a      	mov	r2, r3
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	f001 fa1d 	bl	8005074 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	425b      	negs	r3, r3
 8003c44:	441a      	add	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d207      	bcs.n	8003c66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	425b      	negs	r3, r3
 8003c60:	441a      	add	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d105      	bne.n	8003c78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c80:	697b      	ldr	r3, [r7, #20]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b08e      	sub	sp, #56	; 0x38
 8003c8e:	af04      	add	r7, sp, #16
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	623b      	str	r3, [r7, #32]
}
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <xTaskCreateStatic+0x46>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	61fb      	str	r3, [r7, #28]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cd0:	2354      	movs	r3, #84	; 0x54
 8003cd2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b54      	cmp	r3, #84	; 0x54
 8003cd8:	d00a      	beq.n	8003cf0 <xTaskCreateStatic+0x66>
	__asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	61bb      	str	r3, [r7, #24]
}
 8003cec:	bf00      	nop
 8003cee:	e7fe      	b.n	8003cee <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01e      	beq.n	8003d34 <xTaskCreateStatic+0xaa>
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01b      	beq.n	8003d34 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9303      	str	r3, [sp, #12]
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	9302      	str	r3, [sp, #8]
 8003d16:	f107 0314 	add.w	r3, r7, #20
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f850 	bl	8003dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d2e:	f000 f8cd 	bl	8003ecc <prvAddNewTaskToReadyList>
 8003d32:	e001      	b.n	8003d38 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d38:	697b      	ldr	r3, [r7, #20]
	}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3728      	adds	r7, #40	; 0x28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b08c      	sub	sp, #48	; 0x30
 8003d46:	af04      	add	r7, sp, #16
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 ff90 	bl	8004c7c <pvPortMalloc>
 8003d5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00e      	beq.n	8003d82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d64:	2054      	movs	r0, #84	; 0x54
 8003d66:	f000 ff89 	bl	8004c7c <pvPortMalloc>
 8003d6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
 8003d78:	e005      	b.n	8003d86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d7a:	6978      	ldr	r0, [r7, #20]
 8003d7c:	f001 f842 	bl	8004e04 <vPortFree>
 8003d80:	e001      	b.n	8003d86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d017      	beq.n	8003dbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	2300      	movs	r3, #0
 8003d98:	9303      	str	r3, [sp, #12]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	9302      	str	r3, [sp, #8]
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f80e 	bl	8003dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003db0:	69f8      	ldr	r0, [r7, #28]
 8003db2:	f000 f88b 	bl	8003ecc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003db6:	2301      	movs	r3, #1
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	e002      	b.n	8003dc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
	}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003de4:	3b01      	subs	r3, #1
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	f023 0307 	bic.w	r3, r3, #7
 8003df2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	617b      	str	r3, [r7, #20]
}
 8003e10:	bf00      	nop
 8003e12:	e7fe      	b.n	8003e12 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e14:	2300      	movs	r3, #0
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	e012      	b.n	8003e40 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	7819      	ldrb	r1, [r3, #0]
 8003e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	4413      	add	r3, r2
 8003e28:	3334      	adds	r3, #52	; 0x34
 8003e2a:	460a      	mov	r2, r1
 8003e2c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d006      	beq.n	8003e48 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	d9e9      	bls.n	8003e1a <prvInitialiseNewTask+0x4e>
 8003e46:	e000      	b.n	8003e4a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003e48:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d901      	bls.n	8003e5c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e58:	2306      	movs	r3, #6
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	3304      	adds	r3, #4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fcb1 	bl	80037da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	3318      	adds	r3, #24
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fcac 	bl	80037da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	f1c3 0207 	rsb	r2, r3, #7
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	68f9      	ldr	r1, [r7, #12]
 8003eaa:	69b8      	ldr	r0, [r7, #24]
 8003eac:	f000 fcf6 	bl	800489c <pxPortInitialiseStack>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ec2:	bf00      	nop
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ed4:	f000 fdd2 	bl	8004a7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <prvAddNewTaskToReadyList+0xb8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3301      	adds	r3, #1
 8003ede:	4a29      	ldr	r2, [pc, #164]	; (8003f84 <prvAddNewTaskToReadyList+0xb8>)
 8003ee0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ee2:	4b29      	ldr	r3, [pc, #164]	; (8003f88 <prvAddNewTaskToReadyList+0xbc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003eea:	4a27      	ldr	r2, [pc, #156]	; (8003f88 <prvAddNewTaskToReadyList+0xbc>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ef0:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <prvAddNewTaskToReadyList+0xb8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d110      	bne.n	8003f1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ef8:	f000 fb22 	bl	8004540 <prvInitialiseTaskLists>
 8003efc:	e00d      	b.n	8003f1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003efe:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <prvAddNewTaskToReadyList+0xc0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <prvAddNewTaskToReadyList+0xbc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d802      	bhi.n	8003f1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f14:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <prvAddNewTaskToReadyList+0xbc>)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <prvAddNewTaskToReadyList+0xc4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <prvAddNewTaskToReadyList+0xc4>)
 8003f22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	2201      	movs	r2, #1
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <prvAddNewTaskToReadyList+0xc8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <prvAddNewTaskToReadyList+0xc8>)
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <prvAddNewTaskToReadyList+0xcc>)
 8003f44:	441a      	add	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f7ff fc50 	bl	80037f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f52:	f000 fdc3 	bl	8004adc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <prvAddNewTaskToReadyList+0xc0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00e      	beq.n	8003f7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <prvAddNewTaskToReadyList+0xbc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d207      	bcs.n	8003f7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <prvAddNewTaskToReadyList+0xd0>)
 8003f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	200004d0 	.word	0x200004d0
 8003f88:	200003d0 	.word	0x200003d0
 8003f8c:	200004dc 	.word	0x200004dc
 8003f90:	200004ec 	.word	0x200004ec
 8003f94:	200004d8 	.word	0x200004d8
 8003f98:	200003d4 	.word	0x200003d4
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d017      	beq.n	8003fe2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fb2:	4b13      	ldr	r3, [pc, #76]	; (8004000 <vTaskDelay+0x60>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <vTaskDelay+0x30>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	60bb      	str	r3, [r7, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fd0:	f000 f87a 	bl	80040c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fbfa 	bl	80047d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fdc:	f000 f882 	bl	80040e4 <xTaskResumeAll>
 8003fe0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d107      	bne.n	8003ff8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <vTaskDelay+0x64>)
 8003fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	200004f8 	.word	0x200004f8
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	; 0x28
 800400c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004016:	463a      	mov	r2, r7
 8004018:	1d39      	adds	r1, r7, #4
 800401a:	f107 0308 	add.w	r3, r7, #8
 800401e:	4618      	mov	r0, r3
 8004020:	f7fc f994 	bl	800034c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004024:	6839      	ldr	r1, [r7, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	9202      	str	r2, [sp, #8]
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	2300      	movs	r3, #0
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	2300      	movs	r3, #0
 8004034:	460a      	mov	r2, r1
 8004036:	491e      	ldr	r1, [pc, #120]	; (80040b0 <vTaskStartScheduler+0xa8>)
 8004038:	481e      	ldr	r0, [pc, #120]	; (80040b4 <vTaskStartScheduler+0xac>)
 800403a:	f7ff fe26 	bl	8003c8a <xTaskCreateStatic>
 800403e:	4603      	mov	r3, r0
 8004040:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <vTaskStartScheduler+0xb0>)
 8004042:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004044:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <vTaskStartScheduler+0xb0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800404c:	2301      	movs	r3, #1
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	e001      	b.n	8004056 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d116      	bne.n	800408a <vTaskStartScheduler+0x82>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	613b      	str	r3, [r7, #16]
}
 800406e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <vTaskStartScheduler+0xb4>)
 8004072:	f04f 32ff 	mov.w	r2, #4294967295
 8004076:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <vTaskStartScheduler+0xb8>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800407e:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <vTaskStartScheduler+0xbc>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004084:	f000 fc88 	bl	8004998 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004088:	e00e      	b.n	80040a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d10a      	bne.n	80040a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	60fb      	str	r3, [r7, #12]
}
 80040a4:	bf00      	nop
 80040a6:	e7fe      	b.n	80040a6 <vTaskStartScheduler+0x9e>
}
 80040a8:	bf00      	nop
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	08005140 	.word	0x08005140
 80040b4:	08004511 	.word	0x08004511
 80040b8:	200004f4 	.word	0x200004f4
 80040bc:	200004f0 	.word	0x200004f0
 80040c0:	200004dc 	.word	0x200004dc
 80040c4:	200004d4 	.word	0x200004d4

080040c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <vTaskSuspendAll+0x18>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	4a03      	ldr	r2, [pc, #12]	; (80040e0 <vTaskSuspendAll+0x18>)
 80040d4:	6013      	str	r3, [r2, #0]
}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	200004f8 	.word	0x200004f8

080040e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <xTaskResumeAll+0x114>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <xTaskResumeAll+0x2c>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	603b      	str	r3, [r7, #0]
}
 800410c:	bf00      	nop
 800410e:	e7fe      	b.n	800410e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004110:	f000 fcb4 	bl	8004a7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004114:	4b38      	ldr	r3, [pc, #224]	; (80041f8 <xTaskResumeAll+0x114>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3b01      	subs	r3, #1
 800411a:	4a37      	ldr	r2, [pc, #220]	; (80041f8 <xTaskResumeAll+0x114>)
 800411c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800411e:	4b36      	ldr	r3, [pc, #216]	; (80041f8 <xTaskResumeAll+0x114>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d161      	bne.n	80041ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004126:	4b35      	ldr	r3, [pc, #212]	; (80041fc <xTaskResumeAll+0x118>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d05d      	beq.n	80041ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800412e:	e02e      	b.n	800418e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004130:	4b33      	ldr	r3, [pc, #204]	; (8004200 <xTaskResumeAll+0x11c>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3318      	adds	r3, #24
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fbb3 	bl	80038a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3304      	adds	r3, #4
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fbae 	bl	80038a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	2201      	movs	r2, #1
 8004152:	409a      	lsls	r2, r3
 8004154:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <xTaskResumeAll+0x120>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4313      	orrs	r3, r2
 800415a:	4a2a      	ldr	r2, [pc, #168]	; (8004204 <xTaskResumeAll+0x120>)
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4a27      	ldr	r2, [pc, #156]	; (8004208 <xTaskResumeAll+0x124>)
 800416c:	441a      	add	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3304      	adds	r3, #4
 8004172:	4619      	mov	r1, r3
 8004174:	4610      	mov	r0, r2
 8004176:	f7ff fb3c 	bl	80037f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417e:	4b23      	ldr	r3, [pc, #140]	; (800420c <xTaskResumeAll+0x128>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	429a      	cmp	r2, r3
 8004186:	d302      	bcc.n	800418e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004188:	4b21      	ldr	r3, [pc, #132]	; (8004210 <xTaskResumeAll+0x12c>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800418e:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <xTaskResumeAll+0x11c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1cc      	bne.n	8004130 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800419c:	f000 fa6e 	bl	800467c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <xTaskResumeAll+0x130>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041ac:	f000 f836 	bl	800421c <xTaskIncrementTick>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80041b6:	4b16      	ldr	r3, [pc, #88]	; (8004210 <xTaskResumeAll+0x12c>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3b01      	subs	r3, #1
 80041c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f1      	bne.n	80041ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80041c8:	4b12      	ldr	r3, [pc, #72]	; (8004214 <xTaskResumeAll+0x130>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <xTaskResumeAll+0x12c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041d6:	2301      	movs	r3, #1
 80041d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041da:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <xTaskResumeAll+0x134>)
 80041dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041ea:	f000 fc77 	bl	8004adc <vPortExitCritical>

	return xAlreadyYielded;
 80041ee:	68bb      	ldr	r3, [r7, #8]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	200004f8 	.word	0x200004f8
 80041fc:	200004d0 	.word	0x200004d0
 8004200:	20000490 	.word	0x20000490
 8004204:	200004d8 	.word	0x200004d8
 8004208:	200003d4 	.word	0x200003d4
 800420c:	200003d0 	.word	0x200003d0
 8004210:	200004e4 	.word	0x200004e4
 8004214:	200004e0 	.word	0x200004e0
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004226:	4b51      	ldr	r3, [pc, #324]	; (800436c <xTaskIncrementTick+0x150>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f040 808d 	bne.w	800434a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004230:	4b4f      	ldr	r3, [pc, #316]	; (8004370 <xTaskIncrementTick+0x154>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004238:	4a4d      	ldr	r2, [pc, #308]	; (8004370 <xTaskIncrementTick+0x154>)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d120      	bne.n	8004286 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004244:	4b4b      	ldr	r3, [pc, #300]	; (8004374 <xTaskIncrementTick+0x158>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <xTaskIncrementTick+0x48>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	603b      	str	r3, [r7, #0]
}
 8004260:	bf00      	nop
 8004262:	e7fe      	b.n	8004262 <xTaskIncrementTick+0x46>
 8004264:	4b43      	ldr	r3, [pc, #268]	; (8004374 <xTaskIncrementTick+0x158>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	4b43      	ldr	r3, [pc, #268]	; (8004378 <xTaskIncrementTick+0x15c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a41      	ldr	r2, [pc, #260]	; (8004374 <xTaskIncrementTick+0x158>)
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4a41      	ldr	r2, [pc, #260]	; (8004378 <xTaskIncrementTick+0x15c>)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	4b40      	ldr	r3, [pc, #256]	; (800437c <xTaskIncrementTick+0x160>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	4a3f      	ldr	r2, [pc, #252]	; (800437c <xTaskIncrementTick+0x160>)
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	f000 f9fb 	bl	800467c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004286:	4b3e      	ldr	r3, [pc, #248]	; (8004380 <xTaskIncrementTick+0x164>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	429a      	cmp	r2, r3
 800428e:	d34d      	bcc.n	800432c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004290:	4b38      	ldr	r3, [pc, #224]	; (8004374 <xTaskIncrementTick+0x158>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <xTaskIncrementTick+0x82>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <xTaskIncrementTick+0x84>
 800429e:	2300      	movs	r3, #0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d004      	beq.n	80042ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a4:	4b36      	ldr	r3, [pc, #216]	; (8004380 <xTaskIncrementTick+0x164>)
 80042a6:	f04f 32ff 	mov.w	r2, #4294967295
 80042aa:	601a      	str	r2, [r3, #0]
					break;
 80042ac:	e03e      	b.n	800432c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042ae:	4b31      	ldr	r3, [pc, #196]	; (8004374 <xTaskIncrementTick+0x158>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d203      	bcs.n	80042ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042c6:	4a2e      	ldr	r2, [pc, #184]	; (8004380 <xTaskIncrementTick+0x164>)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6013      	str	r3, [r2, #0]
						break;
 80042cc:	e02e      	b.n	800432c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fae8 	bl	80038a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d004      	beq.n	80042ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	3318      	adds	r3, #24
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fadf 	bl	80038a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	2201      	movs	r2, #1
 80042f0:	409a      	lsls	r2, r3
 80042f2:	4b24      	ldr	r3, [pc, #144]	; (8004384 <xTaskIncrementTick+0x168>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	4a22      	ldr	r2, [pc, #136]	; (8004384 <xTaskIncrementTick+0x168>)
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <xTaskIncrementTick+0x16c>)
 800430a:	441a      	add	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f7ff fa6d 	bl	80037f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <xTaskIncrementTick+0x170>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	429a      	cmp	r2, r3
 8004324:	d3b4      	bcc.n	8004290 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004326:	2301      	movs	r3, #1
 8004328:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800432a:	e7b1      	b.n	8004290 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800432c:	4b17      	ldr	r3, [pc, #92]	; (800438c <xTaskIncrementTick+0x170>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004332:	4915      	ldr	r1, [pc, #84]	; (8004388 <xTaskIncrementTick+0x16c>)
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d907      	bls.n	8004354 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004344:	2301      	movs	r3, #1
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e004      	b.n	8004354 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800434a:	4b11      	ldr	r3, [pc, #68]	; (8004390 <xTaskIncrementTick+0x174>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3301      	adds	r3, #1
 8004350:	4a0f      	ldr	r2, [pc, #60]	; (8004390 <xTaskIncrementTick+0x174>)
 8004352:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <xTaskIncrementTick+0x178>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800435c:	2301      	movs	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004360:	697b      	ldr	r3, [r7, #20]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	200004f8 	.word	0x200004f8
 8004370:	200004d4 	.word	0x200004d4
 8004374:	20000488 	.word	0x20000488
 8004378:	2000048c 	.word	0x2000048c
 800437c:	200004e8 	.word	0x200004e8
 8004380:	200004f0 	.word	0x200004f0
 8004384:	200004d8 	.word	0x200004d8
 8004388:	200003d4 	.word	0x200003d4
 800438c:	200003d0 	.word	0x200003d0
 8004390:	200004e0 	.word	0x200004e0
 8004394:	200004e4 	.word	0x200004e4

08004398 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800439e:	4b26      	ldr	r3, [pc, #152]	; (8004438 <vTaskSwitchContext+0xa0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043a6:	4b25      	ldr	r3, [pc, #148]	; (800443c <vTaskSwitchContext+0xa4>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043ac:	e03f      	b.n	800442e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80043ae:	4b23      	ldr	r3, [pc, #140]	; (800443c <vTaskSwitchContext+0xa4>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80043b4:	4b22      	ldr	r3, [pc, #136]	; (8004440 <vTaskSwitchContext+0xa8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	fab3 f383 	clz	r3, r3
 80043c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80043c2:	7afb      	ldrb	r3, [r7, #11]
 80043c4:	f1c3 031f 	rsb	r3, r3, #31
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	491e      	ldr	r1, [pc, #120]	; (8004444 <vTaskSwitchContext+0xac>)
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10a      	bne.n	80043f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	607b      	str	r3, [r7, #4]
}
 80043f0:	bf00      	nop
 80043f2:	e7fe      	b.n	80043f2 <vTaskSwitchContext+0x5a>
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4a11      	ldr	r2, [pc, #68]	; (8004444 <vTaskSwitchContext+0xac>)
 8004400:	4413      	add	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3308      	adds	r3, #8
 8004416:	429a      	cmp	r2, r3
 8004418:	d104      	bne.n	8004424 <vTaskSwitchContext+0x8c>
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	605a      	str	r2, [r3, #4]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	4a07      	ldr	r2, [pc, #28]	; (8004448 <vTaskSwitchContext+0xb0>)
 800442c:	6013      	str	r3, [r2, #0]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	200004f8 	.word	0x200004f8
 800443c:	200004e4 	.word	0x200004e4
 8004440:	200004d8 	.word	0x200004d8
 8004444:	200003d4 	.word	0x200003d4
 8004448:	200003d0 	.word	0x200003d0

0800444c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	60fb      	str	r3, [r7, #12]
}
 8004474:	bf00      	nop
 8004476:	e7fe      	b.n	8004476 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	3318      	adds	r3, #24
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fa13 	bl	80038a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <xTaskRemoveFromEventList+0xac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11c      	bne.n	80044c4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	3304      	adds	r3, #4
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fa0a 	bl	80038a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	2201      	movs	r2, #1
 800449a:	409a      	lsls	r2, r3
 800449c:	4b17      	ldr	r3, [pc, #92]	; (80044fc <xTaskRemoveFromEventList+0xb0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	4a16      	ldr	r2, [pc, #88]	; (80044fc <xTaskRemoveFromEventList+0xb0>)
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4a13      	ldr	r2, [pc, #76]	; (8004500 <xTaskRemoveFromEventList+0xb4>)
 80044b4:	441a      	add	r2, r3
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f7ff f998 	bl	80037f2 <vListInsertEnd>
 80044c2:	e005      	b.n	80044d0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	3318      	adds	r3, #24
 80044c8:	4619      	mov	r1, r3
 80044ca:	480e      	ldr	r0, [pc, #56]	; (8004504 <xTaskRemoveFromEventList+0xb8>)
 80044cc:	f7ff f991 	bl	80037f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <xTaskRemoveFromEventList+0xbc>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	429a      	cmp	r2, r3
 80044dc:	d905      	bls.n	80044ea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044de:	2301      	movs	r3, #1
 80044e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044e2:	4b0a      	ldr	r3, [pc, #40]	; (800450c <xTaskRemoveFromEventList+0xc0>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e001      	b.n	80044ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80044ee:	697b      	ldr	r3, [r7, #20]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	200004f8 	.word	0x200004f8
 80044fc:	200004d8 	.word	0x200004d8
 8004500:	200003d4 	.word	0x200003d4
 8004504:	20000490 	.word	0x20000490
 8004508:	200003d0 	.word	0x200003d0
 800450c:	200004e4 	.word	0x200004e4

08004510 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004518:	f000 f852 	bl	80045c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <prvIdleTask+0x28>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d9f9      	bls.n	8004518 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <prvIdleTask+0x2c>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004534:	e7f0      	b.n	8004518 <prvIdleTask+0x8>
 8004536:	bf00      	nop
 8004538:	200003d4 	.word	0x200003d4
 800453c:	e000ed04 	.word	0xe000ed04

08004540 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004546:	2300      	movs	r3, #0
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	e00c      	b.n	8004566 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4a12      	ldr	r2, [pc, #72]	; (80045a0 <prvInitialiseTaskLists+0x60>)
 8004558:	4413      	add	r3, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff f91e 	bl	800379c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3301      	adds	r3, #1
 8004564:	607b      	str	r3, [r7, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b06      	cmp	r3, #6
 800456a:	d9ef      	bls.n	800454c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800456c:	480d      	ldr	r0, [pc, #52]	; (80045a4 <prvInitialiseTaskLists+0x64>)
 800456e:	f7ff f915 	bl	800379c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004572:	480d      	ldr	r0, [pc, #52]	; (80045a8 <prvInitialiseTaskLists+0x68>)
 8004574:	f7ff f912 	bl	800379c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004578:	480c      	ldr	r0, [pc, #48]	; (80045ac <prvInitialiseTaskLists+0x6c>)
 800457a:	f7ff f90f 	bl	800379c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800457e:	480c      	ldr	r0, [pc, #48]	; (80045b0 <prvInitialiseTaskLists+0x70>)
 8004580:	f7ff f90c 	bl	800379c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004584:	480b      	ldr	r0, [pc, #44]	; (80045b4 <prvInitialiseTaskLists+0x74>)
 8004586:	f7ff f909 	bl	800379c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800458a:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <prvInitialiseTaskLists+0x78>)
 800458c:	4a05      	ldr	r2, [pc, #20]	; (80045a4 <prvInitialiseTaskLists+0x64>)
 800458e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <prvInitialiseTaskLists+0x7c>)
 8004592:	4a05      	ldr	r2, [pc, #20]	; (80045a8 <prvInitialiseTaskLists+0x68>)
 8004594:	601a      	str	r2, [r3, #0]
}
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	200003d4 	.word	0x200003d4
 80045a4:	20000460 	.word	0x20000460
 80045a8:	20000474 	.word	0x20000474
 80045ac:	20000490 	.word	0x20000490
 80045b0:	200004a4 	.word	0x200004a4
 80045b4:	200004bc 	.word	0x200004bc
 80045b8:	20000488 	.word	0x20000488
 80045bc:	2000048c 	.word	0x2000048c

080045c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045c6:	e019      	b.n	80045fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045c8:	f000 fa58 	bl	8004a7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80045cc:	4b10      	ldr	r3, [pc, #64]	; (8004610 <prvCheckTasksWaitingTermination+0x50>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff f965 	bl	80038a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045de:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <prvCheckTasksWaitingTermination+0x54>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	4a0b      	ldr	r2, [pc, #44]	; (8004614 <prvCheckTasksWaitingTermination+0x54>)
 80045e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <prvCheckTasksWaitingTermination+0x58>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <prvCheckTasksWaitingTermination+0x58>)
 80045f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045f2:	f000 fa73 	bl	8004adc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f810 	bl	800461c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <prvCheckTasksWaitingTermination+0x58>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e1      	bne.n	80045c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200004a4 	.word	0x200004a4
 8004614:	200004d0 	.word	0x200004d0
 8004618:	200004b8 	.word	0x200004b8

0800461c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800462a:	2b00      	cmp	r3, #0
 800462c:	d108      	bne.n	8004640 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fbe6 	bl	8004e04 <vPortFree>
				vPortFree( pxTCB );
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fbe3 	bl	8004e04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800463e:	e018      	b.n	8004672 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004646:	2b01      	cmp	r3, #1
 8004648:	d103      	bne.n	8004652 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fbda 	bl	8004e04 <vPortFree>
	}
 8004650:	e00f      	b.n	8004672 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004658:	2b02      	cmp	r3, #2
 800465a:	d00a      	beq.n	8004672 <prvDeleteTCB+0x56>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	60fb      	str	r3, [r7, #12]
}
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <prvDeleteTCB+0x54>
	}
 8004672:	bf00      	nop
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004682:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <prvResetNextTaskUnblockTime+0x40>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <prvResetNextTaskUnblockTime+0x14>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <prvResetNextTaskUnblockTime+0x16>
 8004690:	2300      	movs	r3, #0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d004      	beq.n	80046a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <prvResetNextTaskUnblockTime+0x44>)
 8004698:	f04f 32ff 	mov.w	r2, #4294967295
 800469c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800469e:	e008      	b.n	80046b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <prvResetNextTaskUnblockTime+0x40>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4a04      	ldr	r2, [pc, #16]	; (80046c0 <prvResetNextTaskUnblockTime+0x44>)
 80046b0:	6013      	str	r3, [r2, #0]
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	20000488 	.word	0x20000488
 80046c0:	200004f0 	.word	0x200004f0

080046c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d06e      	beq.n	80047b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046da:	4b3a      	ldr	r3, [pc, #232]	; (80047c4 <xTaskPriorityDisinherit+0x100>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d00a      	beq.n	80046fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	60fb      	str	r3, [r7, #12]
}
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	60bb      	str	r3, [r7, #8]
}
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471c:	1e5a      	subs	r2, r3, #1
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	429a      	cmp	r2, r3
 800472c:	d044      	beq.n	80047b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004732:	2b00      	cmp	r3, #0
 8004734:	d140      	bne.n	80047b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	3304      	adds	r3, #4
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff f8b4 	bl	80038a8 <uxListRemove>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d115      	bne.n	8004772 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474a:	491f      	ldr	r1, [pc, #124]	; (80047c8 <xTaskPriorityDisinherit+0x104>)
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <xTaskPriorityDisinherit+0xae>
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	2201      	movs	r2, #1
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43da      	mvns	r2, r3
 8004768:	4b18      	ldr	r3, [pc, #96]	; (80047cc <xTaskPriorityDisinherit+0x108>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4013      	ands	r3, r2
 800476e:	4a17      	ldr	r2, [pc, #92]	; (80047cc <xTaskPriorityDisinherit+0x108>)
 8004770:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	f1c3 0207 	rsb	r2, r3, #7
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	2201      	movs	r2, #1
 800478c:	409a      	lsls	r2, r3
 800478e:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <xTaskPriorityDisinherit+0x108>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4313      	orrs	r3, r2
 8004794:	4a0d      	ldr	r2, [pc, #52]	; (80047cc <xTaskPriorityDisinherit+0x108>)
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <xTaskPriorityDisinherit+0x104>)
 80047a6:	441a      	add	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f7ff f81f 	bl	80037f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047b4:	2301      	movs	r3, #1
 80047b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047b8:	697b      	ldr	r3, [r7, #20]
	}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	200003d0 	.word	0x200003d0
 80047c8:	200003d4 	.word	0x200003d4
 80047cc:	200004d8 	.word	0x200004d8

080047d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047da:	4b29      	ldr	r3, [pc, #164]	; (8004880 <prvAddCurrentTaskToDelayedList+0xb0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047e0:	4b28      	ldr	r3, [pc, #160]	; (8004884 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff f85e 	bl	80038a8 <uxListRemove>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10b      	bne.n	800480a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	2201      	movs	r2, #1
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43da      	mvns	r2, r3
 8004800:	4b21      	ldr	r3, [pc, #132]	; (8004888 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4013      	ands	r3, r2
 8004806:	4a20      	ldr	r2, [pc, #128]	; (8004888 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004808:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d10a      	bne.n	8004828 <prvAddCurrentTaskToDelayedList+0x58>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004818:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <prvAddCurrentTaskToDelayedList+0xb4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3304      	adds	r3, #4
 800481e:	4619      	mov	r1, r3
 8004820:	481a      	ldr	r0, [pc, #104]	; (800488c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004822:	f7fe ffe6 	bl	80037f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004826:	e026      	b.n	8004876 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4413      	add	r3, r2
 800482e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004830:	4b14      	ldr	r3, [pc, #80]	; (8004884 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	429a      	cmp	r2, r3
 800483e:	d209      	bcs.n	8004854 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3304      	adds	r3, #4
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f7fe fff3 	bl	8003838 <vListInsert>
}
 8004852:	e010      	b.n	8004876 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004854:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <prvAddCurrentTaskToDelayedList+0xb4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f7fe ffe9 	bl	8003838 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004866:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	429a      	cmp	r2, r3
 800486e:	d202      	bcs.n	8004876 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004870:	4a09      	ldr	r2, [pc, #36]	; (8004898 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	6013      	str	r3, [r2, #0]
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	200004d4 	.word	0x200004d4
 8004884:	200003d0 	.word	0x200003d0
 8004888:	200004d8 	.word	0x200004d8
 800488c:	200004bc 	.word	0x200004bc
 8004890:	2000048c 	.word	0x2000048c
 8004894:	20000488 	.word	0x20000488
 8004898:	200004f0 	.word	0x200004f0

0800489c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3b04      	subs	r3, #4
 80048ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3b04      	subs	r3, #4
 80048ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f023 0201 	bic.w	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3b04      	subs	r3, #4
 80048ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048cc:	4a08      	ldr	r2, [pc, #32]	; (80048f0 <pxPortInitialiseStack+0x54>)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3b14      	subs	r3, #20
 80048d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3b20      	subs	r3, #32
 80048e2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048e4:	68fb      	ldr	r3, [r7, #12]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	080048f5 	.word	0x080048f5

080048f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048fe:	4b12      	ldr	r3, [pc, #72]	; (8004948 <prvTaskExitError+0x54>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d00a      	beq.n	800491e <prvTaskExitError+0x2a>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60fb      	str	r3, [r7, #12]
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <prvTaskExitError+0x28>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	60bb      	str	r3, [r7, #8]
}
 8004930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004932:	bf00      	nop
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0fc      	beq.n	8004934 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	2000000c 	.word	0x2000000c
 800494c:	00000000 	.word	0x00000000

08004950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <pxCurrentTCBConst2>)
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	6808      	ldr	r0, [r1, #0]
 8004956:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800495a:	f380 8809 	msr	PSP, r0
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f380 8811 	msr	BASEPRI, r0
 800496a:	f04e 0e0d 	orr.w	lr, lr, #13
 800496e:	4770      	bx	lr

08004970 <pxCurrentTCBConst2>:
 8004970:	200003d0 	.word	0x200003d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004978:	4806      	ldr	r0, [pc, #24]	; (8004994 <prvPortStartFirstTask+0x1c>)
 800497a:	6800      	ldr	r0, [r0, #0]
 800497c:	6800      	ldr	r0, [r0, #0]
 800497e:	f380 8808 	msr	MSP, r0
 8004982:	b662      	cpsie	i
 8004984:	b661      	cpsie	f
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	df00      	svc	0
 8004990:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004992:	bf00      	nop
 8004994:	e000ed08 	.word	0xe000ed08

08004998 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800499e:	4b32      	ldr	r3, [pc, #200]	; (8004a68 <xPortStartScheduler+0xd0>)
 80049a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	22ff      	movs	r2, #255	; 0xff
 80049ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <xPortStartScheduler+0xd4>)
 80049c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049c6:	4b2a      	ldr	r3, [pc, #168]	; (8004a70 <xPortStartScheduler+0xd8>)
 80049c8:	2207      	movs	r2, #7
 80049ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049cc:	e009      	b.n	80049e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80049ce:	4b28      	ldr	r3, [pc, #160]	; (8004a70 <xPortStartScheduler+0xd8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <xPortStartScheduler+0xd8>)
 80049d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ea:	2b80      	cmp	r3, #128	; 0x80
 80049ec:	d0ef      	beq.n	80049ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049ee:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <xPortStartScheduler+0xd8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f1c3 0307 	rsb	r3, r3, #7
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d00a      	beq.n	8004a10 <xPortStartScheduler+0x78>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	60bb      	str	r3, [r7, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a10:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <xPortStartScheduler+0xd8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	4a16      	ldr	r2, [pc, #88]	; (8004a70 <xPortStartScheduler+0xd8>)
 8004a18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <xPortStartScheduler+0xd8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a22:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <xPortStartScheduler+0xd8>)
 8004a24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a2e:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <xPortStartScheduler+0xdc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <xPortStartScheduler+0xdc>)
 8004a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a3a:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <xPortStartScheduler+0xdc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a0d      	ldr	r2, [pc, #52]	; (8004a74 <xPortStartScheduler+0xdc>)
 8004a40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a46:	f000 f8b9 	bl	8004bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <xPortStartScheduler+0xe0>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a50:	f7ff ff92 	bl	8004978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a54:	f7ff fca0 	bl	8004398 <vTaskSwitchContext>
	prvTaskExitError();
 8004a58:	f7ff ff4c 	bl	80048f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	e000e400 	.word	0xe000e400
 8004a6c:	200004fc 	.word	0x200004fc
 8004a70:	20000500 	.word	0x20000500
 8004a74:	e000ed20 	.word	0xe000ed20
 8004a78:	2000000c 	.word	0x2000000c

08004a7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	607b      	str	r3, [r7, #4]
}
 8004a94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a96:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <vPortEnterCritical+0x58>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <vPortEnterCritical+0x58>)
 8004a9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <vPortEnterCritical+0x58>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d10f      	bne.n	8004ac8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <vPortEnterCritical+0x5c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	603b      	str	r3, [r7, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <vPortEnterCritical+0x4a>
	}
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	2000000c 	.word	0x2000000c
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <vPortExitCritical+0x4c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <vPortExitCritical+0x24>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	607b      	str	r3, [r7, #4]
}
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <vPortExitCritical+0x4c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	4a08      	ldr	r2, [pc, #32]	; (8004b28 <vPortExitCritical+0x4c>)
 8004b08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <vPortExitCritical+0x4c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d105      	bne.n	8004b1e <vPortExitCritical+0x42>
 8004b12:	2300      	movs	r3, #0
 8004b14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f383 8811 	msr	BASEPRI, r3
}
 8004b1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr
 8004b28:	2000000c 	.word	0x2000000c
 8004b2c:	00000000 	.word	0x00000000

08004b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b30:	f3ef 8009 	mrs	r0, PSP
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <pxCurrentTCBConst>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b40:	6010      	str	r0, [r2, #0]
 8004b42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004b46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b4a:	f380 8811 	msr	BASEPRI, r0
 8004b4e:	f7ff fc23 	bl	8004398 <vTaskSwitchContext>
 8004b52:	f04f 0000 	mov.w	r0, #0
 8004b56:	f380 8811 	msr	BASEPRI, r0
 8004b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b5e:	6819      	ldr	r1, [r3, #0]
 8004b60:	6808      	ldr	r0, [r1, #0]
 8004b62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b66:	f380 8809 	msr	PSP, r0
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	4770      	bx	lr

08004b70 <pxCurrentTCBConst>:
 8004b70:	200003d0 	.word	0x200003d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop

08004b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	607b      	str	r3, [r7, #4]
}
 8004b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b92:	f7ff fb43 	bl	800421c <xTaskIncrementTick>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <SysTick_Handler+0x40>)
 8004b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	f383 8811 	msr	BASEPRI, r3
}
 8004bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <vPortSetupTimerInterrupt+0x30>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <vPortSetupTimerInterrupt+0x34>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bcc:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <vPortSetupTimerInterrupt+0x38>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <vPortSetupTimerInterrupt+0x3c>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	099b      	lsrs	r3, r3, #6
 8004bd8:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <vPortSetupTimerInterrupt+0x40>)
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bde:	4b03      	ldr	r3, [pc, #12]	; (8004bec <vPortSetupTimerInterrupt+0x30>)
 8004be0:	2207      	movs	r2, #7
 8004be2:	601a      	str	r2, [r3, #0]
}
 8004be4:	bf00      	nop
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr
 8004bec:	e000e010 	.word	0xe000e010
 8004bf0:	e000e018 	.word	0xe000e018
 8004bf4:	20000000 	.word	0x20000000
 8004bf8:	10624dd3 	.word	0x10624dd3
 8004bfc:	e000e014 	.word	0xe000e014

08004c00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c06:	f3ef 8305 	mrs	r3, IPSR
 8004c0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b0f      	cmp	r3, #15
 8004c10:	d914      	bls.n	8004c3c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c12:	4a16      	ldr	r2, [pc, #88]	; (8004c6c <vPortValidateInterruptPriority+0x6c>)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c1c:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <vPortValidateInterruptPriority+0x70>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	7afa      	ldrb	r2, [r7, #11]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d20a      	bcs.n	8004c3c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	607b      	str	r3, [r7, #4]
}
 8004c38:	bf00      	nop
 8004c3a:	e7fe      	b.n	8004c3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <vPortValidateInterruptPriority+0x74>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <vPortValidateInterruptPriority+0x78>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d90a      	bls.n	8004c62 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	603b      	str	r3, [r7, #0]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <vPortValidateInterruptPriority+0x60>
	}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	e000e3f0 	.word	0xe000e3f0
 8004c70:	200004fc 	.word	0x200004fc
 8004c74:	e000ed0c 	.word	0xe000ed0c
 8004c78:	20000500 	.word	0x20000500

08004c7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	; 0x28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c88:	f7ff fa1e 	bl	80040c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c8c:	4b58      	ldr	r3, [pc, #352]	; (8004df0 <pvPortMalloc+0x174>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c94:	f000 f910 	bl	8004eb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c98:	4b56      	ldr	r3, [pc, #344]	; (8004df4 <pvPortMalloc+0x178>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f040 808e 	bne.w	8004dc2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01d      	beq.n	8004ce8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004cac:	2208      	movs	r2, #8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d014      	beq.n	8004ce8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f023 0307 	bic.w	r3, r3, #7
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <pvPortMalloc+0x6c>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	617b      	str	r3, [r7, #20]
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d069      	beq.n	8004dc2 <pvPortMalloc+0x146>
 8004cee:	4b42      	ldr	r3, [pc, #264]	; (8004df8 <pvPortMalloc+0x17c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d864      	bhi.n	8004dc2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cf8:	4b40      	ldr	r3, [pc, #256]	; (8004dfc <pvPortMalloc+0x180>)
 8004cfa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cfc:	4b3f      	ldr	r3, [pc, #252]	; (8004dfc <pvPortMalloc+0x180>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d02:	e004      	b.n	8004d0e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d903      	bls.n	8004d20 <pvPortMalloc+0xa4>
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f1      	bne.n	8004d04 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d20:	4b33      	ldr	r3, [pc, #204]	; (8004df0 <pvPortMalloc+0x174>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d04b      	beq.n	8004dc2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2208      	movs	r2, #8
 8004d30:	4413      	add	r3, r2
 8004d32:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	1ad2      	subs	r2, r2, r3
 8004d44:	2308      	movs	r3, #8
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d91f      	bls.n	8004d8c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4413      	add	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <pvPortMalloc+0xf8>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	613b      	str	r3, [r7, #16]
}
 8004d70:	bf00      	nop
 8004d72:	e7fe      	b.n	8004d72 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	1ad2      	subs	r2, r2, r3
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d86:	69b8      	ldr	r0, [r7, #24]
 8004d88:	f000 f8f8 	bl	8004f7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d8c:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <pvPortMalloc+0x17c>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	4a18      	ldr	r2, [pc, #96]	; (8004df8 <pvPortMalloc+0x17c>)
 8004d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d9a:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <pvPortMalloc+0x17c>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <pvPortMalloc+0x184>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d203      	bcs.n	8004dae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004da6:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <pvPortMalloc+0x17c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a15      	ldr	r2, [pc, #84]	; (8004e00 <pvPortMalloc+0x184>)
 8004dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <pvPortMalloc+0x178>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004dc2:	f7ff f98f 	bl	80040e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <pvPortMalloc+0x16a>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	60fb      	str	r3, [r7, #12]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <pvPortMalloc+0x168>
	return pvReturn;
 8004de6:	69fb      	ldr	r3, [r7, #28]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3728      	adds	r7, #40	; 0x28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	2000110c 	.word	0x2000110c
 8004df4:	20001118 	.word	0x20001118
 8004df8:	20001110 	.word	0x20001110
 8004dfc:	20001104 	.word	0x20001104
 8004e00:	20001114 	.word	0x20001114

08004e04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d048      	beq.n	8004ea8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e16:	2308      	movs	r3, #8
 8004e18:	425b      	negs	r3, r3
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	4b21      	ldr	r3, [pc, #132]	; (8004eb0 <vPortFree+0xac>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10a      	bne.n	8004e48 <vPortFree+0x44>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	60fb      	str	r3, [r7, #12]
}
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <vPortFree+0x62>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	60bb      	str	r3, [r7, #8]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <vPortFree+0xac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d019      	beq.n	8004ea8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d115      	bne.n	8004ea8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <vPortFree+0xac>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	43db      	mvns	r3, r3
 8004e86:	401a      	ands	r2, r3
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e8c:	f7ff f91c 	bl	80040c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <vPortFree+0xb0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4413      	add	r3, r2
 8004e9a:	4a06      	ldr	r2, [pc, #24]	; (8004eb4 <vPortFree+0xb0>)
 8004e9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e9e:	6938      	ldr	r0, [r7, #16]
 8004ea0:	f000 f86c 	bl	8004f7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ea4:	f7ff f91e 	bl	80040e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ea8:	bf00      	nop
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20001118 	.word	0x20001118
 8004eb4:	20001110 	.word	0x20001110

08004eb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ebe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ec2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ec4:	4b27      	ldr	r3, [pc, #156]	; (8004f64 <prvHeapInit+0xac>)
 8004ec6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00c      	beq.n	8004eec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3307      	adds	r3, #7
 8004ed6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0307 	bic.w	r3, r3, #7
 8004ede:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	4a1f      	ldr	r2, [pc, #124]	; (8004f64 <prvHeapInit+0xac>)
 8004ee8:	4413      	add	r3, r2
 8004eea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ef0:	4a1d      	ldr	r2, [pc, #116]	; (8004f68 <prvHeapInit+0xb0>)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ef6:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <prvHeapInit+0xb0>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	4413      	add	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f04:	2208      	movs	r2, #8
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0307 	bic.w	r3, r3, #7
 8004f12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <prvHeapInit+0xb4>)
 8004f18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f1a:	4b14      	ldr	r3, [pc, #80]	; (8004f6c <prvHeapInit+0xb4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f22:	4b12      	ldr	r3, [pc, #72]	; (8004f6c <prvHeapInit+0xb4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	1ad2      	subs	r2, r2, r3
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <prvHeapInit+0xb4>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <prvHeapInit+0xb8>)
 8004f46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <prvHeapInit+0xbc>)
 8004f4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f50:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <prvHeapInit+0xc0>)
 8004f52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f56:	601a      	str	r2, [r3, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000504 	.word	0x20000504
 8004f68:	20001104 	.word	0x20001104
 8004f6c:	2000110c 	.word	0x2000110c
 8004f70:	20001114 	.word	0x20001114
 8004f74:	20001110 	.word	0x20001110
 8004f78:	20001118 	.word	0x20001118

08004f7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f84:	4b27      	ldr	r3, [pc, #156]	; (8005024 <prvInsertBlockIntoFreeList+0xa8>)
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e002      	b.n	8004f90 <prvInsertBlockIntoFreeList+0x14>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d8f7      	bhi.n	8004f8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d108      	bne.n	8004fbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	441a      	add	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	441a      	add	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d118      	bne.n	8005004 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <prvInsertBlockIntoFreeList+0xac>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d00d      	beq.n	8004ffa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	441a      	add	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	e008      	b.n	800500c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <prvInsertBlockIntoFreeList+0xac>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e003      	b.n	800500c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d002      	beq.n	800501a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	20001104 	.word	0x20001104
 8005028:	2000110c 	.word	0x2000110c

0800502c <__libc_init_array>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	2600      	movs	r6, #0
 8005030:	4d0c      	ldr	r5, [pc, #48]	; (8005064 <__libc_init_array+0x38>)
 8005032:	4c0d      	ldr	r4, [pc, #52]	; (8005068 <__libc_init_array+0x3c>)
 8005034:	1b64      	subs	r4, r4, r5
 8005036:	10a4      	asrs	r4, r4, #2
 8005038:	42a6      	cmp	r6, r4
 800503a:	d109      	bne.n	8005050 <__libc_init_array+0x24>
 800503c:	f000 f830 	bl	80050a0 <_init>
 8005040:	2600      	movs	r6, #0
 8005042:	4d0a      	ldr	r5, [pc, #40]	; (800506c <__libc_init_array+0x40>)
 8005044:	4c0a      	ldr	r4, [pc, #40]	; (8005070 <__libc_init_array+0x44>)
 8005046:	1b64      	subs	r4, r4, r5
 8005048:	10a4      	asrs	r4, r4, #2
 800504a:	42a6      	cmp	r6, r4
 800504c:	d105      	bne.n	800505a <__libc_init_array+0x2e>
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	f855 3b04 	ldr.w	r3, [r5], #4
 8005054:	4798      	blx	r3
 8005056:	3601      	adds	r6, #1
 8005058:	e7ee      	b.n	8005038 <__libc_init_array+0xc>
 800505a:	f855 3b04 	ldr.w	r3, [r5], #4
 800505e:	4798      	blx	r3
 8005060:	3601      	adds	r6, #1
 8005062:	e7f2      	b.n	800504a <__libc_init_array+0x1e>
 8005064:	08005160 	.word	0x08005160
 8005068:	08005160 	.word	0x08005160
 800506c:	08005160 	.word	0x08005160
 8005070:	08005164 	.word	0x08005164

08005074 <memcpy>:
 8005074:	440a      	add	r2, r1
 8005076:	4291      	cmp	r1, r2
 8005078:	f100 33ff 	add.w	r3, r0, #4294967295
 800507c:	d100      	bne.n	8005080 <memcpy+0xc>
 800507e:	4770      	bx	lr
 8005080:	b510      	push	{r4, lr}
 8005082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005086:	4291      	cmp	r1, r2
 8005088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800508c:	d1f9      	bne.n	8005082 <memcpy+0xe>
 800508e:	bd10      	pop	{r4, pc}

08005090 <memset>:
 8005090:	4603      	mov	r3, r0
 8005092:	4402      	add	r2, r0
 8005094:	4293      	cmp	r3, r2
 8005096:	d100      	bne.n	800509a <memset+0xa>
 8005098:	4770      	bx	lr
 800509a:	f803 1b01 	strb.w	r1, [r3], #1
 800509e:	e7f9      	b.n	8005094 <memset+0x4>

080050a0 <_init>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	bf00      	nop
 80050a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a6:	bc08      	pop	{r3}
 80050a8:	469e      	mov	lr, r3
 80050aa:	4770      	bx	lr

080050ac <_fini>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	bf00      	nop
 80050b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b2:	bc08      	pop	{r3}
 80050b4:	469e      	mov	lr, r3
 80050b6:	4770      	bx	lr
