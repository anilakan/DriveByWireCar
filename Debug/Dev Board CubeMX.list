
Dev Board CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005428  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b8  080055b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080055b8  080055b8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055b8  080055b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055bc  080055bc  000155bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080055c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001150  20000010  080055d0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  080055d0  00021160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b15  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b2  00000000  00000000  00033b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00037200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  000384c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d4e  00000000  00000000  000395f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148fe  00000000  00000000  00053346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009755c  00000000  00000000  00067c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff1a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c34  00000000  00000000  000ff1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005520 	.word	0x08005520

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005520 	.word	0x08005520

08000150 <servo_init>:

static TIM_HandleTypeDef htim2;
static void MX_TIM2_Init(void);
static void Error_Handler(void);

void servo_init(){
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 8000154:	f000 f81e 	bl	8000194 <MX_TIM2_Init>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <set_servo_pos>:



// Set Speed of the motor
void set_servo_pos(uint32_t pos){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	// Motor speed PWM 50 Hz 100 Ticks at 5000 Hz
	TIM2->CCR4 = 1000 - (pos/3 + 58);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4a09      	ldr	r2, [pc, #36]	; (800018c <set_servo_pos+0x30>)
 8000168:	fba2 2303 	umull	r2, r3, r2, r3
 800016c:	085b      	lsrs	r3, r3, #1
 800016e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000172:	f5c3 736b 	rsb	r3, r3, #940	; 0x3ac
 8000176:	3302      	adds	r3, #2
 8000178:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800017a:	210c      	movs	r1, #12
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <set_servo_pos+0x34>)
 800017e:	f002 fe6b 	bl	8002e58 <HAL_TIM_PWM_Start>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	aaaaaaab 	.word	0xaaaaaaab
 8000190:	2000002c 	.word	0x2000002c

08000194 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b08e      	sub	sp, #56	; 0x38
 8000198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800019a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80001a8:	f107 0320 	add.w	r3, r7, #32
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80001b2:	1d3b      	adds	r3, r7, #4
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
 80001b8:	605a      	str	r2, [r3, #4]
 80001ba:	609a      	str	r2, [r3, #8]
 80001bc:	60da      	str	r2, [r3, #12]
 80001be:	611a      	str	r2, [r3, #16]
 80001c0:	615a      	str	r2, [r3, #20]
 80001c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80001c4:	4b2d      	ldr	r3, [pc, #180]	; (800027c <MX_TIM2_Init+0xe8>)
 80001c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 80001cc:	4b2b      	ldr	r3, [pc, #172]	; (800027c <MX_TIM2_Init+0xe8>)
 80001ce:	229f      	movs	r2, #159	; 0x9f
 80001d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80001d2:	4b2a      	ldr	r3, [pc, #168]	; (800027c <MX_TIM2_Init+0xe8>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80001d8:	4b28      	ldr	r3, [pc, #160]	; (800027c <MX_TIM2_Init+0xe8>)
 80001da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80001de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80001e0:	4b26      	ldr	r3, [pc, #152]	; (800027c <MX_TIM2_Init+0xe8>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80001e6:	4b25      	ldr	r3, [pc, #148]	; (800027c <MX_TIM2_Init+0xe8>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80001ec:	4823      	ldr	r0, [pc, #140]	; (800027c <MX_TIM2_Init+0xe8>)
 80001ee:	f002 fd41 	bl	8002c74 <HAL_TIM_Base_Init>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80001f8:	f000 f842 	bl	8000280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80001fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000200:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000206:	4619      	mov	r1, r3
 8000208:	481c      	ldr	r0, [pc, #112]	; (800027c <MX_TIM2_Init+0xe8>)
 800020a:	f003 f88d 	bl	8003328 <HAL_TIM_ConfigClockSource>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000214:	f000 f834 	bl	8000280 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000218:	4818      	ldr	r0, [pc, #96]	; (800027c <MX_TIM2_Init+0xe8>)
 800021a:	f002 fdcd 	bl	8002db8 <HAL_TIM_PWM_Init>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000224:	f000 f82c 	bl	8000280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000228:	2300      	movs	r3, #0
 800022a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800022c:	2300      	movs	r3, #0
 800022e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000230:	f107 0320 	add.w	r3, r7, #32
 8000234:	4619      	mov	r1, r3
 8000236:	4811      	ldr	r0, [pc, #68]	; (800027c <MX_TIM2_Init+0xe8>)
 8000238:	f003 fc02 	bl	8003a40 <HAL_TIMEx_MasterConfigSynchronization>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000242:	f000 f81d 	bl	8000280 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000246:	2360      	movs	r3, #96	; 0x60
 8000248:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	220c      	movs	r2, #12
 800025a:	4619      	mov	r1, r3
 800025c:	4807      	ldr	r0, [pc, #28]	; (800027c <MX_TIM2_Init+0xe8>)
 800025e:	f002 ffa5 	bl	80031ac <HAL_TIM_PWM_ConfigChannel>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000268:	f000 f80a 	bl	8000280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <MX_TIM2_Init+0xe8>)
 800026e:	f000 fbb1 	bl	80009d4 <HAL_TIM_MspPostInit>

}
 8000272:	bf00      	nop
 8000274:	3738      	adds	r7, #56	; 0x38
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	2000002c 	.word	0x2000002c

08000280 <Error_Handler>:

static void Error_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000284:	b672      	cpsid	i
}
 8000286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000288:	e7fe      	b.n	8000288 <Error_Handler+0x8>

0800028a <current_sense_init>:
static void Error_Handler(void);

ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

void current_sense_init(){
 800028a:	b580      	push	{r7, lr}
 800028c:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 800028e:	f000 f809 	bl	80002a4 <MX_ADC1_Init>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}

08000296 <pot_sense_init>:
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	raw = HAL_ADC_GetValue(&hadc1);
	return raw;
}

void pot_sense_init(){
 8000296:	b580      	push	{r7, lr}
 8000298:	af00      	add	r7, sp, #0
	MX_ADC2_Init();
 800029a:	f000 f841 	bl	8000320 <MX_ADC2_Init>
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <MX_ADC1_Init+0x74>)
 80002b6:	4a19      	ldr	r2, [pc, #100]	; (800031c <MX_ADC1_Init+0x78>)
 80002b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <MX_ADC1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <MX_ADC1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <MX_ADC1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <MX_ADC1_Init+0x74>)
 80002ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d4:	4b10      	ldr	r3, [pc, #64]	; (8000318 <MX_ADC1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_ADC1_Init+0x74>)
 80002dc:	2201      	movs	r2, #1
 80002de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <MX_ADC1_Init+0x74>)
 80002e2:	f000 fdd3 	bl	8000e8c <HAL_ADC_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002ec:	f000 f856 	bl	800039c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002f0:	2304      	movs	r3, #4
 80002f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002f4:	2301      	movs	r3, #1
 80002f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	4619      	mov	r1, r3
 8000300:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_ADC1_Init+0x74>)
 8000302:	f000 fe9b 	bl	800103c <HAL_ADC_ConfigChannel>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800030c:	f000 f846 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000074 	.word	0x20000074
 800031c:	40012400 	.word	0x40012400

08000320 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_ADC2_Init+0x74>)
 8000332:	4a19      	ldr	r2, [pc, #100]	; (8000398 <MX_ADC2_Init+0x78>)
 8000334:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_ADC2_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_ADC2_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_ADC2_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_ADC2_Init+0x74>)
 800034a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800034e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000350:	4b10      	ldr	r3, [pc, #64]	; (8000394 <MX_ADC2_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_ADC2_Init+0x74>)
 8000358:	2201      	movs	r2, #1
 800035a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <MX_ADC2_Init+0x74>)
 800035e:	f000 fd95 	bl	8000e8c <HAL_ADC_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000368:	f000 f818 	bl	800039c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800036c:	2305      	movs	r3, #5
 800036e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000370:	2301      	movs	r3, #1
 8000372:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	4619      	mov	r1, r3
 800037c:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_ADC2_Init+0x74>)
 800037e:	f000 fe5d 	bl	800103c <HAL_ADC_ConfigChannel>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000388:	f000 f808 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	200000a4 	.word	0x200000a4
 8000398:	40012800 	.word	0x40012800

0800039c <Error_Handler>:

static void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <Error_Handler+0x8>

080003a6 <Error_Handler>:
#include "stm32f1xx_hal.h"
#include "cmsis_os.h"


static void Error_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80003aa:	b672      	cpsid	i
}
 80003ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ae:	e7fe      	b.n	80003ae <Error_Handler+0x8>

080003b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	; 0x28
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b6:	f107 0320 	add.w	r3, r7, #32
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003d2:	4b28      	ldr	r3, [pc, #160]	; (8000474 <MX_TIM3_Init+0xc4>)
 80003d4:	4a28      	ldr	r2, [pc, #160]	; (8000478 <MX_TIM3_Init+0xc8>)
 80003d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 80003d8:	4b26      	ldr	r3, [pc, #152]	; (8000474 <MX_TIM3_Init+0xc4>)
 80003da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b24      	ldr	r3, [pc, #144]	; (8000474 <MX_TIM3_Init+0xc4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80003e6:	4b23      	ldr	r3, [pc, #140]	; (8000474 <MX_TIM3_Init+0xc4>)
 80003e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b21      	ldr	r3, [pc, #132]	; (8000474 <MX_TIM3_Init+0xc4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f4:	4b1f      	ldr	r3, [pc, #124]	; (8000474 <MX_TIM3_Init+0xc4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003fa:	481e      	ldr	r0, [pc, #120]	; (8000474 <MX_TIM3_Init+0xc4>)
 80003fc:	f002 fcdc 	bl	8002db8 <HAL_TIM_PWM_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000406:	f7ff ffce 	bl	80003a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040a:	2300      	movs	r3, #0
 800040c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040e:	2300      	movs	r3, #0
 8000410:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000412:	f107 0320 	add.w	r3, r7, #32
 8000416:	4619      	mov	r1, r3
 8000418:	4816      	ldr	r0, [pc, #88]	; (8000474 <MX_TIM3_Init+0xc4>)
 800041a:	f003 fb11 	bl	8003a40 <HAL_TIMEx_MasterConfigSynchronization>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000424:	f7ff ffbf 	bl	80003a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000428:	2360      	movs	r3, #96	; 0x60
 800042a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2204      	movs	r2, #4
 800043c:	4619      	mov	r1, r3
 800043e:	480d      	ldr	r0, [pc, #52]	; (8000474 <MX_TIM3_Init+0xc4>)
 8000440:	f002 feb4 	bl	80031ac <HAL_TIM_PWM_ConfigChannel>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800044a:	f7ff ffac 	bl	80003a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	220c      	movs	r2, #12
 8000452:	4619      	mov	r1, r3
 8000454:	4807      	ldr	r0, [pc, #28]	; (8000474 <MX_TIM3_Init+0xc4>)
 8000456:	f002 fea9 	bl	80031ac <HAL_TIM_PWM_ConfigChannel>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000460:	f7ff ffa1 	bl	80003a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000464:	4803      	ldr	r0, [pc, #12]	; (8000474 <MX_TIM3_Init+0xc4>)
 8000466:	f000 fab5 	bl	80009d4 <HAL_TIM_MspPostInit>

}
 800046a:	bf00      	nop
 800046c:	3728      	adds	r7, #40	; 0x28
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	200000d4 	.word	0x200000d4
 8000478:	40000400 	.word	0x40000400

0800047c <blinkers_init>:


void blinkers_init(){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 8000480:	f7ff ff96 	bl	80003b0 <MX_TIM3_Init>
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <vApplicationGetIdleTaskMemory+0x28>)
 8000498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800049e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	2000011c 	.word	0x2000011c
 80004b4:	20000170 	.word	0x20000170

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b08e      	sub	sp, #56	; 0x38
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fc8f 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f845 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f893 	bl	80005f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  blinkers_init();
 80004ca:	f7ff ffd7 	bl	800047c <blinkers_init>
  //motor_init();
  servo_init();
 80004ce:	f7ff fe3f 	bl	8000150 <servo_init>
  can_init();
 80004d2:	f000 fbab 	bl	8000c2c <can_init>
  current_sense_init();
 80004d6:	f7ff fed8 	bl	800028a <current_sense_init>
  pot_sense_init();
 80004da:	f7ff fedc 	bl	8000296 <pot_sense_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <main+0x84>)
 80004e0:	f107 041c 	add.w	r4, r7, #28
 80004e4:	461d      	mov	r5, r3
 80004e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004f2:	f107 031c 	add.w	r3, r7, #28
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f003 fb2f 	bl	8003b5c <osThreadCreate>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0f      	ldr	r2, [pc, #60]	; (8000540 <main+0x88>)
 8000502:	6013      	str	r3, [r2, #0]

  /* definition and creation of mcuStatus */
  osThreadDef(mcuStatus, blink, osPriorityLow, 0, 128);
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <main+0x8c>)
 8000506:	463c      	mov	r4, r7
 8000508:	461d      	mov	r5, r3
 800050a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mcuStatusHandle = osThreadCreate(osThread(mcuStatus), NULL);
 8000516:	463b      	mov	r3, r7
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f003 fb1e 	bl	8003b5c <osThreadCreate>
 8000520:	4603      	mov	r3, r0
 8000522:	4a09      	ldr	r2, [pc, #36]	; (8000548 <main+0x90>)
 8000524:	6013      	str	r3, [r2, #0]
//  mcuStatusHandle = osThreadCreate(osThread(canRecieve), NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000526:	f003 fb12 	bl	8003b4e <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 800052a:	2104      	movs	r1, #4
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <main+0x94>)
 800052e:	f001 fe9b 	bl	8002268 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000536:	f000 fc85 	bl	8000e44 <HAL_Delay>
	  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 800053a:	e7f6      	b.n	800052a <main+0x72>
 800053c:	08005550 	.word	0x08005550
 8000540:	20000370 	.word	0x20000370
 8000544:	0800556c 	.word	0x0800556c
 8000548:	20000374 	.word	0x20000374
 800054c:	40010800 	.word	0x40010800

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055a:	2228      	movs	r2, #40	; 0x28
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f004 ffd6 	bl	8005510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058a:	2300      	movs	r3, #0
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fe82 	bl	800229c <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x52>
  {
    Error_Handler();
 800059e:	f000 f8dd 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005a6:	2301      	movs	r3, #1
 80005a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 f8ef 	bl	80027a0 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005c8:	f000 f8c8 	bl	800075c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005cc:	2302      	movs	r3, #2
 80005ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fa96 	bl	8002b08 <HAL_RCCEx_PeriphCLKConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e2:	f000 f8bb 	bl	800075c <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000604:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <MX_GPIO_Init+0xe8>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a33      	ldr	r2, [pc, #204]	; (80006d8 <MX_GPIO_Init+0xe8>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <MX_GPIO_Init+0xe8>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0310 	and.w	r3, r3, #16
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <MX_GPIO_Init+0xe8>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a2d      	ldr	r2, [pc, #180]	; (80006d8 <MX_GPIO_Init+0xe8>)
 8000622:	f043 0320 	orr.w	r3, r3, #32
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <MX_GPIO_Init+0xe8>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0320 	and.w	r3, r3, #32
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <MX_GPIO_Init+0xe8>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <MX_GPIO_Init+0xe8>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MX_GPIO_Init+0xe8>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <MX_GPIO_Init+0xe8>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <MX_GPIO_Init+0xe8>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_GPIO_Init+0xe8>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0308 	and.w	r3, r3, #8
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_IND_GPIO_Port, MCU_IND_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2104      	movs	r1, #4
 8000668:	481c      	ldr	r0, [pc, #112]	; (80006dc <MX_GPIO_Init+0xec>)
 800066a:	f001 fde5 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN2_Pin|MOTOR_IN1_Pin|GPIO_1_Pin|GPIO_2_Pin
 800066e:	2200      	movs	r2, #0
 8000670:	f247 4104 	movw	r1, #29700	; 0x7404
 8000674:	481a      	ldr	r0, [pc, #104]	; (80006e0 <MX_GPIO_Init+0xf0>)
 8000676:	f001 fddf 	bl	8002238 <HAL_GPIO_WritePin>
                          |GPIO_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800067a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4619      	mov	r1, r3
 800068e:	4815      	ldr	r0, [pc, #84]	; (80006e4 <MX_GPIO_Init+0xf4>)
 8000690:	f001 fc4e 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_IND_Pin */
  GPIO_InitStruct.Pin = MCU_IND_Pin;
 8000694:	2304      	movs	r3, #4
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_IND_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	480c      	ldr	r0, [pc, #48]	; (80006dc <MX_GPIO_Init+0xec>)
 80006ac:	f001 fc40 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN2_Pin MOTOR_IN1_Pin GPIO_1_Pin GPIO_2_Pin
                           GPIO_3_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN2_Pin|MOTOR_IN1_Pin|GPIO_1_Pin|GPIO_2_Pin
 80006b0:	f247 4304 	movw	r3, #29700	; 0x7404
 80006b4:	613b      	str	r3, [r7, #16]
                          |GPIO_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2302      	movs	r3, #2
 80006c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_GPIO_Init+0xf0>)
 80006ca:	f001 fc31 	bl	8001f30 <HAL_GPIO_Init>

}
 80006ce:	bf00      	nop
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010800 	.word	0x40010800
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	40011000 	.word	0x40011000

080006e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	f003 fa7f 	bl	8003bf4 <osDelay>
 80006f6:	e7fb      	b.n	80006f0 <StartDefaultTask+0x8>

080006f8 <blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink */
void blink(void const * argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink */
	HAL_GPIO_WritePin(MCU_IND_GPIO_Port,MCU_IND_Pin,GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2104      	movs	r1, #4
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <blink+0x3c>)
 8000706:	f001 fd97 	bl	8002238 <HAL_GPIO_WritePin>
	set_servo_pos(0);
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff fd26 	bl	800015c <set_servo_pos>
	int pos = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  pos +=5;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3305      	adds	r3, #5
 8000718:	60fb      	str	r3, [r7, #12]
	  if (pos > 100){
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2b64      	cmp	r3, #100	; 0x64
 800071e:	dd01      	ble.n	8000724 <blink+0x2c>
		  pos = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
	  }
	  set_servo_pos(pos);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd18 	bl	800015c <set_servo_pos>
	  osDelay(100);
 800072c:	2064      	movs	r0, #100	; 0x64
 800072e:	f003 fa61 	bl	8003bf4 <osDelay>
	  pos +=5;
 8000732:	e7ef      	b.n	8000714 <blink+0x1c>
 8000734:	40010800 	.word	0x40010800

08000738 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800074a:	f000 fb5f 	bl	8000e0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40012c00 	.word	0x40012c00

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <HAL_MspInit+0x68>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <HAL_MspInit+0x68>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_MspInit+0x68>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_MspInit+0x68>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <HAL_MspInit+0x68>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_MspInit+0x68>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	210f      	movs	r1, #15
 80007a2:	f06f 0001 	mvn.w	r0, #1
 80007a6:	f001 fb98 	bl	8001eda <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <HAL_MspInit+0x6c>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <HAL_MspInit+0x6c>)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010000 	.word	0x40010000

080007d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0318 	add.w	r3, r7, #24
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a28      	ldr	r2, [pc, #160]	; (8000894 <HAL_ADC_MspInit+0xbc>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d122      	bne.n	800083e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007f8:	4b27      	ldr	r3, [pc, #156]	; (8000898 <HAL_ADC_MspInit+0xc0>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a26      	ldr	r2, [pc, #152]	; (8000898 <HAL_ADC_MspInit+0xc0>)
 80007fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b24      	ldr	r3, [pc, #144]	; (8000898 <HAL_ADC_MspInit+0xc0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <HAL_ADC_MspInit+0xc0>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a20      	ldr	r2, [pc, #128]	; (8000898 <HAL_ADC_MspInit+0xc0>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <HAL_ADC_MspInit+0xc0>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0304 	and.w	r3, r3, #4
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = I_SENSE_Pin;
 8000828:	2310      	movs	r3, #16
 800082a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082c:	2303      	movs	r3, #3
 800082e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	4619      	mov	r1, r3
 8000836:	4819      	ldr	r0, [pc, #100]	; (800089c <HAL_ADC_MspInit+0xc4>)
 8000838:	f001 fb7a 	bl	8001f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800083c:	e026      	b.n	800088c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <HAL_ADC_MspInit+0xc8>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d121      	bne.n	800088c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <HAL_ADC_MspInit+0xc0>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a12      	ldr	r2, [pc, #72]	; (8000898 <HAL_ADC_MspInit+0xc0>)
 800084e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_ADC_MspInit+0xc0>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HAL_ADC_MspInit+0xc0>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <HAL_ADC_MspInit+0xc0>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_ADC_MspInit+0xc0>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8000878:	2320      	movs	r3, #32
 800087a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087c:	2303      	movs	r3, #3
 800087e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0318 	add.w	r3, r7, #24
 8000884:	4619      	mov	r1, r3
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <HAL_ADC_MspInit+0xc4>)
 8000888:	f001 fb52 	bl	8001f30 <HAL_GPIO_Init>
}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	; 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40012400 	.word	0x40012400
 8000898:	40021000 	.word	0x40021000
 800089c:	40010800 	.word	0x40010800
 80008a0:	40012800 	.word	0x40012800

080008a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <HAL_CAN_MspInit+0xb0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d143      	bne.n	800094c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <HAL_CAN_MspInit+0xb4>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	4a23      	ldr	r2, [pc, #140]	; (8000958 <HAL_CAN_MspInit+0xb4>)
 80008ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ce:	61d3      	str	r3, [r2, #28]
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <HAL_CAN_MspInit+0xb4>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <HAL_CAN_MspInit+0xb4>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <HAL_CAN_MspInit+0xb4>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_CAN_MspInit+0xb4>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	4619      	mov	r1, r3
 800090c:	4813      	ldr	r0, [pc, #76]	; (800095c <HAL_CAN_MspInit+0xb8>)
 800090e:	f001 fb0f 	bl	8001f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4619      	mov	r1, r3
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <HAL_CAN_MspInit+0xb8>)
 8000928:	f001 fb02 	bl	8001f30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2105      	movs	r1, #5
 8000930:	2014      	movs	r0, #20
 8000932:	f001 fad2 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000936:	2014      	movs	r0, #20
 8000938:	f001 faeb 	bl	8001f12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2105      	movs	r1, #5
 8000940:	2015      	movs	r0, #21
 8000942:	f001 faca 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000946:	2015      	movs	r0, #21
 8000948:	f001 fae3 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40006400 	.word	0x40006400
 8000958:	40021000 	.word	0x40021000
 800095c:	40010800 	.word	0x40010800

08000960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000970:	d10b      	bne.n	800098a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_TIM_Base_MspInit+0x34>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a07      	ldr	r2, [pc, #28]	; (8000994 <HAL_TIM_Base_MspInit+0x34>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_TIM_Base_MspInit+0x34>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a09      	ldr	r2, [pc, #36]	; (80009cc <HAL_TIM_PWM_MspInit+0x34>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d10b      	bne.n	80009c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_TIM_PWM_MspInit+0x38>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_TIM_PWM_MspInit+0x38>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_TIM_PWM_MspInit+0x38>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40000400 	.word	0x40000400
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009f2:	d12b      	bne.n	8000a4c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <HAL_TIM_MspPostInit+0xec>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a31      	ldr	r2, [pc, #196]	; (8000ac0 <HAL_TIM_MspPostInit+0xec>)
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <HAL_TIM_MspPostInit+0xec>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0308 	and.w	r3, r3, #8
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_EN_PWM_Pin;
 8000a0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2302      	movs	r3, #2
 8000a18:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MOTOR_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4828      	ldr	r0, [pc, #160]	; (8000ac4 <HAL_TIM_MspPostInit+0xf0>)
 8000a22:	f001 fa85 	bl	8001f30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <HAL_TIM_MspPostInit+0xf4>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
 8000a44:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <HAL_TIM_MspPostInit+0xf4>)
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a4a:	e034      	b.n	8000ab6 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <HAL_TIM_MspPostInit+0xf8>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d12f      	bne.n	8000ab6 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_TIM_MspPostInit+0xec>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a19      	ldr	r2, [pc, #100]	; (8000ac0 <HAL_TIM_MspPostInit+0xec>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <HAL_TIM_MspPostInit+0xec>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_TIM_MspPostInit+0xec>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <HAL_TIM_MspPostInit+0xec>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6193      	str	r3, [r2, #24]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_TIM_MspPostInit+0xec>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_BLINKER_Pin;
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LEFT_BLINKER_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <HAL_TIM_MspPostInit+0xfc>)
 8000a9a:	f001 fa49 	bl	8001f30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RIGHT_BLINKER_Pin;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RIGHT_BLINKER_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <HAL_TIM_MspPostInit+0xf0>)
 8000ab2:	f001 fa3d 	bl	8001f30 <HAL_GPIO_Init>
}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	; 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010c00 	.word	0x40010c00
 8000ac8:	40010000 	.word	0x40010000
 8000acc:	40000400 	.word	0x40000400
 8000ad0:	40010800 	.word	0x40010800

08000ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	; 0x30
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	4a2d      	ldr	r2, [pc, #180]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000af0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af4:	6193      	str	r3, [r2, #24]
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b02:	f107 020c 	add.w	r2, r7, #12
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 ffad 	bl	8002a6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b12:	f001 ff97 	bl	8002a44 <HAL_RCC_GetPCLK2Freq>
 8000b16:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <HAL_InitTick+0xd4>)
 8000b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b20:	0c9b      	lsrs	r3, r3, #18
 8000b22:	3b01      	subs	r3, #1
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <HAL_InitTick+0xd8>)
 8000b28:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <HAL_InitTick+0xdc>)
 8000b2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <HAL_InitTick+0xd8>)
 8000b2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b32:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b34:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <HAL_InitTick+0xd8>)
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_InitTick+0xd8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <HAL_InitTick+0xd8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_InitTick+0xd8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b4c:	4817      	ldr	r0, [pc, #92]	; (8000bac <HAL_InitTick+0xd8>)
 8000b4e:	f002 f891 	bl	8002c74 <HAL_TIM_Base_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d11b      	bne.n	8000b98 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b60:	4812      	ldr	r0, [pc, #72]	; (8000bac <HAL_InitTick+0xd8>)
 8000b62:	f002 f8d7 	bl	8002d14 <HAL_TIM_Base_Start_IT>
 8000b66:	4603      	mov	r3, r0
 8000b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d111      	bne.n	8000b98 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b74:	2019      	movs	r0, #25
 8000b76:	f001 f9cc 	bl	8001f12 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d808      	bhi.n	8000b92 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	2019      	movs	r0, #25
 8000b86:	f001 f9a8 	bl	8001eda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_InitTick+0xe0>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	e002      	b.n	8000b98 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3730      	adds	r7, #48	; 0x30
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	431bde83 	.word	0x431bde83
 8000bac:	20000378 	.word	0x20000378
 8000bb0:	40012c00 	.word	0x40012c00
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
	...

08000be4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000bea:	f000 fe9e 	bl	800192a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200003c0 	.word	0x200003c0

08000bf8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <CAN1_RX1_IRQHandler+0x10>)
 8000bfe:	f000 fe94 	bl	800192a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200003c0 	.word	0x200003c0

08000c0c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM1_UP_IRQHandler+0x10>)
 8000c12:	f002 f9c3 	bl	8002f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000378 	.word	0x20000378

08000c20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <can_init>:
CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;

QueueHandle_t xQueueCANRx;

void can_init(){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	MX_CAN_Init();
 8000c30:	f000 f840 	bl	8000cb4 <MX_CAN_Init>
	xQueueCANRx = xQueueCreate( 10,sizeof(can_msg_t));
 8000c34:	2200      	movs	r2, #0
 8000c36:	210a      	movs	r1, #10
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f003 f907 	bl	8003e4c <xQueueGenericCreate>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a01      	ldr	r2, [pc, #4]	; (8000c48 <can_init+0x1c>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2000040c 	.word	0x2000040c

08000c4c <HAL_CAN_RxFifo0MsgPendingCallback>:

// Interrupt Handler for receiving a can message.
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000c56:	4a15      	ldr	r2, [pc, #84]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 fd2f 	bl	80016be <HAL_CAN_GetRxMessage>
	can_msg_t msg;
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
	if (RxHeader.DLC !=0)
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d018      	beq.n	8000c9e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		msg.id = RxHeader.StdId;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	823b      	strh	r3, [r7, #16]
		memcpy(msg.msg, RxData, 8);
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000c76:	f107 0212 	add.w	r2, r7, #18
 8000c7a:	cb03      	ldmia	r3!, {r0, r1}
 8000c7c:	6010      	str	r0, [r2, #0]
 8000c7e:	6051      	str	r1, [r2, #4]
		BaseType_t res = xQueueSendFromISR(xQueueCANRx,(void * )&msg, &xHigherPriorityTaskWoken );
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	f107 020c 	add.w	r2, r7, #12
 8000c88:	f107 0110 	add.w	r1, r7, #16
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f003 f93a 	bl	8003f06 <xQueueGenericSendFromISR>
 8000c92:	61f8      	str	r0, [r7, #28]
		if (res == pdTRUE){
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d101      	bne.n	8000c9e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
			res = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
	if( xHigherPriorityTaskWoken )
	{
	        /* Actual macro used here is port specific. */

	}
}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200003e8 	.word	0x200003e8
 8000cac:	200003f0 	.word	0x200003f0
 8000cb0:	2000040c 	.word	0x2000040c

08000cb4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000cba:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000cbc:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <MX_CAN_Init+0xd0>)
 8000cbe:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000cc6:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000cd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cd8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000cda:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000cf8:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d04:	481e      	ldr	r0, [pc, #120]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000d06:	f000 fad2 	bl	80012ae <HAL_CAN_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000d10:	f000 f83a 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000d14:	2301      	movs	r3, #1
 8000d16:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x446<<5;
 8000d20:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8000d24:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x100<<5;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2e:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;  // doesn't matter in single can controllers
 8000d3c:	230e      	movs	r3, #14
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig)!= HAL_OK){
 8000d40:	463b      	mov	r3, r7
 8000d42:	4619      	mov	r1, r3
 8000d44:	480e      	ldr	r0, [pc, #56]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000d46:	f000 fbad 	bl	80014a4 <HAL_CAN_ConfigFilter>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_CAN_Init+0xa0>
		// Filter Config Error
		Error_Handler();
 8000d50:	f000 f81a 	bl	8000d88 <Error_Handler>
	}

	// Start CAN
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000d54:	480a      	ldr	r0, [pc, #40]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000d56:	f000 fc6e 	bl	8001636 <HAL_CAN_Start>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_CAN_Init+0xb0>
	{
	  /* Start Error */
	  Error_Handler();
 8000d60:	f000 f812 	bl	8000d88 <Error_Handler>
	}
	// Activate RX Notification
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK){
 8000d64:	2102      	movs	r1, #2
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <MX_CAN_Init+0xcc>)
 8000d68:	f000 fdba 	bl	80018e0 <HAL_CAN_ActivateNotification>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_CAN_Init+0xc2>
		// Notification Error
		Error_Handler();
 8000d72:	f000 f809 	bl	8000d88 <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */
}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200003c0 	.word	0x200003c0
 8000d84:	40006400 	.word	0x40006400

08000d88 <Error_Handler>:

void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <Error_Handler+0x8>
	...

08000d94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dba:	f7ff ff31 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f004 fb75 	bl	80054ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dc2:	f7ff fb79 	bl	80004b8 <main>
  bx lr
 8000dc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dd0:	080055c0 	.word	0x080055c0
  ldr r2, =_sbss
 8000dd4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dd8:	20001160 	.word	0x20001160

08000ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_Init+0x28>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_Init+0x28>)
 8000dea:	f043 0310 	orr.w	r3, r3, #16
 8000dee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f001 f867 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	200f      	movs	r0, #15
 8000df8:	f7ff fe6c 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff fcb4 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40022000 	.word	0x40022000

08000e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_IncTick+0x1c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_IncTick+0x20>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <HAL_IncTick+0x20>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000410 	.word	0x20000410

08000e30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <HAL_GetTick+0x10>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	20000410 	.word	0x20000410

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff fff0 	bl	8000e30 <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffe0 	bl	8000e30 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008

08000e8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e0be      	b.n	800102c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d109      	bne.n	8000ed0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fc84 	bl	80007d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f9ab 	bl	800122c <ADC_ConversionStop_Disable>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 8099 	bne.w	800101a <HAL_ADC_Init+0x18e>
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f040 8095 	bne.w	800101a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ef8:	f023 0302 	bic.w	r3, r3, #2
 8000efc:	f043 0202 	orr.w	r2, r3, #2
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7b1b      	ldrb	r3, [r3, #12]
 8000f12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f24:	d003      	beq.n	8000f2e <HAL_ADC_Init+0xa2>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d102      	bne.n	8000f34 <HAL_ADC_Init+0xa8>
 8000f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f32:	e000      	b.n	8000f36 <HAL_ADC_Init+0xaa>
 8000f34:	2300      	movs	r3, #0
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7d1b      	ldrb	r3, [r3, #20]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d119      	bne.n	8000f78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7b1b      	ldrb	r3, [r3, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d109      	bne.n	8000f60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	035a      	lsls	r2, r3, #13
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	e00b      	b.n	8000f78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	f043 0220 	orr.w	r2, r3, #32
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	f043 0201 	orr.w	r2, r3, #1
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <HAL_ADC_Init+0x1a8>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6812      	ldr	r2, [r2, #0]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fa8:	d003      	beq.n	8000fb2 <HAL_ADC_Init+0x126>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d104      	bne.n	8000fbc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	051b      	lsls	r3, r3, #20
 8000fba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_ADC_Init+0x1ac>)
 8000fd8:	4013      	ands	r3, r2
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d10b      	bne.n	8000ff8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	f023 0303 	bic.w	r3, r3, #3
 8000fee:	f043 0201 	orr.w	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ff6:	e018      	b.n	800102a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffc:	f023 0312 	bic.w	r3, r3, #18
 8001000:	f043 0210 	orr.w	r2, r3, #16
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	f043 0201 	orr.w	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001018:	e007      	b.n	800102a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101e:	f043 0210 	orr.w	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800102a:	7dfb      	ldrb	r3, [r7, #23]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	ffe1f7fd 	.word	0xffe1f7fd
 8001038:	ff1f0efe 	.word	0xff1f0efe

0800103c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <HAL_ADC_ConfigChannel+0x20>
 8001058:	2302      	movs	r3, #2
 800105a:	e0dc      	b.n	8001216 <HAL_ADC_ConfigChannel+0x1da>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b06      	cmp	r3, #6
 800106a:	d81c      	bhi.n	80010a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	3b05      	subs	r3, #5
 800107e:	221f      	movs	r2, #31
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	4019      	ands	r1, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	3b05      	subs	r3, #5
 8001098:	fa00 f203 	lsl.w	r2, r0, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
 80010a4:	e03c      	b.n	8001120 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	d81c      	bhi.n	80010e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	3b23      	subs	r3, #35	; 0x23
 80010c0:	221f      	movs	r2, #31
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	4019      	ands	r1, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	3b23      	subs	r3, #35	; 0x23
 80010da:	fa00 f203 	lsl.w	r2, r0, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	430a      	orrs	r2, r1
 80010e4:	631a      	str	r2, [r3, #48]	; 0x30
 80010e6:	e01b      	b.n	8001120 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	3b41      	subs	r3, #65	; 0x41
 80010fa:	221f      	movs	r2, #31
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	4019      	ands	r1, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	3b41      	subs	r3, #65	; 0x41
 8001114:	fa00 f203 	lsl.w	r2, r0, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b09      	cmp	r3, #9
 8001126:	d91c      	bls.n	8001162 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68d9      	ldr	r1, [r3, #12]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	3b1e      	subs	r3, #30
 800113a:	2207      	movs	r2, #7
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	4019      	ands	r1, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	6898      	ldr	r0, [r3, #8]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	3b1e      	subs	r3, #30
 8001154:	fa00 f203 	lsl.w	r2, r0, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	e019      	b.n	8001196 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6919      	ldr	r1, [r3, #16]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	2207      	movs	r2, #7
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	4019      	ands	r1, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6898      	ldr	r0, [r3, #8]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	fa00 f203 	lsl.w	r2, r0, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b10      	cmp	r3, #16
 800119c:	d003      	beq.n	80011a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011a2:	2b11      	cmp	r3, #17
 80011a4:	d132      	bne.n	800120c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_ADC_ConfigChannel+0x1e4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d125      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d126      	bne.n	800120c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b10      	cmp	r3, #16
 80011d4:	d11a      	bne.n	800120c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_ADC_ConfigChannel+0x1e8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <HAL_ADC_ConfigChannel+0x1ec>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	0c9a      	lsrs	r2, r3, #18
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ec:	e002      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f9      	bne.n	80011ee <HAL_ADC_ConfigChannel+0x1b2>
 80011fa:	e007      	b.n	800120c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	f043 0220 	orr.w	r2, r3, #32
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	40012400 	.word	0x40012400
 8001224:	20000000 	.word	0x20000000
 8001228:	431bde83 	.word	0x431bde83

0800122c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b01      	cmp	r3, #1
 8001244:	d12e      	bne.n	80012a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0201 	bic.w	r2, r2, #1
 8001254:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001256:	f7ff fdeb 	bl	8000e30 <HAL_GetTick>
 800125a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800125c:	e01b      	b.n	8001296 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800125e:	f7ff fde7 	bl	8000e30 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d914      	bls.n	8001296 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b01      	cmp	r3, #1
 8001278:	d10d      	bne.n	8001296 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	f043 0210 	orr.w	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	f043 0201 	orr.w	r2, r3, #1
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e007      	b.n	80012a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d0dc      	beq.n	800125e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0ed      	b.n	800149c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fae9 	bl	80008a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 0201 	orr.w	r2, r2, #1
 80012e0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e2:	f7ff fda5 	bl	8000e30 <HAL_GetTick>
 80012e6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012e8:	e012      	b.n	8001310 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012ea:	f7ff fda1 	bl	8000e30 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b0a      	cmp	r3, #10
 80012f6:	d90b      	bls.n	8001310 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2205      	movs	r2, #5
 8001308:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0c5      	b.n	800149c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0e5      	beq.n	80012ea <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0202 	bic.w	r2, r2, #2
 800132c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800132e:	f7ff fd7f 	bl	8000e30 <HAL_GetTick>
 8001332:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001334:	e012      	b.n	800135c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001336:	f7ff fd7b 	bl	8000e30 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b0a      	cmp	r3, #10
 8001342:	d90b      	bls.n	800135c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2205      	movs	r2, #5
 8001354:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e09f      	b.n	800149c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1e5      	bne.n	8001336 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7e1b      	ldrb	r3, [r3, #24]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d108      	bne.n	8001384 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e007      	b.n	8001394 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001392:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7e5b      	ldrb	r3, [r3, #25]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d108      	bne.n	80013ae <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e007      	b.n	80013be <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7e9b      	ldrb	r3, [r3, #26]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d108      	bne.n	80013d8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0220 	orr.w	r2, r2, #32
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e007      	b.n	80013e8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0220 	bic.w	r2, r2, #32
 80013e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d108      	bne.n	8001402 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0210 	bic.w	r2, r2, #16
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e007      	b.n	8001412 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0210 	orr.w	r2, r2, #16
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7f1b      	ldrb	r3, [r3, #28]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d108      	bne.n	800142c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 0208 	orr.w	r2, r2, #8
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e007      	b.n	800143c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0208 	bic.w	r2, r2, #8
 800143a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7f5b      	ldrb	r3, [r3, #29]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d108      	bne.n	8001456 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0204 	orr.w	r2, r2, #4
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	e007      	b.n	8001466 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0204 	bic.w	r2, r2, #4
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	ea42 0103 	orr.w	r1, r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	1e5a      	subs	r2, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014bc:	7cfb      	ldrb	r3, [r7, #19]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d003      	beq.n	80014ca <HAL_CAN_ConfigFilter+0x26>
 80014c2:	7cfb      	ldrb	r3, [r7, #19]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	f040 80aa 	bne.w	800161e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014d0:	f043 0201 	orr.w	r2, r3, #1
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	2201      	movs	r2, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	401a      	ands	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d123      	bne.n	800154c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001526:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3248      	adds	r2, #72	; 0x48
 800152c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001540:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001542:	6979      	ldr	r1, [r7, #20]
 8001544:	3348      	adds	r3, #72	; 0x48
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d122      	bne.n	800159a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	431a      	orrs	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001574:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3248      	adds	r2, #72	; 0x48
 800157a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800158e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001590:	6979      	ldr	r1, [r7, #20]
 8001592:	3348      	adds	r3, #72	; 0x48
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	401a      	ands	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015b4:	e007      	b.n	80015c6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	431a      	orrs	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d109      	bne.n	80015e2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	401a      	ands	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015e0:	e007      	b.n	80015f2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	431a      	orrs	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001610:	f023 0201 	bic.w	r2, r3, #1
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e006      	b.n	800162c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
  }
}
 800162c:	4618      	mov	r0, r3
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b01      	cmp	r3, #1
 8001648:	d12e      	bne.n	80016a8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0201 	bic.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001662:	f7ff fbe5 	bl	8000e30 <HAL_GetTick>
 8001666:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001668:	e012      	b.n	8001690 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800166a:	f7ff fbe1 	bl	8000e30 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b0a      	cmp	r3, #10
 8001676:	d90b      	bls.n	8001690 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2205      	movs	r2, #5
 8001688:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e012      	b.n	80016b6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1e5      	bne.n	800166a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e006      	b.n	80016b6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
  }
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016be:	b480      	push	{r7}
 80016c0:	b087      	sub	sp, #28
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d003      	beq.n	80016e2 <HAL_CAN_GetRxMessage+0x24>
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	f040 80f3 	bne.w	80018c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10e      	bne.n	8001706 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d116      	bne.n	8001724 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0e7      	b.n	80018d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d107      	bne.n	8001724 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0d8      	b.n	80018d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	331b      	adds	r3, #27
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4413      	add	r3, r2
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0204 	and.w	r2, r3, #4
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	331b      	adds	r3, #27
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	4413      	add	r3, r2
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0d5b      	lsrs	r3, r3, #21
 8001752:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e00b      	b.n	8001774 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	331b      	adds	r3, #27
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	4413      	add	r3, r2
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	331b      	adds	r3, #27
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	4413      	add	r3, r2
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0202 	and.w	r2, r3, #2
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	331b      	adds	r3, #27
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	4413      	add	r3, r2
 8001796:	3304      	adds	r3, #4
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 020f 	and.w	r2, r3, #15
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	331b      	adds	r3, #27
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	4413      	add	r3, r2
 80017ae:	3304      	adds	r3, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	331b      	adds	r3, #27
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	4413      	add	r3, r2
 80017c6:	3304      	adds	r3, #4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4413      	add	r3, r2
 80017dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0a1a      	lsrs	r2, r3, #8
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4413      	add	r3, r2
 800180c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	0c1a      	lsrs	r2, r3, #16
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	3302      	adds	r3, #2
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	4413      	add	r3, r2
 8001826:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0e1a      	lsrs	r2, r3, #24
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	3303      	adds	r3, #3
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	3304      	adds	r3, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	0a1a      	lsrs	r2, r3, #8
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	3305      	adds	r3, #5
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	0c1a      	lsrs	r2, r3, #16
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3306      	adds	r3, #6
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0e1a      	lsrs	r2, r3, #24
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	3307      	adds	r3, #7
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d108      	bne.n	80018b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0220 	orr.w	r2, r2, #32
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	e007      	b.n	80018c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0220 	orr.w	r2, r2, #32
 80018c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e006      	b.n	80018d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
  }
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	371c      	adds	r7, #28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d002      	beq.n	80018fe <HAL_CAN_ActivateNotification+0x1e>
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d109      	bne.n	8001912 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6959      	ldr	r1, [r3, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e006      	b.n	8001920 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
  }
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b08a      	sub	sp, #40	; 0x28
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d07c      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d023      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f983 	bl	8001c98 <HAL_CAN_TxMailbox0CompleteCallback>
 8001992:	e016      	b.n	80019c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
 80019a6:	e00c      	b.n	80019c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	e002      	b.n	80019c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f986 	bl	8001cce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d024      	beq.n	8001a16 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f962 	bl	8001caa <HAL_CAN_TxMailbox1CompleteCallback>
 80019e6:	e016      	b.n	8001a16 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
 80019fa:	e00c      	b.n	8001a16 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d004      	beq.n	8001a10 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0e:	e002      	b.n	8001a16 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f965 	bl	8001ce0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d024      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f941 	bl	8001cbc <HAL_CAN_TxMailbox2CompleteCallback>
 8001a3a:	e016      	b.n	8001a6a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d004      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	e00c      	b.n	8001a6a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
 8001a62:	e002      	b.n	8001a6a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f944 	bl	8001cf2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00c      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d007      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00b      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f92a 	bl	8001d04 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff f8bf 	bl	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00c      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2210      	movs	r2, #16
 8001af0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f90a 	bl	8001d28 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f8f2 	bl	8001d16 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00b      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8f3 	bl	8001d3a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f8eb 	bl	8001d4c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d07b      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d072      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d043      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d03e      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bf8:	2b60      	cmp	r3, #96	; 0x60
 8001bfa:	d02b      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x32a>
 8001bfc:	2b60      	cmp	r3, #96	; 0x60
 8001bfe:	d82e      	bhi.n	8001c5e <HAL_CAN_IRQHandler+0x334>
 8001c00:	2b50      	cmp	r3, #80	; 0x50
 8001c02:	d022      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x320>
 8001c04:	2b50      	cmp	r3, #80	; 0x50
 8001c06:	d82a      	bhi.n	8001c5e <HAL_CAN_IRQHandler+0x334>
 8001c08:	2b40      	cmp	r3, #64	; 0x40
 8001c0a:	d019      	beq.n	8001c40 <HAL_CAN_IRQHandler+0x316>
 8001c0c:	2b40      	cmp	r3, #64	; 0x40
 8001c0e:	d826      	bhi.n	8001c5e <HAL_CAN_IRQHandler+0x334>
 8001c10:	2b30      	cmp	r3, #48	; 0x30
 8001c12:	d010      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x30c>
 8001c14:	2b30      	cmp	r3, #48	; 0x30
 8001c16:	d822      	bhi.n	8001c5e <HAL_CAN_IRQHandler+0x334>
 8001c18:	2b10      	cmp	r3, #16
 8001c1a:	d002      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x2f8>
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d005      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c20:	e01d      	b.n	8001c5e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c2a:	e019      	b.n	8001c60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	f043 0310 	orr.w	r3, r3, #16
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c34:	e014      	b.n	8001c60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c3e:	e00f      	b.n	8001c60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c48:	e00a      	b.n	8001c60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c52:	e005      	b.n	8001c60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c5c:	e000      	b.n	8001c60 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c5e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c6e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2204      	movs	r2, #4
 8001c76:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d008      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f867 	bl	8001d5e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da2:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60d3      	str	r3, [r2, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	f003 0307 	and.w	r3, r3, #7
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	db0b      	blt.n	8001dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	4906      	ldr	r1, [pc, #24]	; (8001e08 <__NVIC_EnableIRQ+0x34>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2001      	movs	r0, #1
 8001df6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff4f 	bl	8001d70 <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff64 	bl	8001db8 <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ffb2 	bl	8001e60 <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff81 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff57 	bl	8001dd4 <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b08b      	sub	sp, #44	; 0x2c
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f42:	e169      	b.n	8002218 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f44:	2201      	movs	r2, #1
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	f040 8158 	bne.w	8002212 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4a9a      	ldr	r2, [pc, #616]	; (80021d0 <HAL_GPIO_Init+0x2a0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d05e      	beq.n	800202a <HAL_GPIO_Init+0xfa>
 8001f6c:	4a98      	ldr	r2, [pc, #608]	; (80021d0 <HAL_GPIO_Init+0x2a0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d875      	bhi.n	800205e <HAL_GPIO_Init+0x12e>
 8001f72:	4a98      	ldr	r2, [pc, #608]	; (80021d4 <HAL_GPIO_Init+0x2a4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d058      	beq.n	800202a <HAL_GPIO_Init+0xfa>
 8001f78:	4a96      	ldr	r2, [pc, #600]	; (80021d4 <HAL_GPIO_Init+0x2a4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d86f      	bhi.n	800205e <HAL_GPIO_Init+0x12e>
 8001f7e:	4a96      	ldr	r2, [pc, #600]	; (80021d8 <HAL_GPIO_Init+0x2a8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d052      	beq.n	800202a <HAL_GPIO_Init+0xfa>
 8001f84:	4a94      	ldr	r2, [pc, #592]	; (80021d8 <HAL_GPIO_Init+0x2a8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d869      	bhi.n	800205e <HAL_GPIO_Init+0x12e>
 8001f8a:	4a94      	ldr	r2, [pc, #592]	; (80021dc <HAL_GPIO_Init+0x2ac>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d04c      	beq.n	800202a <HAL_GPIO_Init+0xfa>
 8001f90:	4a92      	ldr	r2, [pc, #584]	; (80021dc <HAL_GPIO_Init+0x2ac>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d863      	bhi.n	800205e <HAL_GPIO_Init+0x12e>
 8001f96:	4a92      	ldr	r2, [pc, #584]	; (80021e0 <HAL_GPIO_Init+0x2b0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d046      	beq.n	800202a <HAL_GPIO_Init+0xfa>
 8001f9c:	4a90      	ldr	r2, [pc, #576]	; (80021e0 <HAL_GPIO_Init+0x2b0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d85d      	bhi.n	800205e <HAL_GPIO_Init+0x12e>
 8001fa2:	2b12      	cmp	r3, #18
 8001fa4:	d82a      	bhi.n	8001ffc <HAL_GPIO_Init+0xcc>
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d859      	bhi.n	800205e <HAL_GPIO_Init+0x12e>
 8001faa:	a201      	add	r2, pc, #4	; (adr r2, 8001fb0 <HAL_GPIO_Init+0x80>)
 8001fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb0:	0800202b 	.word	0x0800202b
 8001fb4:	08002005 	.word	0x08002005
 8001fb8:	08002017 	.word	0x08002017
 8001fbc:	08002059 	.word	0x08002059
 8001fc0:	0800205f 	.word	0x0800205f
 8001fc4:	0800205f 	.word	0x0800205f
 8001fc8:	0800205f 	.word	0x0800205f
 8001fcc:	0800205f 	.word	0x0800205f
 8001fd0:	0800205f 	.word	0x0800205f
 8001fd4:	0800205f 	.word	0x0800205f
 8001fd8:	0800205f 	.word	0x0800205f
 8001fdc:	0800205f 	.word	0x0800205f
 8001fe0:	0800205f 	.word	0x0800205f
 8001fe4:	0800205f 	.word	0x0800205f
 8001fe8:	0800205f 	.word	0x0800205f
 8001fec:	0800205f 	.word	0x0800205f
 8001ff0:	0800205f 	.word	0x0800205f
 8001ff4:	0800200d 	.word	0x0800200d
 8001ff8:	08002021 	.word	0x08002021
 8001ffc:	4a79      	ldr	r2, [pc, #484]	; (80021e4 <HAL_GPIO_Init+0x2b4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002002:	e02c      	b.n	800205e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	623b      	str	r3, [r7, #32]
          break;
 800200a:	e029      	b.n	8002060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	3304      	adds	r3, #4
 8002012:	623b      	str	r3, [r7, #32]
          break;
 8002014:	e024      	b.n	8002060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	3308      	adds	r3, #8
 800201c:	623b      	str	r3, [r7, #32]
          break;
 800201e:	e01f      	b.n	8002060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	330c      	adds	r3, #12
 8002026:	623b      	str	r3, [r7, #32]
          break;
 8002028:	e01a      	b.n	8002060 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002032:	2304      	movs	r3, #4
 8002034:	623b      	str	r3, [r7, #32]
          break;
 8002036:	e013      	b.n	8002060 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d105      	bne.n	800204c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002040:	2308      	movs	r3, #8
 8002042:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	611a      	str	r2, [r3, #16]
          break;
 800204a:	e009      	b.n	8002060 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800204c:	2308      	movs	r3, #8
 800204e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	615a      	str	r2, [r3, #20]
          break;
 8002056:	e003      	b.n	8002060 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
          break;
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x130>
          break;
 800205e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2bff      	cmp	r3, #255	; 0xff
 8002064:	d801      	bhi.n	800206a <HAL_GPIO_Init+0x13a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	e001      	b.n	800206e <HAL_GPIO_Init+0x13e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2bff      	cmp	r3, #255	; 0xff
 8002074:	d802      	bhi.n	800207c <HAL_GPIO_Init+0x14c>
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	e002      	b.n	8002082 <HAL_GPIO_Init+0x152>
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	3b08      	subs	r3, #8
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	210f      	movs	r1, #15
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	401a      	ands	r2, r3
 8002094:	6a39      	ldr	r1, [r7, #32]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	431a      	orrs	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80b1 	beq.w	8002212 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020b0:	4b4d      	ldr	r3, [pc, #308]	; (80021e8 <HAL_GPIO_Init+0x2b8>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	4a4c      	ldr	r2, [pc, #304]	; (80021e8 <HAL_GPIO_Init+0x2b8>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6193      	str	r3, [r2, #24]
 80020bc:	4b4a      	ldr	r3, [pc, #296]	; (80021e8 <HAL_GPIO_Init+0x2b8>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020c8:	4a48      	ldr	r2, [pc, #288]	; (80021ec <HAL_GPIO_Init+0x2bc>)
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	3302      	adds	r3, #2
 80020d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	220f      	movs	r2, #15
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a40      	ldr	r2, [pc, #256]	; (80021f0 <HAL_GPIO_Init+0x2c0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d013      	beq.n	800211c <HAL_GPIO_Init+0x1ec>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a3f      	ldr	r2, [pc, #252]	; (80021f4 <HAL_GPIO_Init+0x2c4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00d      	beq.n	8002118 <HAL_GPIO_Init+0x1e8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a3e      	ldr	r2, [pc, #248]	; (80021f8 <HAL_GPIO_Init+0x2c8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d007      	beq.n	8002114 <HAL_GPIO_Init+0x1e4>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3d      	ldr	r2, [pc, #244]	; (80021fc <HAL_GPIO_Init+0x2cc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d101      	bne.n	8002110 <HAL_GPIO_Init+0x1e0>
 800210c:	2303      	movs	r3, #3
 800210e:	e006      	b.n	800211e <HAL_GPIO_Init+0x1ee>
 8002110:	2304      	movs	r3, #4
 8002112:	e004      	b.n	800211e <HAL_GPIO_Init+0x1ee>
 8002114:	2302      	movs	r3, #2
 8002116:	e002      	b.n	800211e <HAL_GPIO_Init+0x1ee>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_GPIO_Init+0x1ee>
 800211c:	2300      	movs	r3, #0
 800211e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002120:	f002 0203 	and.w	r2, r2, #3
 8002124:	0092      	lsls	r2, r2, #2
 8002126:	4093      	lsls	r3, r2
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800212e:	492f      	ldr	r1, [pc, #188]	; (80021ec <HAL_GPIO_Init+0x2bc>)
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d006      	beq.n	8002156 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002148:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	492c      	ldr	r1, [pc, #176]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	43db      	mvns	r3, r3
 800215e:	4928      	ldr	r1, [pc, #160]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 8002160:	4013      	ands	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002170:	4b23      	ldr	r3, [pc, #140]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4922      	ldr	r1, [pc, #136]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	43db      	mvns	r3, r3
 8002186:	491e      	ldr	r1, [pc, #120]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 8002188:	4013      	ands	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	4918      	ldr	r1, [pc, #96]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	4914      	ldr	r1, [pc, #80]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d021      	beq.n	8002204 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	490e      	ldr	r1, [pc, #56]	; (8002200 <HAL_GPIO_Init+0x2d0>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60cb      	str	r3, [r1, #12]
 80021cc:	e021      	b.n	8002212 <HAL_GPIO_Init+0x2e2>
 80021ce:	bf00      	nop
 80021d0:	10320000 	.word	0x10320000
 80021d4:	10310000 	.word	0x10310000
 80021d8:	10220000 	.word	0x10220000
 80021dc:	10210000 	.word	0x10210000
 80021e0:	10120000 	.word	0x10120000
 80021e4:	10110000 	.word	0x10110000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40010000 	.word	0x40010000
 80021f0:	40010800 	.word	0x40010800
 80021f4:	40010c00 	.word	0x40010c00
 80021f8:	40011000 	.word	0x40011000
 80021fc:	40011400 	.word	0x40011400
 8002200:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_GPIO_Init+0x304>)
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	43db      	mvns	r3, r3
 800220c:	4909      	ldr	r1, [pc, #36]	; (8002234 <HAL_GPIO_Init+0x304>)
 800220e:	4013      	ands	r3, r2
 8002210:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	3301      	adds	r3, #1
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	fa22 f303 	lsr.w	r3, r2, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	f47f ae8e 	bne.w	8001f44 <HAL_GPIO_Init+0x14>
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	372c      	adds	r7, #44	; 0x2c
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	40010400 	.word	0x40010400

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002254:	e003      	b.n	800225e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	041a      	lsls	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	611a      	str	r2, [r3, #16]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4013      	ands	r3, r2
 8002280:	041a      	lsls	r2, r3, #16
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	43d9      	mvns	r1, r3
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	400b      	ands	r3, r1
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	611a      	str	r2, [r3, #16]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
	...

0800229c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e272      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8087 	beq.w	80023ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022bc:	4b92      	ldr	r3, [pc, #584]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d00c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022c8:	4b8f      	ldr	r3, [pc, #572]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d112      	bne.n	80022fa <HAL_RCC_OscConfig+0x5e>
 80022d4:	4b8c      	ldr	r3, [pc, #560]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e0:	d10b      	bne.n	80022fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e2:	4b89      	ldr	r3, [pc, #548]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d06c      	beq.n	80023c8 <HAL_RCC_OscConfig+0x12c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d168      	bne.n	80023c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e24c      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x76>
 8002304:	4b80      	ldr	r3, [pc, #512]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a7f      	ldr	r2, [pc, #508]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e02e      	b.n	8002370 <HAL_RCC_OscConfig+0xd4>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x98>
 800231a:	4b7b      	ldr	r3, [pc, #492]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7a      	ldr	r2, [pc, #488]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b78      	ldr	r3, [pc, #480]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a77      	ldr	r2, [pc, #476]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800232c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e01d      	b.n	8002370 <HAL_RCC_OscConfig+0xd4>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0xbc>
 800233e:	4b72      	ldr	r3, [pc, #456]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a71      	ldr	r2, [pc, #452]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a6e      	ldr	r2, [pc, #440]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0xd4>
 8002358:	4b6b      	ldr	r3, [pc, #428]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a6a      	ldr	r2, [pc, #424]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b68      	ldr	r3, [pc, #416]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a67      	ldr	r2, [pc, #412]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fd5a 	bl	8000e30 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fd56 	bl	8000e30 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e200      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b5d      	ldr	r3, [pc, #372]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0xe4>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe fd46 	bl	8000e30 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fd42 	bl	8000e30 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1ec      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	4b53      	ldr	r3, [pc, #332]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x10c>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d063      	beq.n	800249e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d6:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023e2:	4b49      	ldr	r3, [pc, #292]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d11c      	bne.n	8002428 <HAL_RCC_OscConfig+0x18c>
 80023ee:	4b46      	ldr	r3, [pc, #280]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	4b43      	ldr	r3, [pc, #268]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x176>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e1c0      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4939      	ldr	r1, [pc, #228]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	e03a      	b.n	800249e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002430:	4b36      	ldr	r3, [pc, #216]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7fe fcfb 	bl	8000e30 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243e:	f7fe fcf7 	bl	8000e30 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e1a1      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4927      	ldr	r1, [pc, #156]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002472:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7fe fcda 	bl	8000e30 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002480:	f7fe fcd6 	bl	8000e30 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e180      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d03a      	beq.n	8002520 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d019      	beq.n	80024e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_RCC_OscConfig+0x274>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b8:	f7fe fcba 	bl	8000e30 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c0:	f7fe fcb6 	bl	8000e30 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e160      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024de:	2001      	movs	r0, #1
 80024e0:	f000 faf4 	bl	8002acc <RCC_Delay>
 80024e4:	e01c      	b.n	8002520 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_RCC_OscConfig+0x274>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ec:	f7fe fca0 	bl	8000e30 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f2:	e00f      	b.n	8002514 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f4:	f7fe fc9c 	bl	8000e30 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d908      	bls.n	8002514 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e146      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	42420000 	.word	0x42420000
 8002510:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	4b92      	ldr	r3, [pc, #584]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e9      	bne.n	80024f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80a6 	beq.w	800267a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002532:	4b8b      	ldr	r3, [pc, #556]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10d      	bne.n	800255a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	4b88      	ldr	r3, [pc, #544]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a87      	ldr	r2, [pc, #540]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002548:	61d3      	str	r3, [r2, #28]
 800254a:	4b85      	ldr	r3, [pc, #532]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002556:	2301      	movs	r3, #1
 8002558:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255a:	4b82      	ldr	r3, [pc, #520]	; (8002764 <HAL_RCC_OscConfig+0x4c8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d118      	bne.n	8002598 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002566:	4b7f      	ldr	r3, [pc, #508]	; (8002764 <HAL_RCC_OscConfig+0x4c8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7e      	ldr	r2, [pc, #504]	; (8002764 <HAL_RCC_OscConfig+0x4c8>)
 800256c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002572:	f7fe fc5d 	bl	8000e30 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257a:	f7fe fc59 	bl	8000e30 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b64      	cmp	r3, #100	; 0x64
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e103      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	4b75      	ldr	r3, [pc, #468]	; (8002764 <HAL_RCC_OscConfig+0x4c8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x312>
 80025a0:	4b6f      	ldr	r3, [pc, #444]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a6e      	ldr	r2, [pc, #440]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6213      	str	r3, [r2, #32]
 80025ac:	e02d      	b.n	800260a <HAL_RCC_OscConfig+0x36e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x334>
 80025b6:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4a69      	ldr	r2, [pc, #420]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	6213      	str	r3, [r2, #32]
 80025c2:	4b67      	ldr	r3, [pc, #412]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4a66      	ldr	r2, [pc, #408]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	6213      	str	r3, [r2, #32]
 80025ce:	e01c      	b.n	800260a <HAL_RCC_OscConfig+0x36e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d10c      	bne.n	80025f2 <HAL_RCC_OscConfig+0x356>
 80025d8:	4b61      	ldr	r3, [pc, #388]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a60      	ldr	r2, [pc, #384]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6213      	str	r3, [r2, #32]
 80025e4:	4b5e      	ldr	r3, [pc, #376]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4a5d      	ldr	r2, [pc, #372]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6213      	str	r3, [r2, #32]
 80025f0:	e00b      	b.n	800260a <HAL_RCC_OscConfig+0x36e>
 80025f2:	4b5b      	ldr	r3, [pc, #364]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a5a      	ldr	r2, [pc, #360]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6213      	str	r3, [r2, #32]
 80025fe:	4b58      	ldr	r3, [pc, #352]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a57      	ldr	r2, [pc, #348]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d015      	beq.n	800263e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7fe fc0d 	bl	8000e30 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fe fc09 	bl	8000e30 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e0b1      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	4b4b      	ldr	r3, [pc, #300]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ee      	beq.n	800261a <HAL_RCC_OscConfig+0x37e>
 800263c:	e014      	b.n	8002668 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7fe fbf7 	bl	8000e30 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe fbf3 	bl	8000e30 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e09b      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	4b40      	ldr	r3, [pc, #256]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ee      	bne.n	8002646 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d105      	bne.n	800267a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4a3b      	ldr	r2, [pc, #236]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002678:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8087 	beq.w	8002792 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002684:	4b36      	ldr	r3, [pc, #216]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d061      	beq.n	8002754 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d146      	bne.n	8002726 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002698:	4b33      	ldr	r3, [pc, #204]	; (8002768 <HAL_RCC_OscConfig+0x4cc>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe fbc7 	bl	8000e30 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fbc3 	bl	8000e30 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e06d      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b8:	4b29      	ldr	r3, [pc, #164]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d108      	bne.n	80026e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	4921      	ldr	r1, [pc, #132]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e0:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a19      	ldr	r1, [r3, #32]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	430b      	orrs	r3, r1
 80026f2:	491b      	ldr	r1, [pc, #108]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_RCC_OscConfig+0x4cc>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7fe fb97 	bl	8000e30 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002706:	f7fe fb93 	bl	8000e30 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e03d      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x46a>
 8002724:	e035      	b.n	8002792 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_RCC_OscConfig+0x4cc>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe fb80 	bl	8000e30 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7fe fb7c 	bl	8000e30 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e026      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x498>
 8002752:	e01e      	b.n	8002792 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d107      	bne.n	800276c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e019      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
 8002760:	40021000 	.word	0x40021000
 8002764:	40007000 	.word	0x40007000
 8002768:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x500>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	429a      	cmp	r2, r3
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000

080027a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0d0      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b4:	4b6a      	ldr	r3, [pc, #424]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d910      	bls.n	80027e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b67      	ldr	r3, [pc, #412]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 0207 	bic.w	r2, r3, #7
 80027ca:	4965      	ldr	r1, [pc, #404]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b63      	ldr	r3, [pc, #396]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0b8      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027fc:	4b59      	ldr	r3, [pc, #356]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a58      	ldr	r2, [pc, #352]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002814:	4b53      	ldr	r3, [pc, #332]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a52      	ldr	r2, [pc, #328]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800281e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002820:	4b50      	ldr	r3, [pc, #320]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	494d      	ldr	r1, [pc, #308]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d040      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b47      	ldr	r3, [pc, #284]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d115      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e07f      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285e:	4b41      	ldr	r3, [pc, #260]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e073      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286e:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e06b      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800287e:	4b39      	ldr	r3, [pc, #228]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f023 0203 	bic.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4936      	ldr	r1, [pc, #216]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002890:	f7fe face 	bl	8000e30 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	e00a      	b.n	80028ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002898:	f7fe faca 	bl	8000e30 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e053      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 020c 	and.w	r2, r3, #12
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	429a      	cmp	r2, r3
 80028be:	d1eb      	bne.n	8002898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c0:	4b27      	ldr	r3, [pc, #156]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d210      	bcs.n	80028f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 0207 	bic.w	r2, r3, #7
 80028d6:	4922      	ldr	r1, [pc, #136]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e032      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4916      	ldr	r1, [pc, #88]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	490e      	ldr	r1, [pc, #56]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800292e:	f000 f821 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8002932:	4602      	mov	r2, r0
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	490a      	ldr	r1, [pc, #40]	; (8002968 <HAL_RCC_ClockConfig+0x1c8>)
 8002940:	5ccb      	ldrb	r3, [r1, r3]
 8002942:	fa22 f303 	lsr.w	r3, r2, r3
 8002946:	4a09      	ldr	r2, [pc, #36]	; (800296c <HAL_RCC_ClockConfig+0x1cc>)
 8002948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_ClockConfig+0x1d0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe f8c0 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40022000 	.word	0x40022000
 8002964:	40021000 	.word	0x40021000
 8002968:	080055a0 	.word	0x080055a0
 800296c:	20000000 	.word	0x20000000
 8002970:	20000004 	.word	0x20000004

08002974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	b490      	push	{r4, r7}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_RCC_GetSysClockFreq+0xac>)
 800297c:	1d3c      	adds	r4, r7, #4
 800297e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002984:	f240 2301 	movw	r3, #513	; 0x201
 8002988:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d002      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x40>
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x46>
 80029b2:	e02b      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029b4:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029b6:	623b      	str	r3, [r7, #32]
      break;
 80029b8:	e02b      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	0c9b      	lsrs	r3, r3, #18
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	3328      	adds	r3, #40	; 0x28
 80029c4:	443b      	add	r3, r7
 80029c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d012      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	0c5b      	lsrs	r3, r3, #17
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	3328      	adds	r3, #40	; 0x28
 80029e2:	443b      	add	r3, r7
 80029e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ee:	fb03 f202 	mul.w	r2, r3, r2
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
 80029fa:	e004      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	623b      	str	r3, [r7, #32]
      break;
 8002a0a:	e002      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a0e:	623b      	str	r3, [r7, #32]
      break;
 8002a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a12:	6a3b      	ldr	r3, [r7, #32]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3728      	adds	r7, #40	; 0x28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc90      	pop	{r4, r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	08005588 	.word	0x08005588
 8002a24:	40021000 	.word	0x40021000
 8002a28:	007a1200 	.word	0x007a1200
 8002a2c:	003d0900 	.word	0x003d0900

08002a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a34:	4b02      	ldr	r3, [pc, #8]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	20000000 	.word	0x20000000

08002a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a48:	f7ff fff2 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	0adb      	lsrs	r3, r3, #11
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	4903      	ldr	r1, [pc, #12]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5a:	5ccb      	ldrb	r3, [r1, r3]
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40021000 	.word	0x40021000
 8002a68:	080055b0 	.word	0x080055b0

08002a6c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	220f      	movs	r2, #15
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_RCC_GetClockConfig+0x58>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0203 	and.w	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <HAL_RCC_GetClockConfig+0x58>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_GetClockConfig+0x58>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_RCC_GetClockConfig+0x58>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	08db      	lsrs	r3, r3, #3
 8002aa6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0207 	and.w	r2, r3, #7
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40022000 	.word	0x40022000

08002acc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <RCC_Delay+0x34>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <RCC_Delay+0x38>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	0a5b      	lsrs	r3, r3, #9
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ae8:	bf00      	nop
  }
  while (Delay --);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1e5a      	subs	r2, r3, #1
 8002aee:	60fa      	str	r2, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f9      	bne.n	8002ae8 <RCC_Delay+0x1c>
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	20000000 	.word	0x20000000
 8002b04:	10624dd3 	.word	0x10624dd3

08002b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d07d      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b24:	2300      	movs	r3, #0
 8002b26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b28:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b34:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	4a4b      	ldr	r2, [pc, #300]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	61d3      	str	r3, [r2, #28]
 8002b40:	4b49      	ldr	r3, [pc, #292]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b50:	4b46      	ldr	r3, [pc, #280]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d118      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5c:	4b43      	ldr	r3, [pc, #268]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a42      	ldr	r2, [pc, #264]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b68:	f7fe f962 	bl	8000e30 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	e008      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7fe f95e 	bl	8000e30 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e06d      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	4b3a      	ldr	r3, [pc, #232]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b8e:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d02e      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d027      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bac:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb6:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bbc:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bc2:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d014      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7fe f92d 	bl	8000e30 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe f929 	bl	8000e30 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e036      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ee      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4917      	ldr	r1, [pc, #92]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	490b      	ldr	r1, [pc, #44]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4904      	ldr	r1, [pc, #16]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40007000 	.word	0x40007000
 8002c70:	42420440 	.word	0x42420440

08002c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e041      	b.n	8002d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fd fe60 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f000 fc20 	bl	80034f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d001      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e03a      	b.n	8002da2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_TIM_Base_Start_IT+0x98>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00e      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x58>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d56:	d009      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x58>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x58>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d111      	bne.n	8002d90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d010      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8e:	e007      	b.n	8002da0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800

08002db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e041      	b.n	8002e4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fd fdda 	bl	8000998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f000 fb7e 	bl	80034f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_TIM_PWM_Start+0x24>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	e022      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x6a>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d109      	bne.n	8002e96 <HAL_TIM_PWM_Start+0x3e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	e015      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x6a>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d109      	bne.n	8002eb0 <HAL_TIM_PWM_Start+0x58>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e008      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x6a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e05e      	b.n	8002f88 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Start+0x82>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed8:	e013      	b.n	8002f02 <HAL_TIM_PWM_Start+0xaa>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_PWM_Start+0x92>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ee8:	e00b      	b.n	8002f02 <HAL_TIM_PWM_Start+0xaa>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_PWM_Start+0xa2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef8:	e003      	b.n	8002f02 <HAL_TIM_PWM_Start+0xaa>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2201      	movs	r2, #1
 8002f08:	6839      	ldr	r1, [r7, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fd74 	bl	80039f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <HAL_TIM_PWM_Start+0x138>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d107      	bne.n	8002f2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <HAL_TIM_PWM_Start+0x138>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <HAL_TIM_PWM_Start+0xfa>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIM_PWM_Start+0xfa>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <HAL_TIM_PWM_Start+0x13c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIM_PWM_Start+0xfa>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <HAL_TIM_PWM_Start+0x140>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d111      	bne.n	8002f76 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d010      	beq.n	8002f86 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f74:	e007      	b.n	8002f86 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800

08002f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d122      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0202 	mvn.w	r2, #2
 8002fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa6f 	bl	80034c2 <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa62 	bl	80034b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fa71 	bl	80034d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d122      	bne.n	800304c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b04      	cmp	r3, #4
 8003012:	d11b      	bne.n	800304c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0204 	mvn.w	r2, #4
 800301c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fa45 	bl	80034c2 <HAL_TIM_IC_CaptureCallback>
 8003038:	e005      	b.n	8003046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fa38 	bl	80034b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fa47 	bl	80034d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b08      	cmp	r3, #8
 8003058:	d122      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b08      	cmp	r3, #8
 8003066:	d11b      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0208 	mvn.w	r2, #8
 8003070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2204      	movs	r2, #4
 8003076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fa1b 	bl	80034c2 <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fa0e 	bl	80034b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fa1d 	bl	80034d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d122      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d11b      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0210 	mvn.w	r2, #16
 80030c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2208      	movs	r2, #8
 80030ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f9f1 	bl	80034c2 <HAL_TIM_IC_CaptureCallback>
 80030e0:	e005      	b.n	80030ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f9e4 	bl	80034b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f9f3 	bl	80034d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d107      	bne.n	8003120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0201 	mvn.w	r2, #1
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd fb0c 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b80      	cmp	r3, #128	; 0x80
 800312c:	d10e      	bne.n	800314c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b80      	cmp	r3, #128	; 0x80
 800313a:	d107      	bne.n	800314c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fce1 	bl	8003b0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b40      	cmp	r3, #64	; 0x40
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f9b7 	bl	80034e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b20      	cmp	r3, #32
 8003184:	d10e      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b20      	cmp	r3, #32
 8003192:	d107      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0220 	mvn.w	r2, #32
 800319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fcac 	bl	8003afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e0ac      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x174>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	f200 809f 	bhi.w	8003314 <HAL_TIM_PWM_ConfigChannel+0x168>
 80031d6:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	08003211 	.word	0x08003211
 80031e0:	08003315 	.word	0x08003315
 80031e4:	08003315 	.word	0x08003315
 80031e8:	08003315 	.word	0x08003315
 80031ec:	08003251 	.word	0x08003251
 80031f0:	08003315 	.word	0x08003315
 80031f4:	08003315 	.word	0x08003315
 80031f8:	08003315 	.word	0x08003315
 80031fc:	08003293 	.word	0x08003293
 8003200:	08003315 	.word	0x08003315
 8003204:	08003315 	.word	0x08003315
 8003208:	08003315 	.word	0x08003315
 800320c:	080032d3 	.word	0x080032d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f9d0 	bl	80035bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0208 	orr.w	r2, r2, #8
 800322a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0204 	bic.w	r2, r2, #4
 800323a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6999      	ldr	r1, [r3, #24]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	619a      	str	r2, [r3, #24]
      break;
 800324e:	e062      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fa16 	bl	8003688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6999      	ldr	r1, [r3, #24]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	021a      	lsls	r2, r3, #8
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	619a      	str	r2, [r3, #24]
      break;
 8003290:	e041      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fa5f 	bl	800375c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0208 	orr.w	r2, r2, #8
 80032ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0204 	bic.w	r2, r2, #4
 80032bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69d9      	ldr	r1, [r3, #28]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	61da      	str	r2, [r3, #28]
      break;
 80032d0:	e021      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 faa9 	bl	8003830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69d9      	ldr	r1, [r3, #28]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	021a      	lsls	r2, r3, #8
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	61da      	str	r2, [r3, #28]
      break;
 8003312:	e000      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003314:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_TIM_ConfigClockSource+0x18>
 800333c:	2302      	movs	r3, #2
 800333e:	e0b3      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x180>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800335e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003366:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003378:	d03e      	beq.n	80033f8 <HAL_TIM_ConfigClockSource+0xd0>
 800337a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337e:	f200 8087 	bhi.w	8003490 <HAL_TIM_ConfigClockSource+0x168>
 8003382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003386:	f000 8085 	beq.w	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338e:	d87f      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x168>
 8003390:	2b70      	cmp	r3, #112	; 0x70
 8003392:	d01a      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0xa2>
 8003394:	2b70      	cmp	r3, #112	; 0x70
 8003396:	d87b      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x168>
 8003398:	2b60      	cmp	r3, #96	; 0x60
 800339a:	d050      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x116>
 800339c:	2b60      	cmp	r3, #96	; 0x60
 800339e:	d877      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x168>
 80033a0:	2b50      	cmp	r3, #80	; 0x50
 80033a2:	d03c      	beq.n	800341e <HAL_TIM_ConfigClockSource+0xf6>
 80033a4:	2b50      	cmp	r3, #80	; 0x50
 80033a6:	d873      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x168>
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d058      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x136>
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d86f      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x168>
 80033b0:	2b30      	cmp	r3, #48	; 0x30
 80033b2:	d064      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x156>
 80033b4:	2b30      	cmp	r3, #48	; 0x30
 80033b6:	d86b      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x168>
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d060      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x156>
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d867      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x168>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05c      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x156>
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d05a      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033c8:	e062      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f000 faee 	bl	80039ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	609a      	str	r2, [r3, #8]
      break;
 80033f6:	e04e      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6899      	ldr	r1, [r3, #8]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f000 fad7 	bl	80039ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800341a:	609a      	str	r2, [r3, #8]
      break;
 800341c:	e03b      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	461a      	mov	r2, r3
 800342c:	f000 fa4e 	bl	80038cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2150      	movs	r1, #80	; 0x50
 8003436:	4618      	mov	r0, r3
 8003438:	f000 faa5 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 800343c:	e02b      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	461a      	mov	r2, r3
 800344c:	f000 fa6c 	bl	8003928 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2160      	movs	r1, #96	; 0x60
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fa95 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 800345c:	e01b      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	461a      	mov	r2, r3
 800346c:	f000 fa2e 	bl	80038cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2140      	movs	r1, #64	; 0x40
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fa85 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 800347c:	e00b      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f000 fa7c 	bl	8003986 <TIM_ITRx_SetConfig>
        break;
 800348e:	e002      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003490:	bf00      	nop
 8003492:	e000      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003494:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a29      	ldr	r2, [pc, #164]	; (80035b0 <TIM_Base_SetConfig+0xb8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00b      	beq.n	8003528 <TIM_Base_SetConfig+0x30>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d007      	beq.n	8003528 <TIM_Base_SetConfig+0x30>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a26      	ldr	r2, [pc, #152]	; (80035b4 <TIM_Base_SetConfig+0xbc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_Base_SetConfig+0x30>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a25      	ldr	r2, [pc, #148]	; (80035b8 <TIM_Base_SetConfig+0xc0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d108      	bne.n	800353a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1c      	ldr	r2, [pc, #112]	; (80035b0 <TIM_Base_SetConfig+0xb8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00b      	beq.n	800355a <TIM_Base_SetConfig+0x62>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003548:	d007      	beq.n	800355a <TIM_Base_SetConfig+0x62>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a19      	ldr	r2, [pc, #100]	; (80035b4 <TIM_Base_SetConfig+0xbc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d003      	beq.n	800355a <TIM_Base_SetConfig+0x62>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <TIM_Base_SetConfig+0xc0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d108      	bne.n	800356c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a07      	ldr	r2, [pc, #28]	; (80035b0 <TIM_Base_SetConfig+0xb8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d103      	bne.n	80035a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	615a      	str	r2, [r3, #20]
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40000400 	.word	0x40000400
 80035b8:	40000800 	.word	0x40000800

080035bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f023 0302 	bic.w	r3, r3, #2
 8003604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <TIM_OC1_SetConfig+0xc8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d10c      	bne.n	8003632 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f023 0308 	bic.w	r3, r3, #8
 800361e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a13      	ldr	r2, [pc, #76]	; (8003684 <TIM_OC1_SetConfig+0xc8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d111      	bne.n	800365e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	621a      	str	r2, [r3, #32]
}
 8003678:	bf00      	nop
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40012c00 	.word	0x40012c00

08003688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f023 0210 	bic.w	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0320 	bic.w	r3, r3, #32
 80036d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <TIM_OC2_SetConfig+0xd0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d10d      	bne.n	8003704 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a14      	ldr	r2, [pc, #80]	; (8003758 <TIM_OC2_SetConfig+0xd0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d113      	bne.n	8003734 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800371a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	40012c00 	.word	0x40012c00

0800375c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0303 	bic.w	r3, r3, #3
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1d      	ldr	r2, [pc, #116]	; (800382c <TIM_OC3_SetConfig+0xd0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10d      	bne.n	80037d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a14      	ldr	r2, [pc, #80]	; (800382c <TIM_OC3_SetConfig+0xd0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d113      	bne.n	8003806 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	621a      	str	r2, [r3, #32]
}
 8003820:	bf00      	nop
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40012c00 	.word	0x40012c00

08003830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800387a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	031b      	lsls	r3, r3, #12
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <TIM_OC4_SetConfig+0x98>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d109      	bne.n	80038a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	019b      	lsls	r3, r3, #6
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr
 80038c8:	40012c00 	.word	0x40012c00

080038cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f023 0201 	bic.w	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f023 030a 	bic.w	r3, r3, #10
 8003908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f023 0210 	bic.w	r2, r3, #16
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003952:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	031b      	lsls	r3, r3, #12
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003964:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	621a      	str	r2, [r3, #32]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f043 0307 	orr.w	r3, r3, #7
 80039a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b087      	sub	sp, #28
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	021a      	lsls	r2, r3, #8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	431a      	orrs	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	609a      	str	r2, [r3, #8]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1a      	ldr	r2, [r3, #32]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1a      	ldr	r2, [r3, #32]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	bf00      	nop
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e046      	b.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a16      	ldr	r2, [pc, #88]	; (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00e      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa4:	d009      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d004      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a10      	ldr	r2, [pc, #64]	; (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800

08003afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b32:	2b84      	cmp	r3, #132	; 0x84
 8003b34:	d005      	beq.n	8003b42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3303      	adds	r3, #3
 8003b40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b42:	68fb      	ldr	r3, [r7, #12]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b52:	f000 fc99 	bl	8004488 <vTaskStartScheduler>
  
  return osOK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5e:	b089      	sub	sp, #36	; 0x24
 8003b60:	af04      	add	r7, sp, #16
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d020      	beq.n	8003bb0 <osThreadCreate+0x54>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01c      	beq.n	8003bb0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685c      	ldr	r4, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681d      	ldr	r5, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691e      	ldr	r6, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ffc9 	bl	8003b20 <makeFreeRtosPriority>
 8003b8e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b98:	9202      	str	r2, [sp, #8]
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	9100      	str	r1, [sp, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	4632      	mov	r2, r6
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f000 fab0 	bl	800410a <xTaskCreateStatic>
 8003baa:	4603      	mov	r3, r0
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	e01c      	b.n	8003bea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685c      	ldr	r4, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bbc:	b29e      	uxth	r6, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff ffab 	bl	8003b20 <makeFreeRtosPriority>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	9200      	str	r2, [sp, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4632      	mov	r2, r6
 8003bd8:	4629      	mov	r1, r5
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f000 faf1 	bl	80041c2 <xTaskCreate>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d001      	beq.n	8003bea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e000      	b.n	8003bec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003bea:	68fb      	ldr	r3, [r7, #12]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bf4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <osDelay+0x16>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	e000      	b.n	8003c0c <osDelay+0x18>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fc07 	bl	8004420 <vTaskDelay>
  
  return osOK;
 8003c12:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f103 0208 	add.w	r2, r3, #8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f04f 32ff 	mov.w	r2, #4294967295
 8003c34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f103 0208 	add.w	r2, r3, #8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f103 0208 	add.w	r2, r3, #8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d103      	bne.n	8003cd8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e00c      	b.n	8003cf2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3308      	adds	r3, #8
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e002      	b.n	8003ce6 <vListInsert+0x2e>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d2f6      	bcs.n	8003ce0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	601a      	str	r2, [r3, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6892      	ldr	r2, [r2, #8]
 8003d3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6852      	ldr	r2, [r2, #4]
 8003d48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d103      	bne.n	8003d5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	1e5a      	subs	r2, r3, #1
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
	...

08003d7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003da6:	f001 f8a9 	bl	8004efc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	68f9      	ldr	r1, [r7, #12]
 8003db4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	441a      	add	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	68f9      	ldr	r1, [r7, #12]
 8003dda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	441a      	add	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	22ff      	movs	r2, #255	; 0xff
 8003dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	22ff      	movs	r2, #255	; 0xff
 8003df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d114      	bne.n	8003e26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01a      	beq.n	8003e3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3310      	adds	r3, #16
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fd5f 	bl	80048cc <xTaskRemoveFromEventList>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d012      	beq.n	8003e3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <xQueueGenericReset+0xcc>)
 8003e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	e009      	b.n	8003e3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3310      	adds	r3, #16
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fef6 	bl	8003c1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3324      	adds	r3, #36	; 0x24
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fef1 	bl	8003c1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e3a:	f001 f88f 	bl	8004f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e3e:	2301      	movs	r3, #1
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	e000ed04 	.word	0xe000ed04

08003e4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	4613      	mov	r3, r2
 8003e58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	613b      	str	r3, [r7, #16]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e004      	b.n	8003e8c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3348      	adds	r3, #72	; 0x48
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 f933 	bl	80050fc <pvPortMalloc>
 8003e96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00f      	beq.n	8003ebe <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	3348      	adds	r3, #72	; 0x48
 8003ea2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003eac:	79fa      	ldrb	r2, [r7, #7]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f805 	bl	8003ec8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
	}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d103      	bne.n	8003ee4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e002      	b.n	8003eea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	69b8      	ldr	r0, [r7, #24]
 8003efa:	f7ff ff3f 	bl	8003d7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b08e      	sub	sp, #56	; 0x38
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f30:	bf00      	nop
 8003f32:	e7fe      	b.n	8003f32 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d103      	bne.n	8003f42 <xQueueGenericSendFromISR+0x3c>
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <xQueueGenericSendFromISR+0x40>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <xQueueGenericSendFromISR+0x42>
 8003f46:	2300      	movs	r3, #0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	623b      	str	r3, [r7, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d103      	bne.n	8003f70 <xQueueGenericSendFromISR+0x6a>
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <xQueueGenericSendFromISR+0x6e>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <xQueueGenericSendFromISR+0x70>
 8003f74:	2300      	movs	r3, #0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	61fb      	str	r3, [r7, #28]
}
 8003f8c:	bf00      	nop
 8003f8e:	e7fe      	b.n	8003f8e <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f90:	f001 f876 	bl	8005080 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f94:	f3ef 8211 	mrs	r2, BASEPRI
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	61ba      	str	r2, [r7, #24]
 8003faa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003fac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d302      	bcc.n	8003fc2 <xQueueGenericSendFromISR+0xbc>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d12c      	bne.n	800401c <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fd2:	f000 f830 	bl	8004036 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d112      	bne.n	8004006 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d016      	beq.n	8004016 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	3324      	adds	r3, #36	; 0x24
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fc6d 	bl	80048cc <xTaskRemoveFromEventList>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00e      	beq.n	8004016 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00b      	beq.n	8004016 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e007      	b.n	8004016 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800400a:	3301      	adds	r3, #1
 800400c:	b2db      	uxtb	r3, r3
 800400e:	b25a      	sxtb	r2, r3
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004016:	2301      	movs	r3, #1
 8004018:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800401a:	e001      	b.n	8004020 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800401c:	2300      	movs	r3, #0
 800401e:	637b      	str	r3, [r7, #52]	; 0x34
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800402a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800402e:	4618      	mov	r0, r3
 8004030:	3738      	adds	r7, #56	; 0x38
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10d      	bne.n	8004070 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d14d      	bne.n	80040f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fd6f 	bl	8004b44 <xTaskPriorityDisinherit>
 8004066:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	e043      	b.n	80040f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d119      	bne.n	80040aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6898      	ldr	r0, [r3, #8]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	461a      	mov	r2, r3
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	f001 fa37 	bl	80054f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	441a      	add	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	429a      	cmp	r2, r3
 800409e:	d32b      	bcc.n	80040f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	e026      	b.n	80040f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68d8      	ldr	r0, [r3, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	461a      	mov	r2, r3
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	f001 fa1d 	bl	80054f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	425b      	negs	r3, r3
 80040c4:	441a      	add	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d207      	bcs.n	80040e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	425b      	negs	r3, r3
 80040e0:	441a      	add	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d105      	bne.n	80040f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004100:	697b      	ldr	r3, [r7, #20]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800410a:	b580      	push	{r7, lr}
 800410c:	b08e      	sub	sp, #56	; 0x38
 800410e:	af04      	add	r7, sp, #16
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <xTaskCreateStatic+0x2a>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	623b      	str	r3, [r7, #32]
}
 8004130:	bf00      	nop
 8004132:	e7fe      	b.n	8004132 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10a      	bne.n	8004150 <xTaskCreateStatic+0x46>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	61fb      	str	r3, [r7, #28]
}
 800414c:	bf00      	nop
 800414e:	e7fe      	b.n	800414e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004150:	2354      	movs	r3, #84	; 0x54
 8004152:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b54      	cmp	r3, #84	; 0x54
 8004158:	d00a      	beq.n	8004170 <xTaskCreateStatic+0x66>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	61bb      	str	r3, [r7, #24]
}
 800416c:	bf00      	nop
 800416e:	e7fe      	b.n	800416e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01e      	beq.n	80041b4 <xTaskCreateStatic+0xaa>
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01b      	beq.n	80041b4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004184:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	2202      	movs	r2, #2
 800418a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800418e:	2300      	movs	r3, #0
 8004190:	9303      	str	r3, [sp, #12]
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	9302      	str	r3, [sp, #8]
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f850 	bl	800424c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ae:	f000 f8cd 	bl	800434c <prvAddNewTaskToReadyList>
 80041b2:	e001      	b.n	80041b8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041b8:	697b      	ldr	r3, [r7, #20]
	}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3728      	adds	r7, #40	; 0x28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b08c      	sub	sp, #48	; 0x30
 80041c6:	af04      	add	r7, sp, #16
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 ff90 	bl	80050fc <pvPortMalloc>
 80041dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80041e4:	2054      	movs	r0, #84	; 0x54
 80041e6:	f000 ff89 	bl	80050fc <pvPortMalloc>
 80041ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
 80041f8:	e005      	b.n	8004206 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f001 f842 	bl	8005284 <vPortFree>
 8004200:	e001      	b.n	8004206 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d017      	beq.n	800423c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004214:	88fa      	ldrh	r2, [r7, #6]
 8004216:	2300      	movs	r3, #0
 8004218:	9303      	str	r3, [sp, #12]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	9302      	str	r3, [sp, #8]
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f80e 	bl	800424c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004230:	69f8      	ldr	r0, [r7, #28]
 8004232:	f000 f88b 	bl	800434c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004236:	2301      	movs	r3, #1
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e002      	b.n	8004242 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
 8004240:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004242:	69bb      	ldr	r3, [r7, #24]
	}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004264:	3b01      	subs	r3, #1
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f023 0307 	bic.w	r3, r3, #7
 8004272:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <prvInitialiseNewTask+0x48>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	617b      	str	r3, [r7, #20]
}
 8004290:	bf00      	nop
 8004292:	e7fe      	b.n	8004292 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	e012      	b.n	80042c0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	7819      	ldrb	r1, [r3, #0]
 80042a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	4413      	add	r3, r2
 80042a8:	3334      	adds	r3, #52	; 0x34
 80042aa:	460a      	mov	r2, r1
 80042ac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d006      	beq.n	80042c8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3301      	adds	r3, #1
 80042be:	61fb      	str	r3, [r7, #28]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b0f      	cmp	r3, #15
 80042c4:	d9e9      	bls.n	800429a <prvInitialiseNewTask+0x4e>
 80042c6:	e000      	b.n	80042ca <prvInitialiseNewTask+0x7e>
		{
			break;
 80042c8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	2b06      	cmp	r3, #6
 80042d6:	d901      	bls.n	80042dc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042d8:	2306      	movs	r3, #6
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	2200      	movs	r2, #0
 80042ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	3304      	adds	r3, #4
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fcb1 	bl	8003c5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	3318      	adds	r3, #24
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fcac 	bl	8003c5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004306:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	f1c3 0207 	rsb	r2, r3, #7
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004316:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	2200      	movs	r2, #0
 800431c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	68f9      	ldr	r1, [r7, #12]
 800432a:	69b8      	ldr	r0, [r7, #24]
 800432c:	f000 fcf6 	bl	8004d1c <pxPortInitialiseStack>
 8004330:	4602      	mov	r2, r0
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004342:	bf00      	nop
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004354:	f000 fdd2 	bl	8004efc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004358:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <prvAddNewTaskToReadyList+0xb8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3301      	adds	r3, #1
 800435e:	4a29      	ldr	r2, [pc, #164]	; (8004404 <prvAddNewTaskToReadyList+0xb8>)
 8004360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004362:	4b29      	ldr	r3, [pc, #164]	; (8004408 <prvAddNewTaskToReadyList+0xbc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800436a:	4a27      	ldr	r2, [pc, #156]	; (8004408 <prvAddNewTaskToReadyList+0xbc>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004370:	4b24      	ldr	r3, [pc, #144]	; (8004404 <prvAddNewTaskToReadyList+0xb8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d110      	bne.n	800439a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004378:	f000 fb22 	bl	80049c0 <prvInitialiseTaskLists>
 800437c:	e00d      	b.n	800439a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800437e:	4b23      	ldr	r3, [pc, #140]	; (800440c <prvAddNewTaskToReadyList+0xc0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004386:	4b20      	ldr	r3, [pc, #128]	; (8004408 <prvAddNewTaskToReadyList+0xbc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	429a      	cmp	r2, r3
 8004392:	d802      	bhi.n	800439a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004394:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <prvAddNewTaskToReadyList+0xbc>)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <prvAddNewTaskToReadyList+0xc4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3301      	adds	r3, #1
 80043a0:	4a1b      	ldr	r2, [pc, #108]	; (8004410 <prvAddNewTaskToReadyList+0xc4>)
 80043a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	2201      	movs	r2, #1
 80043aa:	409a      	lsls	r2, r3
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <prvAddNewTaskToReadyList+0xc8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	4a18      	ldr	r2, [pc, #96]	; (8004414 <prvAddNewTaskToReadyList+0xc8>)
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4a15      	ldr	r2, [pc, #84]	; (8004418 <prvAddNewTaskToReadyList+0xcc>)
 80043c4:	441a      	add	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f7ff fc50 	bl	8003c72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043d2:	f000 fdc3 	bl	8004f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <prvAddNewTaskToReadyList+0xc0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00e      	beq.n	80043fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043de:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <prvAddNewTaskToReadyList+0xbc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d207      	bcs.n	80043fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <prvAddNewTaskToReadyList+0xd0>)
 80043ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000514 	.word	0x20000514
 8004408:	20000414 	.word	0x20000414
 800440c:	20000520 	.word	0x20000520
 8004410:	20000530 	.word	0x20000530
 8004414:	2000051c 	.word	0x2000051c
 8004418:	20000418 	.word	0x20000418
 800441c:	e000ed04 	.word	0xe000ed04

08004420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d017      	beq.n	8004462 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004432:	4b13      	ldr	r3, [pc, #76]	; (8004480 <vTaskDelay+0x60>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <vTaskDelay+0x30>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	60bb      	str	r3, [r7, #8]
}
 800444c:	bf00      	nop
 800444e:	e7fe      	b.n	800444e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004450:	f000 f87a 	bl	8004548 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004454:	2100      	movs	r1, #0
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fbfa 	bl	8004c50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800445c:	f000 f882 	bl	8004564 <xTaskResumeAll>
 8004460:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d107      	bne.n	8004478 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <vTaskDelay+0x64>)
 800446a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	2000053c 	.word	0x2000053c
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004496:	463a      	mov	r2, r7
 8004498:	1d39      	adds	r1, r7, #4
 800449a:	f107 0308 	add.w	r3, r7, #8
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fb fff2 	bl	8000488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044a4:	6839      	ldr	r1, [r7, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	9202      	str	r2, [sp, #8]
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	2300      	movs	r3, #0
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	2300      	movs	r3, #0
 80044b4:	460a      	mov	r2, r1
 80044b6:	491e      	ldr	r1, [pc, #120]	; (8004530 <vTaskStartScheduler+0xa8>)
 80044b8:	481e      	ldr	r0, [pc, #120]	; (8004534 <vTaskStartScheduler+0xac>)
 80044ba:	f7ff fe26 	bl	800410a <xTaskCreateStatic>
 80044be:	4603      	mov	r3, r0
 80044c0:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <vTaskStartScheduler+0xb0>)
 80044c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044c4:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <vTaskStartScheduler+0xb0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044cc:	2301      	movs	r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	e001      	b.n	80044d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d116      	bne.n	800450a <vTaskStartScheduler+0x82>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	613b      	str	r3, [r7, #16]
}
 80044ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044f0:	4b12      	ldr	r3, [pc, #72]	; (800453c <vTaskStartScheduler+0xb4>)
 80044f2:	f04f 32ff 	mov.w	r2, #4294967295
 80044f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <vTaskStartScheduler+0xb8>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80044fe:	4b11      	ldr	r3, [pc, #68]	; (8004544 <vTaskStartScheduler+0xbc>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004504:	f000 fc88 	bl	8004e18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004508:	e00e      	b.n	8004528 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d10a      	bne.n	8004528 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	60fb      	str	r3, [r7, #12]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <vTaskStartScheduler+0x9e>
}
 8004528:	bf00      	nop
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	08005598 	.word	0x08005598
 8004534:	08004991 	.word	0x08004991
 8004538:	20000538 	.word	0x20000538
 800453c:	20000534 	.word	0x20000534
 8004540:	20000520 	.word	0x20000520
 8004544:	20000518 	.word	0x20000518

08004548 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800454c:	4b04      	ldr	r3, [pc, #16]	; (8004560 <vTaskSuspendAll+0x18>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	4a03      	ldr	r2, [pc, #12]	; (8004560 <vTaskSuspendAll+0x18>)
 8004554:	6013      	str	r3, [r2, #0]
}
 8004556:	bf00      	nop
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	2000053c 	.word	0x2000053c

08004564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800456e:	2300      	movs	r3, #0
 8004570:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004572:	4b41      	ldr	r3, [pc, #260]	; (8004678 <xTaskResumeAll+0x114>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10a      	bne.n	8004590 <xTaskResumeAll+0x2c>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	603b      	str	r3, [r7, #0]
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004590:	f000 fcb4 	bl	8004efc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004594:	4b38      	ldr	r3, [pc, #224]	; (8004678 <xTaskResumeAll+0x114>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3b01      	subs	r3, #1
 800459a:	4a37      	ldr	r2, [pc, #220]	; (8004678 <xTaskResumeAll+0x114>)
 800459c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800459e:	4b36      	ldr	r3, [pc, #216]	; (8004678 <xTaskResumeAll+0x114>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d161      	bne.n	800466a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045a6:	4b35      	ldr	r3, [pc, #212]	; (800467c <xTaskResumeAll+0x118>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d05d      	beq.n	800466a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ae:	e02e      	b.n	800460e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80045b0:	4b33      	ldr	r3, [pc, #204]	; (8004680 <xTaskResumeAll+0x11c>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3318      	adds	r3, #24
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fbb3 	bl	8003d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fbae 	bl	8003d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	2201      	movs	r2, #1
 80045d2:	409a      	lsls	r2, r3
 80045d4:	4b2b      	ldr	r3, [pc, #172]	; (8004684 <xTaskResumeAll+0x120>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4313      	orrs	r3, r2
 80045da:	4a2a      	ldr	r2, [pc, #168]	; (8004684 <xTaskResumeAll+0x120>)
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4a27      	ldr	r2, [pc, #156]	; (8004688 <xTaskResumeAll+0x124>)
 80045ec:	441a      	add	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f7ff fb3c 	bl	8003c72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	4b23      	ldr	r3, [pc, #140]	; (800468c <xTaskResumeAll+0x128>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	429a      	cmp	r2, r3
 8004606:	d302      	bcc.n	800460e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004608:	4b21      	ldr	r3, [pc, #132]	; (8004690 <xTaskResumeAll+0x12c>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800460e:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <xTaskResumeAll+0x11c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1cc      	bne.n	80045b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800461c:	f000 fa6e 	bl	8004afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004620:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <xTaskResumeAll+0x130>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d010      	beq.n	800464e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800462c:	f000 f836 	bl	800469c <xTaskIncrementTick>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004636:	4b16      	ldr	r3, [pc, #88]	; (8004690 <xTaskResumeAll+0x12c>)
 8004638:	2201      	movs	r2, #1
 800463a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f1      	bne.n	800462c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004648:	4b12      	ldr	r3, [pc, #72]	; (8004694 <xTaskResumeAll+0x130>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800464e:	4b10      	ldr	r3, [pc, #64]	; (8004690 <xTaskResumeAll+0x12c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004656:	2301      	movs	r3, #1
 8004658:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800465a:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <xTaskResumeAll+0x134>)
 800465c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800466a:	f000 fc77 	bl	8004f5c <vPortExitCritical>

	return xAlreadyYielded;
 800466e:	68bb      	ldr	r3, [r7, #8]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	2000053c 	.word	0x2000053c
 800467c:	20000514 	.word	0x20000514
 8004680:	200004d4 	.word	0x200004d4
 8004684:	2000051c 	.word	0x2000051c
 8004688:	20000418 	.word	0x20000418
 800468c:	20000414 	.word	0x20000414
 8004690:	20000528 	.word	0x20000528
 8004694:	20000524 	.word	0x20000524
 8004698:	e000ed04 	.word	0xe000ed04

0800469c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046a6:	4b51      	ldr	r3, [pc, #324]	; (80047ec <xTaskIncrementTick+0x150>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f040 808d 	bne.w	80047ca <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046b0:	4b4f      	ldr	r3, [pc, #316]	; (80047f0 <xTaskIncrementTick+0x154>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3301      	adds	r3, #1
 80046b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046b8:	4a4d      	ldr	r2, [pc, #308]	; (80047f0 <xTaskIncrementTick+0x154>)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d120      	bne.n	8004706 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046c4:	4b4b      	ldr	r3, [pc, #300]	; (80047f4 <xTaskIncrementTick+0x158>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	603b      	str	r3, [r7, #0]
}
 80046e0:	bf00      	nop
 80046e2:	e7fe      	b.n	80046e2 <xTaskIncrementTick+0x46>
 80046e4:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <xTaskIncrementTick+0x158>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	4b43      	ldr	r3, [pc, #268]	; (80047f8 <xTaskIncrementTick+0x15c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a41      	ldr	r2, [pc, #260]	; (80047f4 <xTaskIncrementTick+0x158>)
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	4a41      	ldr	r2, [pc, #260]	; (80047f8 <xTaskIncrementTick+0x15c>)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	4b40      	ldr	r3, [pc, #256]	; (80047fc <xTaskIncrementTick+0x160>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	4a3f      	ldr	r2, [pc, #252]	; (80047fc <xTaskIncrementTick+0x160>)
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	f000 f9fb 	bl	8004afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004706:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <xTaskIncrementTick+0x164>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	429a      	cmp	r2, r3
 800470e:	d34d      	bcc.n	80047ac <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004710:	4b38      	ldr	r3, [pc, #224]	; (80047f4 <xTaskIncrementTick+0x158>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <xTaskIncrementTick+0x82>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <xTaskIncrementTick+0x84>
 800471e:	2300      	movs	r3, #0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004724:	4b36      	ldr	r3, [pc, #216]	; (8004800 <xTaskIncrementTick+0x164>)
 8004726:	f04f 32ff 	mov.w	r2, #4294967295
 800472a:	601a      	str	r2, [r3, #0]
					break;
 800472c:	e03e      	b.n	80047ac <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800472e:	4b31      	ldr	r3, [pc, #196]	; (80047f4 <xTaskIncrementTick+0x158>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d203      	bcs.n	800474e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004746:	4a2e      	ldr	r2, [pc, #184]	; (8004800 <xTaskIncrementTick+0x164>)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6013      	str	r3, [r2, #0]
						break;
 800474c:	e02e      	b.n	80047ac <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	3304      	adds	r3, #4
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fae8 	bl	8003d28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	3318      	adds	r3, #24
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fadf 	bl	8003d28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	2201      	movs	r2, #1
 8004770:	409a      	lsls	r2, r3
 8004772:	4b24      	ldr	r3, [pc, #144]	; (8004804 <xTaskIncrementTick+0x168>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4313      	orrs	r3, r2
 8004778:	4a22      	ldr	r2, [pc, #136]	; (8004804 <xTaskIncrementTick+0x168>)
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4a1f      	ldr	r2, [pc, #124]	; (8004808 <xTaskIncrementTick+0x16c>)
 800478a:	441a      	add	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	3304      	adds	r3, #4
 8004790:	4619      	mov	r1, r3
 8004792:	4610      	mov	r0, r2
 8004794:	f7ff fa6d 	bl	8003c72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <xTaskIncrementTick+0x170>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d3b4      	bcc.n	8004710 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047a6:	2301      	movs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047aa:	e7b1      	b.n	8004710 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047ac:	4b17      	ldr	r3, [pc, #92]	; (800480c <xTaskIncrementTick+0x170>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b2:	4915      	ldr	r1, [pc, #84]	; (8004808 <xTaskIncrementTick+0x16c>)
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d907      	bls.n	80047d4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80047c4:	2301      	movs	r3, #1
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e004      	b.n	80047d4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80047ca:	4b11      	ldr	r3, [pc, #68]	; (8004810 <xTaskIncrementTick+0x174>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3301      	adds	r3, #1
 80047d0:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <xTaskIncrementTick+0x174>)
 80047d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <xTaskIncrementTick+0x178>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80047dc:	2301      	movs	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80047e0:	697b      	ldr	r3, [r7, #20]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	2000053c 	.word	0x2000053c
 80047f0:	20000518 	.word	0x20000518
 80047f4:	200004cc 	.word	0x200004cc
 80047f8:	200004d0 	.word	0x200004d0
 80047fc:	2000052c 	.word	0x2000052c
 8004800:	20000534 	.word	0x20000534
 8004804:	2000051c 	.word	0x2000051c
 8004808:	20000418 	.word	0x20000418
 800480c:	20000414 	.word	0x20000414
 8004810:	20000524 	.word	0x20000524
 8004814:	20000528 	.word	0x20000528

08004818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800481e:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <vTaskSwitchContext+0xa0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004826:	4b25      	ldr	r3, [pc, #148]	; (80048bc <vTaskSwitchContext+0xa4>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800482c:	e03f      	b.n	80048ae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800482e:	4b23      	ldr	r3, [pc, #140]	; (80048bc <vTaskSwitchContext+0xa4>)
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004834:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <vTaskSwitchContext+0xa8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	fab3 f383 	clz	r3, r3
 8004840:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004842:	7afb      	ldrb	r3, [r7, #11]
 8004844:	f1c3 031f 	rsb	r3, r3, #31
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	491e      	ldr	r1, [pc, #120]	; (80048c4 <vTaskSwitchContext+0xac>)
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <vTaskSwitchContext+0x5c>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	607b      	str	r3, [r7, #4]
}
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <vTaskSwitchContext+0x5a>
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4a11      	ldr	r2, [pc, #68]	; (80048c4 <vTaskSwitchContext+0xac>)
 8004880:	4413      	add	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	3308      	adds	r3, #8
 8004896:	429a      	cmp	r2, r3
 8004898:	d104      	bne.n	80048a4 <vTaskSwitchContext+0x8c>
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	605a      	str	r2, [r3, #4]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	4a07      	ldr	r2, [pc, #28]	; (80048c8 <vTaskSwitchContext+0xb0>)
 80048ac:	6013      	str	r3, [r2, #0]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr
 80048b8:	2000053c 	.word	0x2000053c
 80048bc:	20000528 	.word	0x20000528
 80048c0:	2000051c 	.word	0x2000051c
 80048c4:	20000418 	.word	0x20000418
 80048c8:	20000414 	.word	0x20000414

080048cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	60fb      	str	r3, [r7, #12]
}
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	3318      	adds	r3, #24
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff fa13 	bl	8003d28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004902:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <xTaskRemoveFromEventList+0xac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d11c      	bne.n	8004944 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	3304      	adds	r3, #4
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fa0a 	bl	8003d28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	2201      	movs	r2, #1
 800491a:	409a      	lsls	r2, r3
 800491c:	4b17      	ldr	r3, [pc, #92]	; (800497c <xTaskRemoveFromEventList+0xb0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4313      	orrs	r3, r2
 8004922:	4a16      	ldr	r2, [pc, #88]	; (800497c <xTaskRemoveFromEventList+0xb0>)
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4a13      	ldr	r2, [pc, #76]	; (8004980 <xTaskRemoveFromEventList+0xb4>)
 8004934:	441a      	add	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	3304      	adds	r3, #4
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f7ff f998 	bl	8003c72 <vListInsertEnd>
 8004942:	e005      	b.n	8004950 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	3318      	adds	r3, #24
 8004948:	4619      	mov	r1, r3
 800494a:	480e      	ldr	r0, [pc, #56]	; (8004984 <xTaskRemoveFromEventList+0xb8>)
 800494c:	f7ff f991 	bl	8003c72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004954:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <xTaskRemoveFromEventList+0xbc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	429a      	cmp	r2, r3
 800495c:	d905      	bls.n	800496a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800495e:	2301      	movs	r3, #1
 8004960:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004962:	4b0a      	ldr	r3, [pc, #40]	; (800498c <xTaskRemoveFromEventList+0xc0>)
 8004964:	2201      	movs	r2, #1
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e001      	b.n	800496e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800496e:	697b      	ldr	r3, [r7, #20]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	2000053c 	.word	0x2000053c
 800497c:	2000051c 	.word	0x2000051c
 8004980:	20000418 	.word	0x20000418
 8004984:	200004d4 	.word	0x200004d4
 8004988:	20000414 	.word	0x20000414
 800498c:	20000528 	.word	0x20000528

08004990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004998:	f000 f852 	bl	8004a40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <prvIdleTask+0x28>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d9f9      	bls.n	8004998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <prvIdleTask+0x2c>)
 80049a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049b4:	e7f0      	b.n	8004998 <prvIdleTask+0x8>
 80049b6:	bf00      	nop
 80049b8:	20000418 	.word	0x20000418
 80049bc:	e000ed04 	.word	0xe000ed04

080049c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	e00c      	b.n	80049e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4a12      	ldr	r2, [pc, #72]	; (8004a20 <prvInitialiseTaskLists+0x60>)
 80049d8:	4413      	add	r3, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff f91e 	bl	8003c1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3301      	adds	r3, #1
 80049e4:	607b      	str	r3, [r7, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b06      	cmp	r3, #6
 80049ea:	d9ef      	bls.n	80049cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049ec:	480d      	ldr	r0, [pc, #52]	; (8004a24 <prvInitialiseTaskLists+0x64>)
 80049ee:	f7ff f915 	bl	8003c1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049f2:	480d      	ldr	r0, [pc, #52]	; (8004a28 <prvInitialiseTaskLists+0x68>)
 80049f4:	f7ff f912 	bl	8003c1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049f8:	480c      	ldr	r0, [pc, #48]	; (8004a2c <prvInitialiseTaskLists+0x6c>)
 80049fa:	f7ff f90f 	bl	8003c1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049fe:	480c      	ldr	r0, [pc, #48]	; (8004a30 <prvInitialiseTaskLists+0x70>)
 8004a00:	f7ff f90c 	bl	8003c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a04:	480b      	ldr	r0, [pc, #44]	; (8004a34 <prvInitialiseTaskLists+0x74>)
 8004a06:	f7ff f909 	bl	8003c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <prvInitialiseTaskLists+0x78>)
 8004a0c:	4a05      	ldr	r2, [pc, #20]	; (8004a24 <prvInitialiseTaskLists+0x64>)
 8004a0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <prvInitialiseTaskLists+0x7c>)
 8004a12:	4a05      	ldr	r2, [pc, #20]	; (8004a28 <prvInitialiseTaskLists+0x68>)
 8004a14:	601a      	str	r2, [r3, #0]
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000418 	.word	0x20000418
 8004a24:	200004a4 	.word	0x200004a4
 8004a28:	200004b8 	.word	0x200004b8
 8004a2c:	200004d4 	.word	0x200004d4
 8004a30:	200004e8 	.word	0x200004e8
 8004a34:	20000500 	.word	0x20000500
 8004a38:	200004cc 	.word	0x200004cc
 8004a3c:	200004d0 	.word	0x200004d0

08004a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a46:	e019      	b.n	8004a7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a48:	f000 fa58 	bl	8004efc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004a4c:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <prvCheckTasksWaitingTermination+0x50>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff f965 	bl	8003d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <prvCheckTasksWaitingTermination+0x54>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	4a0b      	ldr	r2, [pc, #44]	; (8004a94 <prvCheckTasksWaitingTermination+0x54>)
 8004a66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <prvCheckTasksWaitingTermination+0x58>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <prvCheckTasksWaitingTermination+0x58>)
 8004a70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a72:	f000 fa73 	bl	8004f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f810 	bl	8004a9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <prvCheckTasksWaitingTermination+0x58>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e1      	bne.n	8004a48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	200004e8 	.word	0x200004e8
 8004a94:	20000514 	.word	0x20000514
 8004a98:	200004fc 	.word	0x200004fc

08004a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d108      	bne.n	8004ac0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fbe6 	bl	8005284 <vPortFree>
				vPortFree( pxTCB );
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fbe3 	bl	8005284 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004abe:	e018      	b.n	8004af2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d103      	bne.n	8004ad2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fbda 	bl	8005284 <vPortFree>
	}
 8004ad0:	e00f      	b.n	8004af2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d00a      	beq.n	8004af2 <prvDeleteTCB+0x56>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	60fb      	str	r3, [r7, #12]
}
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <prvDeleteTCB+0x54>
	}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b02:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <prvResetNextTaskUnblockTime+0x40>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <prvResetNextTaskUnblockTime+0x14>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <prvResetNextTaskUnblockTime+0x16>
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d004      	beq.n	8004b20 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b16:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <prvResetNextTaskUnblockTime+0x44>)
 8004b18:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b1e:	e008      	b.n	8004b32 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <prvResetNextTaskUnblockTime+0x40>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <prvResetNextTaskUnblockTime+0x44>)
 8004b30:	6013      	str	r3, [r2, #0]
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr
 8004b3c:	200004cc 	.word	0x200004cc
 8004b40:	20000534 	.word	0x20000534

08004b44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d06e      	beq.n	8004c38 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b5a:	4b3a      	ldr	r3, [pc, #232]	; (8004c44 <xTaskPriorityDisinherit+0x100>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d00a      	beq.n	8004b7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	60fb      	str	r3, [r7, #12]
}
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	60bb      	str	r3, [r7, #8]
}
 8004b94:	bf00      	nop
 8004b96:	e7fe      	b.n	8004b96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9c:	1e5a      	subs	r2, r3, #1
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d044      	beq.n	8004c38 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d140      	bne.n	8004c38 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff f8b4 	bl	8003d28 <uxListRemove>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d115      	bne.n	8004bf2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	491f      	ldr	r1, [pc, #124]	; (8004c48 <xTaskPriorityDisinherit+0x104>)
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <xTaskPriorityDisinherit+0xae>
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	2201      	movs	r2, #1
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43da      	mvns	r2, r3
 8004be8:	4b18      	ldr	r3, [pc, #96]	; (8004c4c <xTaskPriorityDisinherit+0x108>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4013      	ands	r3, r2
 8004bee:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <xTaskPriorityDisinherit+0x108>)
 8004bf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	f1c3 0207 	rsb	r2, r3, #7
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	409a      	lsls	r2, r3
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <xTaskPriorityDisinherit+0x108>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	4a0d      	ldr	r2, [pc, #52]	; (8004c4c <xTaskPriorityDisinherit+0x108>)
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <xTaskPriorityDisinherit+0x104>)
 8004c26:	441a      	add	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f7ff f81f 	bl	8003c72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c38:	697b      	ldr	r3, [r7, #20]
	}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000414 	.word	0x20000414
 8004c48:	20000418 	.word	0x20000418
 8004c4c:	2000051c 	.word	0x2000051c

08004c50 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c5a:	4b29      	ldr	r3, [pc, #164]	; (8004d00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c60:	4b28      	ldr	r3, [pc, #160]	; (8004d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff f85e 	bl	8003d28 <uxListRemove>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10b      	bne.n	8004c8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004c72:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	2201      	movs	r2, #1
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43da      	mvns	r2, r3
 8004c80:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4013      	ands	r3, r2
 8004c86:	4a20      	ldr	r2, [pc, #128]	; (8004d08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d10a      	bne.n	8004ca8 <prvAddCurrentTaskToDelayedList+0x58>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c98:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	481a      	ldr	r0, [pc, #104]	; (8004d0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ca2:	f7fe ffe6 	bl	8003c72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ca6:	e026      	b.n	8004cf6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4413      	add	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cb0:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d209      	bcs.n	8004cd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc0:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f7fe fff3 	bl	8003cb8 <vListInsert>
}
 8004cd2:	e010      	b.n	8004cf6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cd4:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fe ffe9 	bl	8003cb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d202      	bcs.n	8004cf6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004cf0:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	6013      	str	r3, [r2, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000518 	.word	0x20000518
 8004d04:	20000414 	.word	0x20000414
 8004d08:	2000051c 	.word	0x2000051c
 8004d0c:	20000500 	.word	0x20000500
 8004d10:	200004d0 	.word	0x200004d0
 8004d14:	200004cc 	.word	0x200004cc
 8004d18:	20000534 	.word	0x20000534

08004d1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3b04      	subs	r3, #4
 8004d2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3b04      	subs	r3, #4
 8004d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f023 0201 	bic.w	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3b04      	subs	r3, #4
 8004d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d4c:	4a08      	ldr	r2, [pc, #32]	; (8004d70 <pxPortInitialiseStack+0x54>)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3b14      	subs	r3, #20
 8004d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3b20      	subs	r3, #32
 8004d62:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d64:	68fb      	ldr	r3, [r7, #12]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr
 8004d70:	08004d75 	.word	0x08004d75

08004d74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <prvTaskExitError+0x54>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	d00a      	beq.n	8004d9e <prvTaskExitError+0x2a>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	60fb      	str	r3, [r7, #12]
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <prvTaskExitError+0x28>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	60bb      	str	r3, [r7, #8]
}
 8004db0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004db2:	bf00      	nop
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0fc      	beq.n	8004db4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	2000000c 	.word	0x2000000c
 8004dcc:	00000000 	.word	0x00000000

08004dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <pxCurrentTCBConst2>)
 8004dd2:	6819      	ldr	r1, [r3, #0]
 8004dd4:	6808      	ldr	r0, [r1, #0]
 8004dd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dda:	f380 8809 	msr	PSP, r0
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8811 	msr	BASEPRI, r0
 8004dea:	f04e 0e0d 	orr.w	lr, lr, #13
 8004dee:	4770      	bx	lr

08004df0 <pxCurrentTCBConst2>:
 8004df0:	20000414 	.word	0x20000414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop

08004df8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004df8:	4806      	ldr	r0, [pc, #24]	; (8004e14 <prvPortStartFirstTask+0x1c>)
 8004dfa:	6800      	ldr	r0, [r0, #0]
 8004dfc:	6800      	ldr	r0, [r0, #0]
 8004dfe:	f380 8808 	msr	MSP, r0
 8004e02:	b662      	cpsie	i
 8004e04:	b661      	cpsie	f
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	df00      	svc	0
 8004e10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e12:	bf00      	nop
 8004e14:	e000ed08 	.word	0xe000ed08

08004e18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e1e:	4b32      	ldr	r3, [pc, #200]	; (8004ee8 <xPortStartScheduler+0xd0>)
 8004e20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	22ff      	movs	r2, #255	; 0xff
 8004e2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	4b2a      	ldr	r3, [pc, #168]	; (8004eec <xPortStartScheduler+0xd4>)
 8004e44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e46:	4b2a      	ldr	r3, [pc, #168]	; (8004ef0 <xPortStartScheduler+0xd8>)
 8004e48:	2207      	movs	r2, #7
 8004e4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e4c:	e009      	b.n	8004e62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004e4e:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <xPortStartScheduler+0xd8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	4a26      	ldr	r2, [pc, #152]	; (8004ef0 <xPortStartScheduler+0xd8>)
 8004e56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d0ef      	beq.n	8004e4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e6e:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <xPortStartScheduler+0xd8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f1c3 0307 	rsb	r3, r3, #7
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d00a      	beq.n	8004e90 <xPortStartScheduler+0x78>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	60bb      	str	r3, [r7, #8]
}
 8004e8c:	bf00      	nop
 8004e8e:	e7fe      	b.n	8004e8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e90:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <xPortStartScheduler+0xd8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	021b      	lsls	r3, r3, #8
 8004e96:	4a16      	ldr	r2, [pc, #88]	; (8004ef0 <xPortStartScheduler+0xd8>)
 8004e98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e9a:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <xPortStartScheduler+0xd8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ea2:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <xPortStartScheduler+0xd8>)
 8004ea4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004eae:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <xPortStartScheduler+0xdc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a10      	ldr	r2, [pc, #64]	; (8004ef4 <xPortStartScheduler+0xdc>)
 8004eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004eb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004eba:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <xPortStartScheduler+0xdc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a0d      	ldr	r2, [pc, #52]	; (8004ef4 <xPortStartScheduler+0xdc>)
 8004ec0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ec4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ec6:	f000 f8b9 	bl	800503c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <xPortStartScheduler+0xe0>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ed0:	f7ff ff92 	bl	8004df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ed4:	f7ff fca0 	bl	8004818 <vTaskSwitchContext>
	prvTaskExitError();
 8004ed8:	f7ff ff4c 	bl	8004d74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	e000e400 	.word	0xe000e400
 8004eec:	20000540 	.word	0x20000540
 8004ef0:	20000544 	.word	0x20000544
 8004ef4:	e000ed20 	.word	0xe000ed20
 8004ef8:	2000000c 	.word	0x2000000c

08004efc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	607b      	str	r3, [r7, #4]
}
 8004f14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f16:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <vPortEnterCritical+0x58>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	4a0d      	ldr	r2, [pc, #52]	; (8004f54 <vPortEnterCritical+0x58>)
 8004f1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f20:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <vPortEnterCritical+0x58>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d10f      	bne.n	8004f48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <vPortEnterCritical+0x5c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	603b      	str	r3, [r7, #0]
}
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <vPortEnterCritical+0x4a>
	}
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	2000000c 	.word	0x2000000c
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <vPortExitCritical+0x4c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <vPortExitCritical+0x24>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	607b      	str	r3, [r7, #4]
}
 8004f7c:	bf00      	nop
 8004f7e:	e7fe      	b.n	8004f7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <vPortExitCritical+0x4c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	4a08      	ldr	r2, [pc, #32]	; (8004fa8 <vPortExitCritical+0x4c>)
 8004f88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <vPortExitCritical+0x4c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d105      	bne.n	8004f9e <vPortExitCritical+0x42>
 8004f92:	2300      	movs	r3, #0
 8004f94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f383 8811 	msr	BASEPRI, r3
}
 8004f9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr
 8004fa8:	2000000c 	.word	0x2000000c
 8004fac:	00000000 	.word	0x00000000

08004fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fb0:	f3ef 8009 	mrs	r0, PSP
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <pxCurrentTCBConst>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fc0:	6010      	str	r0, [r2, #0]
 8004fc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004fc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fca:	f380 8811 	msr	BASEPRI, r0
 8004fce:	f7ff fc23 	bl	8004818 <vTaskSwitchContext>
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8811 	msr	BASEPRI, r0
 8004fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004fde:	6819      	ldr	r1, [r3, #0]
 8004fe0:	6808      	ldr	r0, [r1, #0]
 8004fe2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fe6:	f380 8809 	msr	PSP, r0
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	4770      	bx	lr

08004ff0 <pxCurrentTCBConst>:
 8004ff0:	20000414 	.word	0x20000414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop

08004ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	607b      	str	r3, [r7, #4]
}
 8005010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005012:	f7ff fb43 	bl	800469c <xTaskIncrementTick>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800501c:	4b06      	ldr	r3, [pc, #24]	; (8005038 <SysTick_Handler+0x40>)
 800501e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	2300      	movs	r3, #0
 8005026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f383 8811 	msr	BASEPRI, r3
}
 800502e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005040:	4b0a      	ldr	r3, [pc, #40]	; (800506c <vPortSetupTimerInterrupt+0x30>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005046:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <vPortSetupTimerInterrupt+0x34>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <vPortSetupTimerInterrupt+0x38>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a09      	ldr	r2, [pc, #36]	; (8005078 <vPortSetupTimerInterrupt+0x3c>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	4a08      	ldr	r2, [pc, #32]	; (800507c <vPortSetupTimerInterrupt+0x40>)
 800505a:	3b01      	subs	r3, #1
 800505c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800505e:	4b03      	ldr	r3, [pc, #12]	; (800506c <vPortSetupTimerInterrupt+0x30>)
 8005060:	2207      	movs	r2, #7
 8005062:	601a      	str	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr
 800506c:	e000e010 	.word	0xe000e010
 8005070:	e000e018 	.word	0xe000e018
 8005074:	20000000 	.word	0x20000000
 8005078:	10624dd3 	.word	0x10624dd3
 800507c:	e000e014 	.word	0xe000e014

08005080 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005086:	f3ef 8305 	mrs	r3, IPSR
 800508a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b0f      	cmp	r3, #15
 8005090:	d914      	bls.n	80050bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005092:	4a16      	ldr	r2, [pc, #88]	; (80050ec <vPortValidateInterruptPriority+0x6c>)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <vPortValidateInterruptPriority+0x70>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	7afa      	ldrb	r2, [r7, #11]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d20a      	bcs.n	80050bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	607b      	str	r3, [r7, #4]
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050bc:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <vPortValidateInterruptPriority+0x74>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <vPortValidateInterruptPriority+0x78>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d90a      	bls.n	80050e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	603b      	str	r3, [r7, #0]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <vPortValidateInterruptPriority+0x60>
	}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	e000e3f0 	.word	0xe000e3f0
 80050f0:	20000540 	.word	0x20000540
 80050f4:	e000ed0c 	.word	0xe000ed0c
 80050f8:	20000544 	.word	0x20000544

080050fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08a      	sub	sp, #40	; 0x28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005104:	2300      	movs	r3, #0
 8005106:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005108:	f7ff fa1e 	bl	8004548 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800510c:	4b58      	ldr	r3, [pc, #352]	; (8005270 <pvPortMalloc+0x174>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005114:	f000 f910 	bl	8005338 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005118:	4b56      	ldr	r3, [pc, #344]	; (8005274 <pvPortMalloc+0x178>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	f040 808e 	bne.w	8005242 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01d      	beq.n	8005168 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800512c:	2208      	movs	r2, #8
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b00      	cmp	r3, #0
 800513c:	d014      	beq.n	8005168 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f023 0307 	bic.w	r3, r3, #7
 8005144:	3308      	adds	r3, #8
 8005146:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <pvPortMalloc+0x6c>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	617b      	str	r3, [r7, #20]
}
 8005164:	bf00      	nop
 8005166:	e7fe      	b.n	8005166 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d069      	beq.n	8005242 <pvPortMalloc+0x146>
 800516e:	4b42      	ldr	r3, [pc, #264]	; (8005278 <pvPortMalloc+0x17c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	429a      	cmp	r2, r3
 8005176:	d864      	bhi.n	8005242 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005178:	4b40      	ldr	r3, [pc, #256]	; (800527c <pvPortMalloc+0x180>)
 800517a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800517c:	4b3f      	ldr	r3, [pc, #252]	; (800527c <pvPortMalloc+0x180>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005182:	e004      	b.n	800518e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d903      	bls.n	80051a0 <pvPortMalloc+0xa4>
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f1      	bne.n	8005184 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051a0:	4b33      	ldr	r3, [pc, #204]	; (8005270 <pvPortMalloc+0x174>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d04b      	beq.n	8005242 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2208      	movs	r2, #8
 80051b0:	4413      	add	r3, r2
 80051b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	1ad2      	subs	r2, r2, r3
 80051c4:	2308      	movs	r3, #8
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d91f      	bls.n	800520c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <pvPortMalloc+0xf8>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	613b      	str	r3, [r7, #16]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	1ad2      	subs	r2, r2, r3
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005206:	69b8      	ldr	r0, [r7, #24]
 8005208:	f000 f8f8 	bl	80053fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800520c:	4b1a      	ldr	r3, [pc, #104]	; (8005278 <pvPortMalloc+0x17c>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	4a18      	ldr	r2, [pc, #96]	; (8005278 <pvPortMalloc+0x17c>)
 8005218:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800521a:	4b17      	ldr	r3, [pc, #92]	; (8005278 <pvPortMalloc+0x17c>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	4b18      	ldr	r3, [pc, #96]	; (8005280 <pvPortMalloc+0x184>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d203      	bcs.n	800522e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005226:	4b14      	ldr	r3, [pc, #80]	; (8005278 <pvPortMalloc+0x17c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a15      	ldr	r2, [pc, #84]	; (8005280 <pvPortMalloc+0x184>)
 800522c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	4b10      	ldr	r3, [pc, #64]	; (8005274 <pvPortMalloc+0x178>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	431a      	orrs	r2, r3
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005242:	f7ff f98f 	bl	8004564 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <pvPortMalloc+0x16a>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	60fb      	str	r3, [r7, #12]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <pvPortMalloc+0x168>
	return pvReturn;
 8005266:	69fb      	ldr	r3, [r7, #28]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3728      	adds	r7, #40	; 0x28
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20001150 	.word	0x20001150
 8005274:	2000115c 	.word	0x2000115c
 8005278:	20001154 	.word	0x20001154
 800527c:	20001148 	.word	0x20001148
 8005280:	20001158 	.word	0x20001158

08005284 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d048      	beq.n	8005328 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005296:	2308      	movs	r3, #8
 8005298:	425b      	negs	r3, r3
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4413      	add	r3, r2
 800529e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	4b21      	ldr	r3, [pc, #132]	; (8005330 <vPortFree+0xac>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4013      	ands	r3, r2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <vPortFree+0x44>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	60fb      	str	r3, [r7, #12]
}
 80052c4:	bf00      	nop
 80052c6:	e7fe      	b.n	80052c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <vPortFree+0x62>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	60bb      	str	r3, [r7, #8]
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	4b11      	ldr	r3, [pc, #68]	; (8005330 <vPortFree+0xac>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d019      	beq.n	8005328 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d115      	bne.n	8005328 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <vPortFree+0xac>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	43db      	mvns	r3, r3
 8005306:	401a      	ands	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800530c:	f7ff f91c 	bl	8004548 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	4b07      	ldr	r3, [pc, #28]	; (8005334 <vPortFree+0xb0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4413      	add	r3, r2
 800531a:	4a06      	ldr	r2, [pc, #24]	; (8005334 <vPortFree+0xb0>)
 800531c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800531e:	6938      	ldr	r0, [r7, #16]
 8005320:	f000 f86c 	bl	80053fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005324:	f7ff f91e 	bl	8004564 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005328:	bf00      	nop
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	2000115c 	.word	0x2000115c
 8005334:	20001154 	.word	0x20001154

08005338 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800533e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005342:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005344:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <prvHeapInit+0xac>)
 8005346:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3307      	adds	r3, #7
 8005356:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0307 	bic.w	r3, r3, #7
 800535e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <prvHeapInit+0xac>)
 8005368:	4413      	add	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <prvHeapInit+0xb0>)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005376:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <prvHeapInit+0xb0>)
 8005378:	2200      	movs	r2, #0
 800537a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	4413      	add	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005384:	2208      	movs	r2, #8
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4a15      	ldr	r2, [pc, #84]	; (80053ec <prvHeapInit+0xb4>)
 8005398:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800539a:	4b14      	ldr	r3, [pc, #80]	; (80053ec <prvHeapInit+0xb4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2200      	movs	r2, #0
 80053a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <prvHeapInit+0xb4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053b8:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <prvHeapInit+0xb4>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <prvHeapInit+0xb8>)
 80053c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <prvHeapInit+0xbc>)
 80053ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <prvHeapInit+0xc0>)
 80053d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053d6:	601a      	str	r2, [r3, #0]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000548 	.word	0x20000548
 80053e8:	20001148 	.word	0x20001148
 80053ec:	20001150 	.word	0x20001150
 80053f0:	20001158 	.word	0x20001158
 80053f4:	20001154 	.word	0x20001154
 80053f8:	2000115c 	.word	0x2000115c

080053fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005404:	4b27      	ldr	r3, [pc, #156]	; (80054a4 <prvInsertBlockIntoFreeList+0xa8>)
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e002      	b.n	8005410 <prvInsertBlockIntoFreeList+0x14>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d8f7      	bhi.n	800540a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	4413      	add	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	429a      	cmp	r2, r3
 800542a:	d108      	bne.n	800543e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	441a      	add	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	441a      	add	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d118      	bne.n	8005484 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <prvInsertBlockIntoFreeList+0xac>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d00d      	beq.n	800547a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	441a      	add	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e008      	b.n	800548c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <prvInsertBlockIntoFreeList+0xac>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e003      	b.n	800548c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d002      	beq.n	800549a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr
 80054a4:	20001148 	.word	0x20001148
 80054a8:	20001150 	.word	0x20001150

080054ac <__libc_init_array>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	2600      	movs	r6, #0
 80054b0:	4d0c      	ldr	r5, [pc, #48]	; (80054e4 <__libc_init_array+0x38>)
 80054b2:	4c0d      	ldr	r4, [pc, #52]	; (80054e8 <__libc_init_array+0x3c>)
 80054b4:	1b64      	subs	r4, r4, r5
 80054b6:	10a4      	asrs	r4, r4, #2
 80054b8:	42a6      	cmp	r6, r4
 80054ba:	d109      	bne.n	80054d0 <__libc_init_array+0x24>
 80054bc:	f000 f830 	bl	8005520 <_init>
 80054c0:	2600      	movs	r6, #0
 80054c2:	4d0a      	ldr	r5, [pc, #40]	; (80054ec <__libc_init_array+0x40>)
 80054c4:	4c0a      	ldr	r4, [pc, #40]	; (80054f0 <__libc_init_array+0x44>)
 80054c6:	1b64      	subs	r4, r4, r5
 80054c8:	10a4      	asrs	r4, r4, #2
 80054ca:	42a6      	cmp	r6, r4
 80054cc:	d105      	bne.n	80054da <__libc_init_array+0x2e>
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d4:	4798      	blx	r3
 80054d6:	3601      	adds	r6, #1
 80054d8:	e7ee      	b.n	80054b8 <__libc_init_array+0xc>
 80054da:	f855 3b04 	ldr.w	r3, [r5], #4
 80054de:	4798      	blx	r3
 80054e0:	3601      	adds	r6, #1
 80054e2:	e7f2      	b.n	80054ca <__libc_init_array+0x1e>
 80054e4:	080055b8 	.word	0x080055b8
 80054e8:	080055b8 	.word	0x080055b8
 80054ec:	080055b8 	.word	0x080055b8
 80054f0:	080055bc 	.word	0x080055bc

080054f4 <memcpy>:
 80054f4:	440a      	add	r2, r1
 80054f6:	4291      	cmp	r1, r2
 80054f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054fc:	d100      	bne.n	8005500 <memcpy+0xc>
 80054fe:	4770      	bx	lr
 8005500:	b510      	push	{r4, lr}
 8005502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005506:	4291      	cmp	r1, r2
 8005508:	f803 4f01 	strb.w	r4, [r3, #1]!
 800550c:	d1f9      	bne.n	8005502 <memcpy+0xe>
 800550e:	bd10      	pop	{r4, pc}

08005510 <memset>:
 8005510:	4603      	mov	r3, r0
 8005512:	4402      	add	r2, r0
 8005514:	4293      	cmp	r3, r2
 8005516:	d100      	bne.n	800551a <memset+0xa>
 8005518:	4770      	bx	lr
 800551a:	f803 1b01 	strb.w	r1, [r3], #1
 800551e:	e7f9      	b.n	8005514 <memset+0x4>

08005520 <_init>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr

0800552c <_fini>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr
