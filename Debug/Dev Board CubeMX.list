
Dev Board CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d38  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb0  08006fb0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006fb0  08006fb0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fb0  08006fb0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fb4  08006fb4  00016fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e0  20000010  08006fc8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011f0  08006fc8  000211f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c36  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000395e  00000000  00000000  00034c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  000385d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  00039930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f27  00000000  00000000  0003aae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015414  00000000  00000000  00054a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009790c  00000000  00000000  00069e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010172f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e5c  00000000  00000000  00101780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e30 	.word	0x08006e30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006e30 	.word	0x08006e30

08000150 <servo_init>:

static TIM_HandleTypeDef htim2;
static void MX_TIM2_Init(void);
static void Error_Handler(void);

void servo_init(){
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 8000154:	f000 f81e 	bl	8000194 <MX_TIM2_Init>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <set_servo_pos>:



// Set Speed of the motor
void set_servo_pos(uint32_t pos){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	// Motor speed PWM 50 Hz 100 Ticks at 5000 Hz
	TIM2->CCR4 = 1000 - (pos/3 + 58);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4a09      	ldr	r2, [pc, #36]	; (800018c <set_servo_pos+0x30>)
 8000168:	fba2 2303 	umull	r2, r3, r2, r3
 800016c:	085b      	lsrs	r3, r3, #1
 800016e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000172:	f5c3 736b 	rsb	r3, r3, #940	; 0x3ac
 8000176:	3302      	adds	r3, #2
 8000178:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800017a:	210c      	movs	r1, #12
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <set_servo_pos+0x34>)
 800017e:	f003 ff45 	bl	800400c <HAL_TIM_PWM_Start>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	aaaaaaab 	.word	0xaaaaaaab
 8000190:	2000002c 	.word	0x2000002c

08000194 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b08e      	sub	sp, #56	; 0x38
 8000198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800019a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80001a8:	f107 0320 	add.w	r3, r7, #32
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80001b2:	1d3b      	adds	r3, r7, #4
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
 80001b8:	605a      	str	r2, [r3, #4]
 80001ba:	609a      	str	r2, [r3, #8]
 80001bc:	60da      	str	r2, [r3, #12]
 80001be:	611a      	str	r2, [r3, #16]
 80001c0:	615a      	str	r2, [r3, #20]
 80001c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80001c4:	4b2d      	ldr	r3, [pc, #180]	; (800027c <MX_TIM2_Init+0xe8>)
 80001c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 80001cc:	4b2b      	ldr	r3, [pc, #172]	; (800027c <MX_TIM2_Init+0xe8>)
 80001ce:	229f      	movs	r2, #159	; 0x9f
 80001d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80001d2:	4b2a      	ldr	r3, [pc, #168]	; (800027c <MX_TIM2_Init+0xe8>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80001d8:	4b28      	ldr	r3, [pc, #160]	; (800027c <MX_TIM2_Init+0xe8>)
 80001da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80001de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80001e0:	4b26      	ldr	r3, [pc, #152]	; (800027c <MX_TIM2_Init+0xe8>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80001e6:	4b25      	ldr	r3, [pc, #148]	; (800027c <MX_TIM2_Init+0xe8>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80001ec:	4823      	ldr	r0, [pc, #140]	; (800027c <MX_TIM2_Init+0xe8>)
 80001ee:	f003 fe1b 	bl	8003e28 <HAL_TIM_Base_Init>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80001f8:	f000 f842 	bl	8000280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80001fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000200:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000206:	4619      	mov	r1, r3
 8000208:	481c      	ldr	r0, [pc, #112]	; (800027c <MX_TIM2_Init+0xe8>)
 800020a:	f004 f9cb 	bl	80045a4 <HAL_TIM_ConfigClockSource>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000214:	f000 f834 	bl	8000280 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000218:	4818      	ldr	r0, [pc, #96]	; (800027c <MX_TIM2_Init+0xe8>)
 800021a:	f003 fea7 	bl	8003f6c <HAL_TIM_PWM_Init>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000224:	f000 f82c 	bl	8000280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000228:	2300      	movs	r3, #0
 800022a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800022c:	2300      	movs	r3, #0
 800022e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000230:	f107 0320 	add.w	r3, r7, #32
 8000234:	4619      	mov	r1, r3
 8000236:	4811      	ldr	r0, [pc, #68]	; (800027c <MX_TIM2_Init+0xe8>)
 8000238:	f004 fd40 	bl	8004cbc <HAL_TIMEx_MasterConfigSynchronization>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000242:	f000 f81d 	bl	8000280 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000246:	2360      	movs	r3, #96	; 0x60
 8000248:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	220c      	movs	r2, #12
 800025a:	4619      	mov	r1, r3
 800025c:	4807      	ldr	r0, [pc, #28]	; (800027c <MX_TIM2_Init+0xe8>)
 800025e:	f004 f8e3 	bl	8004428 <HAL_TIM_PWM_ConfigChannel>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000268:	f000 f80a 	bl	8000280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <MX_TIM2_Init+0xe8>)
 800026e:	f001 f893 	bl	8001398 <HAL_TIM_MspPostInit>

}
 8000272:	bf00      	nop
 8000274:	3738      	adds	r7, #56	; 0x38
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	2000002c 	.word	0x2000002c

08000280 <Error_Handler>:

static void Error_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000284:	b672      	cpsid	i
}
 8000286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000288:	e7fe      	b.n	8000288 <Error_Handler+0x8>

0800028a <current_sense_init>:
static void Error_Handler(void);

ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

void current_sense_init(){
 800028a:	b580      	push	{r7, lr}
 800028c:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 800028e:	f000 f835 	bl	80002fc <MX_ADC1_Init>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <current_sense_read>:

uint16_t current_sense_read(){
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
	// read
	uint16_t raw;
	HAL_ADC_Start(&hadc1);
 800029e:	4808      	ldr	r0, [pc, #32]	; (80002c0 <current_sense_read+0x28>)
 80002a0:	f001 fbdc 	bl	8001a5c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 5);
 80002a4:	2105      	movs	r1, #5
 80002a6:	4806      	ldr	r0, [pc, #24]	; (80002c0 <current_sense_read+0x28>)
 80002a8:	f001 fc86 	bl	8001bb8 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <current_sense_read+0x28>)
 80002ae:	f001 fd89 	bl	8001dc4 <HAL_ADC_GetValue>
 80002b2:	4603      	mov	r3, r0
 80002b4:	80fb      	strh	r3, [r7, #6]
	return raw;
 80002b6:	88fb      	ldrh	r3, [r7, #6]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	20000074 	.word	0x20000074

080002c4 <pot_sense_init>:

void pot_sense_init(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	MX_ADC2_Init();
 80002c8:	f000 f856 	bl	8000378 <MX_ADC2_Init>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <pot_sense_read>:

uint16_t pot_sense_read(){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
	// read
	HAL_ADC_Start(&hadc2);
 80002d6:	4808      	ldr	r0, [pc, #32]	; (80002f8 <pot_sense_read+0x28>)
 80002d8:	f001 fbc0 	bl	8001a5c <HAL_ADC_Start>
	uint16_t raw;
	HAL_ADC_PollForConversion(&hadc2, 5);
 80002dc:	2105      	movs	r1, #5
 80002de:	4806      	ldr	r0, [pc, #24]	; (80002f8 <pot_sense_read+0x28>)
 80002e0:	f001 fc6a 	bl	8001bb8 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc2);
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <pot_sense_read+0x28>)
 80002e6:	f001 fd6d 	bl	8001dc4 <HAL_ADC_GetValue>
 80002ea:	4603      	mov	r3, r0
 80002ec:	80fb      	strh	r3, [r7, #6]
	return raw;
 80002ee:	88fb      	ldrh	r3, [r7, #6]
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200000a4 	.word	0x200000a4

080002fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800030c:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_ADC1_Init+0x74>)
 800030e:	4a19      	ldr	r2, [pc, #100]	; (8000374 <MX_ADC1_Init+0x78>)
 8000310:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <MX_ADC1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000318:	4b15      	ldr	r3, [pc, #84]	; (8000370 <MX_ADC1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MX_ADC1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_ADC1_Init+0x74>)
 8000326:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800032a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <MX_ADC1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_ADC1_Init+0x74>)
 8000334:	2201      	movs	r2, #1
 8000336:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <MX_ADC1_Init+0x74>)
 800033a:	f001 fab7 	bl	80018ac <HAL_ADC_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000344:	f000 f856 	bl	80003f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000348:	2304      	movs	r3, #4
 800034a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800034c:	2301      	movs	r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4619      	mov	r1, r3
 8000358:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_ADC1_Init+0x74>)
 800035a:	f001 fd3f 	bl	8001ddc <HAL_ADC_ConfigChannel>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000364:	f000 f846 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000368:	bf00      	nop
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000074 	.word	0x20000074
 8000374:	40012400 	.word	0x40012400

08000378 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_ADC2_Init+0x74>)
 800038a:	4a19      	ldr	r2, [pc, #100]	; (80003f0 <MX_ADC2_Init+0x78>)
 800038c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800038e:	4b17      	ldr	r3, [pc, #92]	; (80003ec <MX_ADC2_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_ADC2_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800039a:	4b14      	ldr	r3, [pc, #80]	; (80003ec <MX_ADC2_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <MX_ADC2_Init+0x74>)
 80003a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a8:	4b10      	ldr	r3, [pc, #64]	; (80003ec <MX_ADC2_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_ADC2_Init+0x74>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <MX_ADC2_Init+0x74>)
 80003b6:	f001 fa79 	bl	80018ac <HAL_ADC_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80003c0:	f000 f818 	bl	80003f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003c4:	2305      	movs	r3, #5
 80003c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	4619      	mov	r1, r3
 80003d4:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_ADC2_Init+0x74>)
 80003d6:	f001 fd01 	bl	8001ddc <HAL_ADC_ConfigChannel>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80003e0:	f000 f808 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200000a4 	.word	0x200000a4
 80003f0:	40012800 	.word	0x40012800

080003f4 <Error_Handler>:

static void Error_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80003f8:	b672      	cpsid	i
}
 80003fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fc:	e7fe      	b.n	80003fc <Error_Handler+0x8>

080003fe <Error_Handler>:
#include "stm32f1xx_hal.h"
#include "cmsis_os.h"


static void Error_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000402:	b672      	cpsid	i
}
 8000404:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000406:	e7fe      	b.n	8000406 <Error_Handler+0x8>

08000408 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08a      	sub	sp, #40	; 0x28
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800040e:	f107 0320 	add.w	r3, r7, #32
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
 8000424:	611a      	str	r2, [r3, #16]
 8000426:	615a      	str	r2, [r3, #20]
 8000428:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <MX_TIM3_Init+0xc4>)
 800042c:	4a28      	ldr	r2, [pc, #160]	; (80004d0 <MX_TIM3_Init+0xc8>)
 800042e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8000430:	4b26      	ldr	r3, [pc, #152]	; (80004cc <MX_TIM3_Init+0xc4>)
 8000432:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <MX_TIM3_Init+0xc4>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800043e:	4b23      	ldr	r3, [pc, #140]	; (80004cc <MX_TIM3_Init+0xc4>)
 8000440:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000446:	4b21      	ldr	r3, [pc, #132]	; (80004cc <MX_TIM3_Init+0xc4>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800044c:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <MX_TIM3_Init+0xc4>)
 800044e:	2200      	movs	r2, #0
 8000450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000452:	481e      	ldr	r0, [pc, #120]	; (80004cc <MX_TIM3_Init+0xc4>)
 8000454:	f003 fd8a 	bl	8003f6c <HAL_TIM_PWM_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800045e:	f7ff ffce 	bl	80003fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000462:	2300      	movs	r3, #0
 8000464:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800046a:	f107 0320 	add.w	r3, r7, #32
 800046e:	4619      	mov	r1, r3
 8000470:	4816      	ldr	r0, [pc, #88]	; (80004cc <MX_TIM3_Init+0xc4>)
 8000472:	f004 fc23 	bl	8004cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800047c:	f7ff ffbf 	bl	80003fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000480:	2360      	movs	r3, #96	; 0x60
 8000482:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2204      	movs	r2, #4
 8000494:	4619      	mov	r1, r3
 8000496:	480d      	ldr	r0, [pc, #52]	; (80004cc <MX_TIM3_Init+0xc4>)
 8000498:	f003 ffc6 	bl	8004428 <HAL_TIM_PWM_ConfigChannel>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80004a2:	f7ff ffac 	bl	80003fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	220c      	movs	r2, #12
 80004aa:	4619      	mov	r1, r3
 80004ac:	4807      	ldr	r0, [pc, #28]	; (80004cc <MX_TIM3_Init+0xc4>)
 80004ae:	f003 ffbb 	bl	8004428 <HAL_TIM_PWM_ConfigChannel>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80004b8:	f7ff ffa1 	bl	80003fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004bc:	4803      	ldr	r0, [pc, #12]	; (80004cc <MX_TIM3_Init+0xc4>)
 80004be:	f000 ff6b 	bl	8001398 <HAL_TIM_MspPostInit>

}
 80004c2:	bf00      	nop
 80004c4:	3728      	adds	r7, #40	; 0x28
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200000d4 	.word	0x200000d4
 80004d0:	40000400 	.word	0x40000400

080004d4 <blinkers_init>:
uint8_t left_state  = 0;
uint8_t right_state = 0;



void blinkers_init(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 80004d8:	f7ff ff96 	bl	8000408 <MX_TIM3_Init>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <set_blinkers>:

void set_blinkers(uint8_t hazard, uint8_t right, uint8_t left){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	460b      	mov	r3, r1
 80004ec:	71bb      	strb	r3, [r7, #6]
 80004ee:	4613      	mov	r3, r2
 80004f0:	717b      	strb	r3, [r7, #5]
	if (hazard == 1 && hazard_state == 0){
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d106      	bne.n	8000506 <set_blinkers+0x26>
 80004f8:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <set_blinkers+0x94>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d102      	bne.n	8000506 <set_blinkers+0x26>
		hazards_on();
 8000500:	f000 f88e 	bl	8000620 <hazards_on>
 8000504:	e008      	b.n	8000518 <set_blinkers+0x38>
	}
	else if (hazard == 0 && hazard_state == 1){
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d105      	bne.n	8000518 <set_blinkers+0x38>
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <set_blinkers+0x94>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d101      	bne.n	8000518 <set_blinkers+0x38>
		hazards_off();
 8000514:	f000 f892 	bl	800063c <hazards_off>
	}
	if (hazard == 0){
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d125      	bne.n	800056a <set_blinkers+0x8a>
		if (left == 1 && left_state == 0){
 800051e:	797b      	ldrb	r3, [r7, #5]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d106      	bne.n	8000532 <set_blinkers+0x52>
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <set_blinkers+0x98>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d102      	bne.n	8000532 <set_blinkers+0x52>
			left_blinker_on();
 800052c:	f000 f828 	bl	8000580 <left_blinker_on>
 8000530:	e008      	b.n	8000544 <set_blinkers+0x64>
		}
		else if (left == 0 && left_state == 1){
 8000532:	797b      	ldrb	r3, [r7, #5]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d105      	bne.n	8000544 <set_blinkers+0x64>
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <set_blinkers+0x98>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d101      	bne.n	8000544 <set_blinkers+0x64>
			left_blinker_off();
 8000540:	f000 f836 	bl	80005b0 <left_blinker_off>
		}
		if (right == 1 && right_state == 0){
 8000544:	79bb      	ldrb	r3, [r7, #6]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d106      	bne.n	8000558 <set_blinkers+0x78>
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <set_blinkers+0x9c>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d102      	bne.n	8000558 <set_blinkers+0x78>
			right_blinker_on();
 8000552:	f000 f83d 	bl	80005d0 <right_blinker_on>
		}
		else if (right == 0 && right_state == 1){
			right_blinker_off();
		}
	}
}
 8000556:	e008      	b.n	800056a <set_blinkers+0x8a>
		else if (right == 0 && right_state == 1){
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d105      	bne.n	800056a <set_blinkers+0x8a>
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <set_blinkers+0x9c>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d101      	bne.n	800056a <set_blinkers+0x8a>
			right_blinker_off();
 8000566:	f000 f84b 	bl	8000600 <right_blinker_off>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000011c 	.word	0x2000011c
 8000578:	2000011d 	.word	0x2000011d
 800057c:	2000011e 	.word	0x2000011e

08000580 <left_blinker_on>:


void left_blinker_on(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	TIM3->CCR2 = 500;
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <left_blinker_on+0x24>)
 8000586:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800058a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CNT = 0;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <left_blinker_on+0x24>)
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000592:	2104      	movs	r1, #4
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <left_blinker_on+0x28>)
 8000596:	f003 fd39 	bl	800400c <HAL_TIM_PWM_Start>
	left_state = 1;
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <left_blinker_on+0x2c>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40000400 	.word	0x40000400
 80005a8:	200000d4 	.word	0x200000d4
 80005ac:	2000011d 	.word	0x2000011d

080005b0 <left_blinker_off>:

void left_blinker_off(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80005b4:	2104      	movs	r1, #4
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <left_blinker_off+0x18>)
 80005b8:	f003 fdca 	bl	8004150 <HAL_TIM_PWM_Stop>
	left_state = 0;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <left_blinker_off+0x1c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000d4 	.word	0x200000d4
 80005cc:	2000011d 	.word	0x2000011d

080005d0 <right_blinker_on>:

void right_blinker_on(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	TIM3->CCR4 = 500;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <right_blinker_on+0x24>)
 80005d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005da:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->CNT = 0;
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <right_blinker_on+0x24>)
 80005de:	2200      	movs	r2, #0
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80005e2:	210c      	movs	r1, #12
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <right_blinker_on+0x28>)
 80005e6:	f003 fd11 	bl	800400c <HAL_TIM_PWM_Start>
	right_state = 1;
 80005ea:	4b04      	ldr	r3, [pc, #16]	; (80005fc <right_blinker_on+0x2c>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40000400 	.word	0x40000400
 80005f8:	200000d4 	.word	0x200000d4
 80005fc:	2000011e 	.word	0x2000011e

08000600 <right_blinker_off>:

void right_blinker_off(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8000604:	210c      	movs	r1, #12
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <right_blinker_off+0x18>)
 8000608:	f003 fda2 	bl	8004150 <HAL_TIM_PWM_Stop>
	right_state = 0;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <right_blinker_off+0x1c>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000d4 	.word	0x200000d4
 800061c:	2000011e 	.word	0x2000011e

08000620 <hazards_on>:


void hazards_on(){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	left_blinker_on();
 8000624:	f7ff ffac 	bl	8000580 <left_blinker_on>
	right_blinker_on();
 8000628:	f7ff ffd2 	bl	80005d0 <right_blinker_on>
	hazard_state = 1;
 800062c:	4b02      	ldr	r3, [pc, #8]	; (8000638 <hazards_on+0x18>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000011c 	.word	0x2000011c

0800063c <hazards_off>:

void hazards_off(){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	left_blinker_off();
 8000640:	f7ff ffb6 	bl	80005b0 <left_blinker_off>
	right_blinker_off();
 8000644:	f7ff ffdc 	bl	8000600 <right_blinker_off>
	hazard_state = 0;
 8000648:	4b02      	ldr	r3, [pc, #8]	; (8000654 <hazards_off+0x18>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000011c 	.word	0x2000011c

08000658 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4a06      	ldr	r2, [pc, #24]	; (8000680 <vApplicationGetIdleTaskMemory+0x28>)
 8000668:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4a05      	ldr	r2, [pc, #20]	; (8000684 <vApplicationGetIdleTaskMemory+0x2c>)
 800066e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000120 	.word	0x20000120
 8000684:	20000174 	.word	0x20000174

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b0ba      	sub	sp, #232	; 0xe8
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800068e:	f001 f8b7 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f8e7 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 f935 	bl	8000904 <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_1_GPIO_Port, GPIO_1_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	4860      	ldr	r0, [pc, #384]	; (8000824 <main+0x19c>)
 80006a2:	f002 fde4 	bl	800326e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIO_3_GPIO_Port, GPIO_3_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ac:	485d      	ldr	r0, [pc, #372]	; (8000824 <main+0x19c>)
 80006ae:	f002 fdde 	bl	800326e <HAL_GPIO_WritePin>
  GPIO_PinState zone_indicator = HAL_GPIO_ReadPin(GPIO_2_GPIO_Port,GPIO_2_Pin);
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	485b      	ldr	r0, [pc, #364]	; (8000824 <main+0x19c>)
 80006b8:	f002 fdc2 	bl	8003240 <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
  /* USER CODE BEGIN 2 */
  blinkers_init();
 80006c2:	f7ff ff07 	bl	80004d4 <blinkers_init>
  can_init();
 80006c6:	f000 ff93 	bl	80015f0 <can_init>
  // Front Zone is set and Rear is reset (re re)
  if (zone_indicator == GPIO_PIN_RESET){ // Rear
 80006ca:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d139      	bne.n	8000746 <main+0xbe>
	osThreadDef(motorControl, motor_controller, osPriorityNormal, 0, 128);
 80006d2:	4b55      	ldr	r3, [pc, #340]	; (8000828 <main+0x1a0>)
 80006d4:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80006d8:	461d      	mov	r5, r3
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	motorControlHandle = osThreadCreate(osThread(motorControl), NULL);
 80006e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 fb73 	bl	8004dd8 <osThreadCreate>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a4d      	ldr	r2, [pc, #308]	; (800082c <main+0x1a4>)
 80006f6:	6013      	str	r3, [r2, #0]
	osThreadDef(canRecieve, can_rx_rear, osPriorityHigh, 0, 128);
 80006f8:	4b4d      	ldr	r3, [pc, #308]	; (8000830 <main+0x1a8>)
 80006fa:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80006fe:	461d      	mov	r5, r3
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canRecieveHandle = osThreadCreate(osThread(canRecieve), NULL);
 800070c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fb60 	bl	8004dd8 <osThreadCreate>
 8000718:	4603      	mov	r3, r0
 800071a:	4a46      	ldr	r2, [pc, #280]	; (8000834 <main+0x1ac>)
 800071c:	6013      	str	r3, [r2, #0]
	osThreadDef(canTransmit, can_tx_rear, osPriorityNormal, 0, 128);
 800071e:	4b46      	ldr	r3, [pc, #280]	; (8000838 <main+0x1b0>)
 8000720:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000724:	461d      	mov	r5, r3
 8000726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canTransmitHandle = osThreadCreate(osThread(canTransmit), NULL);
 8000732:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f004 fb4d 	bl	8004dd8 <osThreadCreate>
 800073e:	4603      	mov	r3, r0
 8000740:	4a3e      	ldr	r2, [pc, #248]	; (800083c <main+0x1b4>)
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	e04f      	b.n	80007e6 <main+0x15e>
  }
  else{ // Front
	servo_init();
 8000746:	f7ff fd03 	bl	8000150 <servo_init>
	current_sense_init();
 800074a:	f7ff fd9e 	bl	800028a <current_sense_init>
	pot_sense_init();
 800074e:	f7ff fdb9 	bl	80002c4 <pot_sense_init>
	osThreadDef(canRecieve, can_rx_front, osPriorityHigh, 0, 128);
 8000752:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <main+0x1b8>)
 8000754:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000758:	461d      	mov	r5, r3
 800075a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canRecieveHandle = osThreadCreate(osThread(canRecieve), NULL);
 8000766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f004 fb33 	bl	8004dd8 <osThreadCreate>
 8000772:	4603      	mov	r3, r0
 8000774:	4a2f      	ldr	r2, [pc, #188]	; (8000834 <main+0x1ac>)
 8000776:	6013      	str	r3, [r2, #0]
	osThreadDef(steering, steering_task, osPriorityNormal, 0, 128);
 8000778:	4b32      	ldr	r3, [pc, #200]	; (8000844 <main+0x1bc>)
 800077a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800077e:	461d      	mov	r5, r3
 8000780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000784:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000788:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	steeringHandle = osThreadCreate(osThread(steering), NULL);
 800078c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fb20 	bl	8004dd8 <osThreadCreate>
 8000798:	4603      	mov	r3, r0
 800079a:	4a2b      	ldr	r2, [pc, #172]	; (8000848 <main+0x1c0>)
 800079c:	6013      	str	r3, [r2, #0]
	osThreadDef(canTransmit, can_tx_front, osPriorityNormal, 0, 128);
 800079e:	4b2b      	ldr	r3, [pc, #172]	; (800084c <main+0x1c4>)
 80007a0:	f107 0420 	add.w	r4, r7, #32
 80007a4:	461d      	mov	r5, r3
 80007a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canTransmitHandle = osThreadCreate(osThread(canTransmit), NULL);
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f004 fb0d 	bl	8004dd8 <osThreadCreate>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a1e      	ldr	r2, [pc, #120]	; (800083c <main+0x1b4>)
 80007c2:	6013      	str	r3, [r2, #0]
	osThreadDef(adcRead, adc_task, osPriorityNormal, 0, 128);
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <main+0x1c8>)
 80007c6:	1d3c      	adds	r4, r7, #4
 80007c8:	461d      	mov	r5, r3
 80007ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	adcHandle = osThreadCreate(osThread(adcRead), NULL);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 fafc 	bl	8004dd8 <osThreadCreate>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <main+0x1cc>)
 80007e4:	6013      	str	r3, [r2, #0]
  /* add threads, ... */




  osThreadDef(selfTest, self_test, osPriorityNormal, 0, 128);
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <main+0x1d0>)
 80007e8:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80007ec:	461d      	mov	r5, r3
 80007ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  selfTestHandle = osThreadCreate(osThread(selfTest), NULL);
 80007fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f004 fae9 	bl	8004dd8 <osThreadCreate>
 8000806:	4603      	mov	r3, r0
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <main+0x1d4>)
 800080a:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800080c:	f004 fadd 	bl	8004dca <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 8000810:	2104      	movs	r1, #4
 8000812:	4813      	ldr	r0, [pc, #76]	; (8000860 <main+0x1d8>)
 8000814:	f002 fd43 	bl	800329e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081c:	f001 f822 	bl	8001864 <HAL_Delay>
	  HAL_GPIO_TogglePin(MCU_IND_GPIO_Port,MCU_IND_Pin);
 8000820:	e7f6      	b.n	8000810 <main+0x188>
 8000822:	bf00      	nop
 8000824:	40010c00 	.word	0x40010c00
 8000828:	08006e90 	.word	0x08006e90
 800082c:	20000374 	.word	0x20000374
 8000830:	08006eac 	.word	0x08006eac
 8000834:	20000378 	.word	0x20000378
 8000838:	08006ec8 	.word	0x08006ec8
 800083c:	2000037c 	.word	0x2000037c
 8000840:	08006ee4 	.word	0x08006ee4
 8000844:	08006f00 	.word	0x08006f00
 8000848:	20000384 	.word	0x20000384
 800084c:	08006f1c 	.word	0x08006f1c
 8000850:	08006f38 	.word	0x08006f38
 8000854:	20000388 	.word	0x20000388
 8000858:	08006f54 	.word	0x08006f54
 800085c:	20000380 	.word	0x20000380
 8000860:	40010800 	.word	0x40010800

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800086e:	2228      	movs	r2, #40	; 0x28
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f006 fad4 	bl	8006e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089e:	2300      	movs	r3, #0
 80008a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fd12 	bl	80032d0 <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x52>
  {
    Error_Handler();
 80008b2:	f000 fb49 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 ff7f 	bl	80037d4 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80008dc:	f000 fb34 	bl	8000f48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008e0:	2302      	movs	r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 f926 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008f6:	f000 fb27 	bl	8000f48 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3750      	adds	r7, #80	; 0x50
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000918:	4b34      	ldr	r3, [pc, #208]	; (80009ec <MX_GPIO_Init+0xe8>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a33      	ldr	r2, [pc, #204]	; (80009ec <MX_GPIO_Init+0xe8>)
 800091e:	f043 0310 	orr.w	r3, r3, #16
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b31      	ldr	r3, [pc, #196]	; (80009ec <MX_GPIO_Init+0xe8>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0310 	and.w	r3, r3, #16
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000930:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <MX_GPIO_Init+0xe8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a2d      	ldr	r2, [pc, #180]	; (80009ec <MX_GPIO_Init+0xe8>)
 8000936:	f043 0320 	orr.w	r3, r3, #32
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_GPIO_Init+0xe8>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0320 	and.w	r3, r3, #32
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_GPIO_Init+0xe8>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a27      	ldr	r2, [pc, #156]	; (80009ec <MX_GPIO_Init+0xe8>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_GPIO_Init+0xe8>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_GPIO_Init+0xe8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a21      	ldr	r2, [pc, #132]	; (80009ec <MX_GPIO_Init+0xe8>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_GPIO_Init+0xe8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_IND_GPIO_Port, MCU_IND_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2104      	movs	r1, #4
 800097c:	481c      	ldr	r0, [pc, #112]	; (80009f0 <MX_GPIO_Init+0xec>)
 800097e:	f002 fc76 	bl	800326e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN2_Pin|MOTOR_IN1_Pin|GPIO_1_Pin|GPIO_2_Pin
 8000982:	2200      	movs	r2, #0
 8000984:	f247 4104 	movw	r1, #29700	; 0x7404
 8000988:	481a      	ldr	r0, [pc, #104]	; (80009f4 <MX_GPIO_Init+0xf0>)
 800098a:	f002 fc70 	bl	800326e <HAL_GPIO_WritePin>
                          |GPIO_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800098e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	4815      	ldr	r0, [pc, #84]	; (80009f8 <MX_GPIO_Init+0xf4>)
 80009a4:	f002 fac8 	bl	8002f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_IND_Pin */
  GPIO_InitStruct.Pin = MCU_IND_Pin;
 80009a8:	2304      	movs	r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_IND_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_GPIO_Init+0xec>)
 80009c0:	f002 faba 	bl	8002f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN2_Pin MOTOR_IN1_Pin GPIO_1_Pin GPIO_2_Pin
                           GPIO_3_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN2_Pin|MOTOR_IN1_Pin|GPIO_1_Pin|GPIO_2_Pin
 80009c4:	f247 4304 	movw	r3, #29700	; 0x7404
 80009c8:	613b      	str	r3, [r7, #16]
                          |GPIO_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_GPIO_Init+0xf0>)
 80009de:	f002 faab 	bl	8002f38 <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010800 	.word	0x40010800
 80009f4:	40010c00 	.word	0x40010c00
 80009f8:	40011000 	.word	0x40011000

080009fc <adc_task>:

void adc_task(void const * argument){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	xQueueADC = xQueueCreate( 10,sizeof(adc_msg));
 8000a04:	2200      	movs	r2, #0
 8000a06:	2104      	movs	r1, #4
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f004 fb5d 	bl	80050c8 <xQueueGenericCreate>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <adc_task+0x44>)
 8000a12:	6013      	str	r3, [r2, #0]
	for(;;){
		adc_msg msg;
		msg.pot_reading = pot_sense_read();
 8000a14:	f7ff fc5c 	bl	80002d0 <pot_sense_read>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	81bb      	strh	r3, [r7, #12]
		msg.current_reading = current_sense_read();
 8000a1c:	f7ff fc3c 	bl	8000298 <current_sense_read>
 8000a20:	4603      	mov	r3, r0
 8000a22:	81fb      	strh	r3, [r7, #14]
		if (xQueueSend(xQueueADC, &msg,( TickType_t ) 10) != pdTRUE){
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <adc_task+0x44>)
 8000a26:	6818      	ldr	r0, [r3, #0]
 8000a28:	f107 010c 	add.w	r1, r7, #12
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	220a      	movs	r2, #10
 8000a30:	f004 fba8 	bl	8005184 <xQueueGenericSend>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d0ec      	beq.n	8000a14 <adc_task+0x18>
			msg.pot_reading = 0xFF;
 8000a3a:	23ff      	movs	r3, #255	; 0xff
 8000a3c:	81bb      	strh	r3, [r7, #12]
	for(;;){
 8000a3e:	e7e9      	b.n	8000a14 <adc_task+0x18>
 8000a40:	2000039c 	.word	0x2000039c

08000a44 <can_rx_rear>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink */
void can_rx_rear(void const * argument)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink */
	can_msg_t msg;
	xQueueMotor = xQueueCreate( 10,sizeof(pi_motor_command));
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2102      	movs	r1, #2
 8000a50:	200a      	movs	r0, #10
 8000a52:	f004 fb39 	bl	80050c8 <xQueueGenericCreate>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <can_rx_rear+0x74>)
 8000a5a:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	if( xQueueCANRx != NULL )
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <can_rx_rear+0x78>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d024      	beq.n	8000aae <can_rx_rear+0x6a>
	{
	  if( xQueueReceive( xQueueCANRx,
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <can_rx_rear+0x78>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f107 010c 	add.w	r1, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 fd1e 	bl	80054b0 <xQueueReceive>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d019      	beq.n	8000aae <can_rx_rear+0x6a>
						 &( msg ),
						 ( TickType_t ) 0 ))
	  {
		 if (msg.id == 0x100){
 8000a7a:	89bb      	ldrh	r3, [r7, #12]
 8000a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a80:	d10c      	bne.n	8000a9c <can_rx_rear+0x58>
			 pi_motor_command motor_command;
			 motor_command.brake = msg.msg[0];
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	723b      	strb	r3, [r7, #8]
			 motor_command.throttle = msg.msg[1];
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	727b      	strb	r3, [r7, #9]
			 xQueueSend(xQueueMotor, &motor_command,( TickType_t ) 10);
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <can_rx_rear+0x74>)
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	f107 0108 	add.w	r1, r7, #8
 8000a92:	2300      	movs	r3, #0
 8000a94:	220a      	movs	r2, #10
 8000a96:	f004 fb75 	bl	8005184 <xQueueGenericSend>
 8000a9a:	e008      	b.n	8000aae <can_rx_rear+0x6a>
		 }
		 else if (msg.id == 0x446){
 8000a9c:	89bb      	ldrh	r3, [r7, #12]
 8000a9e:	f240 4246 	movw	r2, #1094	; 0x446
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d103      	bne.n	8000aae <can_rx_rear+0x6a>
			 HAL_GPIO_TogglePin(MCU_IND_GPIO_Port, MCU_IND_Pin);
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <can_rx_rear+0x7c>)
 8000aaa:	f002 fbf8 	bl	800329e <HAL_GPIO_TogglePin>
		 }
	  }
	}
	osDelay(10);
 8000aae:	200a      	movs	r0, #10
 8000ab0:	f004 f9de 	bl	8004e70 <osDelay>
	if( xQueueCANRx != NULL )
 8000ab4:	e7d2      	b.n	8000a5c <can_rx_rear+0x18>
 8000ab6:	bf00      	nop
 8000ab8:	2000038c 	.word	0x2000038c
 8000abc:	2000049c 	.word	0x2000049c
 8000ac0:	40010800 	.word	0x40010800

08000ac4 <can_rx_front>:
  /* USER CODE END blink */
}


void can_rx_front(void const * argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink */
	can_msg_t msg;
	xQueueSteering = xQueueCreate( 10,sizeof(uint8_t));
 8000acc:	2200      	movs	r2, #0
 8000ace:	2101      	movs	r1, #1
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f004 faf9 	bl	80050c8 <xQueueGenericCreate>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <can_rx_front+0x70>)
 8000ada:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	if( xQueueCANRx != NULL )
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <can_rx_front+0x74>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d022      	beq.n	8000b2a <can_rx_front+0x66>
	{
	  if( xQueueReceive( xQueueCANRx,
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <can_rx_front+0x74>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f107 010c 	add.w	r1, r7, #12
 8000aec:	2200      	movs	r2, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f004 fcde 	bl	80054b0 <xQueueReceive>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d017      	beq.n	8000b2a <can_rx_front+0x66>
						 &( msg ),
						 ( TickType_t ) 0 ))
	  {
		 if (msg.id == 0x100){
 8000afa:	89bb      	ldrh	r3, [r7, #12]
 8000afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b00:	d10a      	bne.n	8000b18 <can_rx_front+0x54>
			 uint8_t steering_angle = msg.msg[2];
 8000b02:	7c3b      	ldrb	r3, [r7, #16]
 8000b04:	72fb      	strb	r3, [r7, #11]
			 xQueueSend(xQueueSteering, &steering_angle,( TickType_t ) 10);
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <can_rx_front+0x70>)
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	f107 010b 	add.w	r1, r7, #11
 8000b0e:	2300      	movs	r3, #0
 8000b10:	220a      	movs	r2, #10
 8000b12:	f004 fb37 	bl	8005184 <xQueueGenericSend>
 8000b16:	e008      	b.n	8000b2a <can_rx_front+0x66>
		 }
		 else if (msg.id == 0x446){
 8000b18:	89bb      	ldrh	r3, [r7, #12]
 8000b1a:	f240 4246 	movw	r2, #1094	; 0x446
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d103      	bne.n	8000b2a <can_rx_front+0x66>
			 HAL_GPIO_TogglePin(MCU_IND_GPIO_Port, MCU_IND_Pin);
 8000b22:	2104      	movs	r1, #4
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <can_rx_front+0x78>)
 8000b26:	f002 fbba 	bl	800329e <HAL_GPIO_TogglePin>
		 }
	  }
	}
	osDelay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f004 f9a0 	bl	8004e70 <osDelay>
	if( xQueueCANRx != NULL )
 8000b30:	e7d4      	b.n	8000adc <can_rx_front+0x18>
 8000b32:	bf00      	nop
 8000b34:	20000390 	.word	0x20000390
 8000b38:	2000049c 	.word	0x2000049c
 8000b3c:	40010800 	.word	0x40010800

08000b40 <can_tx_rear>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink */
void can_tx_rear(void const * argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	uint8_t data[8];
	uint16_t id = 0x300;
 8000b48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4c:	82bb      	strh	r3, [r7, #20]
  zone_state_e zone_state = NORMAL;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	75fb      	strb	r3, [r7, #23]
  zone_state_e zone_state_queue = NORMAL;
 8000b52:	2304      	movs	r3, #4
 8000b54:	72fb      	strb	r3, [r7, #11]
  for(;;)
  {
	if (xQueueCANState != NULL){
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <can_tx_rear+0x94>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00c      	beq.n	8000b78 <can_tx_rear+0x38>
		if (xQueueReceive(xQueueCANState, &zone_state_queue, ( TickType_t ) 0) == pdPASS){
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <can_tx_rear+0x94>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f107 010b 	add.w	r1, r7, #11
 8000b66:	2200      	movs	r2, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 fca1 	bl	80054b0 <xQueueReceive>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d101      	bne.n	8000b78 <can_tx_rear+0x38>
			zone_state = zone_state_queue;
 8000b74:	7afb      	ldrb	r3, [r7, #11]
 8000b76:	75fb      	strb	r3, [r7, #23]
		}
	}
	switch(zone_state){
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d825      	bhi.n	8000bcc <can_tx_rear+0x8c>
 8000b80:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <can_tx_rear+0x48>)
 8000b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b86:	bf00      	nop
 8000b88:	08000bcd 	.word	0x08000bcd
 8000b8c:	08000bcd 	.word	0x08000bcd
 8000b90:	08000bbd 	.word	0x08000bbd
 8000b94:	08000b9d 	.word	0x08000b9d
 8000b98:	08000bad 	.word	0x08000bad
	case NORMAL:
		throuple_can_tx(id, data);
 8000b9c:	f107 020c 	add.w	r2, r7, #12
 8000ba0:	8abb      	ldrh	r3, [r7, #20]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fddd 	bl	8001764 <throuple_can_tx>
		break;
 8000baa:	e00f      	b.n	8000bcc <can_tx_rear+0x8c>
	case NORMAL_PUSHED:
		throuple_can_tx(id, data);
 8000bac:	f107 020c 	add.w	r2, r7, #12
 8000bb0:	8abb      	ldrh	r3, [r7, #20]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fdd5 	bl	8001764 <throuple_can_tx>
		break;
 8000bba:	e007      	b.n	8000bcc <can_tx_rear+0x8c>
	case ERROR_BUTTON:
		break;
	case ERROR_BUTTON_RELEASED:
		break;
	case ERROR_HB:
		throuple_can_tx(id, data);
 8000bbc:	f107 020c 	add.w	r2, r7, #12
 8000bc0:	8abb      	ldrh	r3, [r7, #20]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fdcd 	bl	8001764 <throuple_can_tx>
		break;
 8000bca:	bf00      	nop
	}
	osDelay(20);
 8000bcc:	2014      	movs	r0, #20
 8000bce:	f004 f94f 	bl	8004e70 <osDelay>
	if (xQueueCANState != NULL){
 8000bd2:	e7c0      	b.n	8000b56 <can_tx_rear+0x16>
 8000bd4:	20000398 	.word	0x20000398

08000bd8 <can_tx_front>:
  }
}

void can_tx_front(void const * argument)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	uint8_t data[8];
	uint16_t id = 0x200;
 8000be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be4:	83bb      	strh	r3, [r7, #28]
  zone_state_e zone_state = NORMAL;
 8000be6:	2304      	movs	r3, #4
 8000be8:	77fb      	strb	r3, [r7, #31]
  zone_state_e zone_state_queue = NORMAL;
 8000bea:	2304      	movs	r3, #4
 8000bec:	74fb      	strb	r3, [r7, #19]
  static uint16_t servo_current;
  static uint16_t servo_pot;
  adc_msg adc_reading;
  for(;;)
  {
	if (xQueueCANState != NULL){
 8000bee:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <can_tx_front+0xe4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00c      	beq.n	8000c10 <can_tx_front+0x38>
		if (xQueueReceive(xQueueCANState, &zone_state_queue, ( TickType_t ) 0) == pdPASS){
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <can_tx_front+0xe4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f107 0113 	add.w	r1, r7, #19
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 fc55 	bl	80054b0 <xQueueReceive>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d101      	bne.n	8000c10 <can_tx_front+0x38>
			zone_state = zone_state_queue;
 8000c0c:	7cfb      	ldrb	r3, [r7, #19]
 8000c0e:	77fb      	strb	r3, [r7, #31]
		}
	}
	if (xQueueADC != NULL){
 8000c10:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <can_tx_front+0xe8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d010      	beq.n	8000c3a <can_tx_front+0x62>
		if (xQueueReceive(xQueueADC, &adc_reading, ( TickType_t ) 0) == pdPASS){
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <can_tx_front+0xe8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f107 010c 	add.w	r1, r7, #12
 8000c20:	2200      	movs	r2, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f004 fc44 	bl	80054b0 <xQueueReceive>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d105      	bne.n	8000c3a <can_tx_front+0x62>
			servo_current = adc_reading.current_reading;
 8000c2e:	89fa      	ldrh	r2, [r7, #14]
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <can_tx_front+0xec>)
 8000c32:	801a      	strh	r2, [r3, #0]
			servo_pot = adc_reading.pot_reading;
 8000c34:	89ba      	ldrh	r2, [r7, #12]
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <can_tx_front+0xf0>)
 8000c38:	801a      	strh	r2, [r3, #0]
		}
	}
	// fill in with data
	data[0] = (uint8_t)(servo_current >> 8);
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <can_tx_front+0xec>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	0a1b      	lsrs	r3, r3, #8
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	753b      	strb	r3, [r7, #20]
	data[1] = (uint8_t)(servo_current & 0xFF);
 8000c46:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <can_tx_front+0xec>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	757b      	strb	r3, [r7, #21]
	data[2] = (uint8_t)(servo_pot >> 8);
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <can_tx_front+0xf0>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	0a1b      	lsrs	r3, r3, #8
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	75bb      	strb	r3, [r7, #22]
	data[3] = (uint8_t)(servo_pot & 0xFF);
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <can_tx_front+0xf0>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	75fb      	strb	r3, [r7, #23]

	switch(zone_state){
 8000c62:	7ffb      	ldrb	r3, [r7, #31]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d824      	bhi.n	8000cb4 <can_tx_front+0xdc>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <can_tx_front+0x98>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000cb5 	.word	0x08000cb5
 8000c74:	08000cb5 	.word	0x08000cb5
 8000c78:	08000ca5 	.word	0x08000ca5
 8000c7c:	08000c85 	.word	0x08000c85
 8000c80:	08000c95 	.word	0x08000c95
	case NORMAL:
		throuple_can_tx(id, data);
 8000c84:	f107 0214 	add.w	r2, r7, #20
 8000c88:	8bbb      	ldrh	r3, [r7, #28]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fd69 	bl	8001764 <throuple_can_tx>
		break;
 8000c92:	e00f      	b.n	8000cb4 <can_tx_front+0xdc>
	case NORMAL_PUSHED:
		throuple_can_tx(id, data);
 8000c94:	f107 0214 	add.w	r2, r7, #20
 8000c98:	8bbb      	ldrh	r3, [r7, #28]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fd61 	bl	8001764 <throuple_can_tx>
		break;
 8000ca2:	e007      	b.n	8000cb4 <can_tx_front+0xdc>
	case ERROR_BUTTON:
		break;
	case ERROR_BUTTON_RELEASED:
		break;
	case ERROR_HB:
		throuple_can_tx(id, data);
 8000ca4:	f107 0214 	add.w	r2, r7, #20
 8000ca8:	8bbb      	ldrh	r3, [r7, #28]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fd59 	bl	8001764 <throuple_can_tx>
		break;
 8000cb2:	bf00      	nop
	}
	osDelay(20);
 8000cb4:	2014      	movs	r0, #20
 8000cb6:	f004 f8db 	bl	8004e70 <osDelay>
	if (xQueueCANState != NULL){
 8000cba:	e798      	b.n	8000bee <can_tx_front+0x16>
 8000cbc:	20000398 	.word	0x20000398
 8000cc0:	2000039c 	.word	0x2000039c
 8000cc4:	200003a0 	.word	0x200003a0
 8000cc8:	200003a2 	.word	0x200003a2

08000ccc <motor_control>:
  }
}

void motor_control(zone_state_e state) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	pi_motor_command motor_command;
	motor_direction dir;
	uint8_t speed;
	// Receive CAN
	if (xQueueMotor != NULL){
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <motor_control+0x84>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d02b      	beq.n	8000d36 <motor_control+0x6a>
		if (xQueueReceive(xQueueMotor, &motor_command, ( TickType_t ) 0)){
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <motor_control+0x84>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f107 010c 	add.w	r1, r7, #12
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 fbe1 	bl	80054b0 <xQueueReceive>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d020      	beq.n	8000d36 <motor_control+0x6a>
			// Received motor message
			if (motor_command.brake!= 0){
 8000cf4:	7b3b      	ldrb	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d004      	beq.n	8000d04 <motor_control+0x38>
				dir = BRAKE;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	73fb      	strb	r3, [r7, #15]
				speed = motor_command.brake;
 8000cfe:	7b3b      	ldrb	r3, [r7, #12]
 8000d00:	73bb      	strb	r3, [r7, #14]
 8000d02:	e003      	b.n	8000d0c <motor_control+0x40>
			}
			else {
				dir = FORWARD;
 8000d04:	2301      	movs	r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
				speed = motor_command.throttle;
 8000d08:	7b7b      	ldrb	r3, [r7, #13]
 8000d0a:	73bb      	strb	r3, [r7, #14]
			}
			// Adjust motor speed
			if (state == NORMAL || state == NORMAL_PUSHED){
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	d002      	beq.n	8000d18 <motor_control+0x4c>
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2b05      	cmp	r3, #5
 8000d16:	d10e      	bne.n	8000d36 <motor_control+0x6a>
				if (dir == FORWARD){
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d104      	bne.n	8000d28 <motor_control+0x5c>
					set_drive_speed(speed);
 8000d1e:	7bbb      	ldrb	r3, [r7, #14]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f96b 	bl	8000ffc <set_drive_speed>
 8000d26:	e006      	b.n	8000d36 <motor_control+0x6a>
				}
				else if (dir == BRAKE){
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	d103      	bne.n	8000d36 <motor_control+0x6a>
					set_brake_speed(speed);
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f971 	bl	8001018 <set_brake_speed>
				}
			}
		}
	}
	if (!(state == NORMAL || state == NORMAL_PUSHED)){
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d005      	beq.n	8000d48 <motor_control+0x7c>
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b05      	cmp	r3, #5
 8000d40:	d002      	beq.n	8000d48 <motor_control+0x7c>
		set_brake_speed(100);
 8000d42:	2064      	movs	r0, #100	; 0x64
 8000d44:	f000 f968 	bl	8001018 <set_brake_speed>
	}
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000038c 	.word	0x2000038c

08000d54 <motor_controller>:

// Motor Controller Task
void motor_controller(void const * argument){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	motor_init();
 8000d5c:	f000 f8f9 	bl	8000f52 <motor_init>
	zone_state_e zone_state_queue = NORMAL;
 8000d60:	2304      	movs	r3, #4
 8000d62:	73bb      	strb	r3, [r7, #14]
	zone_state_e zone_state = NORMAL;
 8000d64:	2304      	movs	r3, #4
 8000d66:	73fb      	strb	r3, [r7, #15]

	for(;;){
		// Receive State
		if (xQueueMotorState != NULL){
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <motor_controller+0x48>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00c      	beq.n	8000d8a <motor_controller+0x36>
			if (xQueueReceive(xQueueMotorState, &zone_state_queue, ( TickType_t ) 0) == pdPASS){
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <motor_controller+0x48>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f107 010e 	add.w	r1, r7, #14
 8000d78:	2200      	movs	r2, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f004 fb98 	bl	80054b0 <xQueueReceive>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d101      	bne.n	8000d8a <motor_controller+0x36>
				zone_state = zone_state_queue;
 8000d86:	7bbb      	ldrb	r3, [r7, #14]
 8000d88:	73fb      	strb	r3, [r7, #15]
			}
		}
		motor_control(zone_state);
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff9d 	bl	8000ccc <motor_control>

		osDelay(10);
 8000d92:	200a      	movs	r0, #10
 8000d94:	f004 f86c 	bl	8004e70 <osDelay>
		if (xQueueMotorState != NULL){
 8000d98:	e7e6      	b.n	8000d68 <motor_controller+0x14>
 8000d9a:	bf00      	nop
 8000d9c:	20000394 	.word	0x20000394

08000da0 <steering_task>:
	}
}

// Steering Angle Task
void steering_task(void const * argument){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	uint8_t steering_angle;
	uint8_t steering_angle_queue;
	for(;;){
		// Receive State
		if (xQueueSteering != NULL){
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <steering_task+0x3c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d00c      	beq.n	8000dca <steering_task+0x2a>
			if (xQueueReceive(xQueueSteering, &steering_angle_queue, ( TickType_t ) 0) == pdPASS){
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <steering_task+0x3c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f107 010e 	add.w	r1, r7, #14
 8000db8:	2200      	movs	r2, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f004 fb78 	bl	80054b0 <xQueueReceive>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d101      	bne.n	8000dca <steering_task+0x2a>
				steering_angle = steering_angle_queue;
 8000dc6:	7bbb      	ldrb	r3, [r7, #14]
 8000dc8:	73fb      	strb	r3, [r7, #15]
			}
		}
		set_servo_pos(steering_angle);
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff f9c5 	bl	800015c <set_servo_pos>
		osDelay(10);
 8000dd2:	200a      	movs	r0, #10
 8000dd4:	f004 f84c 	bl	8004e70 <osDelay>
		if (xQueueSteering != NULL){
 8000dd8:	e7e6      	b.n	8000da8 <steering_task+0x8>
 8000dda:	bf00      	nop
 8000ddc:	20000390 	.word	0x20000390

08000de0 <self_test>:
	}
}

// Self-Test Button Task
void self_test(void const * argument){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	zone_state_e zone_state = NORMAL;
 8000de8:	2304      	movs	r3, #4
 8000dea:	733b      	strb	r3, [r7, #12]
	uint8_t button_debounce = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]
	uint8_t button_state = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73bb      	strb	r3, [r7, #14]

	xQueueMotorState = xQueueCreate( 10,sizeof(zone_state_e));
 8000df4:	2200      	movs	r2, #0
 8000df6:	2101      	movs	r1, #1
 8000df8:	200a      	movs	r0, #10
 8000dfa:	f004 f965 	bl	80050c8 <xQueueGenericCreate>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a44      	ldr	r2, [pc, #272]	; (8000f14 <self_test+0x134>)
 8000e02:	6013      	str	r3, [r2, #0]
	xQueueCANState = xQueueCreate( 10,sizeof(zone_state_e));
 8000e04:	2200      	movs	r2, #0
 8000e06:	2101      	movs	r1, #1
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f004 f95d 	bl	80050c8 <xQueueGenericCreate>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a41      	ldr	r2, [pc, #260]	; (8000f18 <self_test+0x138>)
 8000e12:	6013      	str	r3, [r2, #0]


	for (;;){
		GPIO_PinState button = HAL_GPIO_ReadPin(BUTTON_GPIO_Port,BUTTON_Pin);
 8000e14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e18:	4840      	ldr	r0, [pc, #256]	; (8000f1c <self_test+0x13c>)
 8000e1a:	f002 fa11 	bl	8003240 <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	737b      	strb	r3, [r7, #13]
		// debounce button
		if (button == GPIO_PIN_SET){
 8000e22:	7b7b      	ldrb	r3, [r7, #13]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d107      	bne.n	8000e38 <self_test+0x58>
			button_debounce = (button_debounce << 1) | 1;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	e002      	b.n	8000e3e <self_test+0x5e>
		}
		else {
			button_debounce = button_debounce << 1;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
		}
		if (button_debounce == 0xFF && button_state == 0){
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	2bff      	cmp	r3, #255	; 0xff
 8000e42:	d105      	bne.n	8000e50 <self_test+0x70>
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d102      	bne.n	8000e50 <self_test+0x70>
			button_state = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73bb      	strb	r3, [r7, #14]
 8000e4e:	e007      	b.n	8000e60 <self_test+0x80>
		}
		else if (button_debounce == 0 && button_state == 1){
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d104      	bne.n	8000e60 <self_test+0x80>
 8000e56:	7bbb      	ldrb	r3, [r7, #14]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <self_test+0x80>
			button_state = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73bb      	strb	r3, [r7, #14]
		}
		switch (zone_state) {
 8000e60:	7b3b      	ldrb	r3, [r7, #12]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d840      	bhi.n	8000eea <self_test+0x10a>
 8000e68:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <self_test+0x90>)
 8000e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6e:	bf00      	nop
 8000e70:	08000eb1 	.word	0x08000eb1
 8000e74:	08000ec7 	.word	0x08000ec7
 8000e78:	08000eeb 	.word	0x08000eeb
 8000e7c:	08000e85 	.word	0x08000e85
 8000e80:	08000e9b 	.word	0x08000e9b
			case NORMAL:
				if (button_state == 1) {
 8000e84:	7bbb      	ldrb	r3, [r7, #14]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d128      	bne.n	8000edc <self_test+0xfc>
					HAL_GPIO_WritePin(MCU_IND_GPIO_Port,MCU_IND_Pin,GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	4824      	ldr	r0, [pc, #144]	; (8000f20 <self_test+0x140>)
 8000e90:	f002 f9ed 	bl	800326e <HAL_GPIO_WritePin>
					zone_state = ERROR_BUTTON;
 8000e94:	2301      	movs	r3, #1
 8000e96:	733b      	strb	r3, [r7, #12]
				}
				break;
 8000e98:	e020      	b.n	8000edc <self_test+0xfc>
			case NORMAL_PUSHED:
				if (button_state == 0){
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d11f      	bne.n	8000ee0 <self_test+0x100>
					zone_state = NORMAL;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	733b      	strb	r3, [r7, #12]
					HAL_GPIO_WritePin(MCU_IND_GPIO_Port,MCU_IND_Pin,GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	481d      	ldr	r0, [pc, #116]	; (8000f20 <self_test+0x140>)
 8000eaa:	f002 f9e0 	bl	800326e <HAL_GPIO_WritePin>
				}
				break;
 8000eae:	e017      	b.n	8000ee0 <self_test+0x100>
			case ERROR_BUTTON:
				if (button_state == 0) {
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d116      	bne.n	8000ee4 <self_test+0x104>
					zone_state = ERROR_BUTTON_RELEASED;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	733b      	strb	r3, [r7, #12]
					HAL_GPIO_WritePin(MCU_IND_GPIO_Port,MCU_IND_Pin,GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	4818      	ldr	r0, [pc, #96]	; (8000f20 <self_test+0x140>)
 8000ec0:	f002 f9d5 	bl	800326e <HAL_GPIO_WritePin>
				}
				break;
 8000ec4:	e00e      	b.n	8000ee4 <self_test+0x104>
			case ERROR_BUTTON_RELEASED:
				if (button_state == 1){
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d10d      	bne.n	8000ee8 <self_test+0x108>
					zone_state = NORMAL_PUSHED;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	733b      	strb	r3, [r7, #12]
					HAL_GPIO_WritePin(MCU_IND_GPIO_Port,MCU_IND_Pin,GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4812      	ldr	r0, [pc, #72]	; (8000f20 <self_test+0x140>)
 8000ed6:	f002 f9ca 	bl	800326e <HAL_GPIO_WritePin>
				}
				break;
 8000eda:	e005      	b.n	8000ee8 <self_test+0x108>
				break;
 8000edc:	bf00      	nop
 8000ede:	e004      	b.n	8000eea <self_test+0x10a>
				break;
 8000ee0:	bf00      	nop
 8000ee2:	e002      	b.n	8000eea <self_test+0x10a>
				break;
 8000ee4:	bf00      	nop
 8000ee6:	e000      	b.n	8000eea <self_test+0x10a>
				break;
 8000ee8:	bf00      	nop
		}
		xQueueSend(xQueueMotorState, &zone_state,( TickType_t ) 10);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <self_test+0x134>)
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	f107 010c 	add.w	r1, r7, #12
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	220a      	movs	r2, #10
 8000ef6:	f004 f945 	bl	8005184 <xQueueGenericSend>
		xQueueSend(xQueueCANState, &zone_state,( TickType_t ) 10);
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <self_test+0x138>)
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	f107 010c 	add.w	r1, r7, #12
 8000f02:	2300      	movs	r3, #0
 8000f04:	220a      	movs	r2, #10
 8000f06:	f004 f93d 	bl	8005184 <xQueueGenericSend>
		osDelay(10);
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f003 ffb0 	bl	8004e70 <osDelay>
	for (;;){
 8000f10:	e780      	b.n	8000e14 <self_test+0x34>
 8000f12:	bf00      	nop
 8000f14:	20000394 	.word	0x20000394
 8000f18:	20000398 	.word	0x20000398
 8000f1c:	40011000 	.word	0x40011000
 8000f20:	40010800 	.word	0x40010800

08000f24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f36:	f000 fc79 	bl	800182c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40012c00 	.word	0x40012c00

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>

08000f52 <motor_init>:

static TIM_HandleTypeDef htim2;
static void MX_TIM2_Init(void);
static void Error_Handler(void);

void motor_init(){
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 8000f56:	f000 f86d 	bl	8001034 <MX_TIM2_Init>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <set_motor_direction>:



// Sets the direction of the motor
void set_motor_direction(motor_direction direction){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	// Mosfet logic means output is filled (set => low output, reset => high output)
	switch(direction){
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d01e      	beq.n	8000fae <set_motor_direction+0x4e>
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	dc28      	bgt.n	8000fc6 <set_motor_direction+0x66>
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d002      	beq.n	8000f7e <set_motor_direction+0x1e>
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d00c      	beq.n	8000f96 <set_motor_direction+0x36>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
			break;
		default:
			(void)direction;
	}
}
 8000f7c:	e023      	b.n	8000fc6 <set_motor_direction+0x66>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2104      	movs	r1, #4
 8000f82:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <set_motor_direction+0x70>)
 8000f84:	f002 f973 	bl	800326e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <set_motor_direction+0x70>)
 8000f90:	f002 f96d 	bl	800326e <HAL_GPIO_WritePin>
			break;
 8000f94:	e017      	b.n	8000fc6 <set_motor_direction+0x66>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2104      	movs	r1, #4
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <set_motor_direction+0x70>)
 8000f9c:	f002 f967 	bl	800326e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa6:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <set_motor_direction+0x70>)
 8000fa8:	f002 f961 	bl	800326e <HAL_GPIO_WritePin>
			break;
 8000fac:	e00b      	b.n	8000fc6 <set_motor_direction+0x66>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <set_motor_direction+0x70>)
 8000fb4:	f002 f95b 	bl	800326e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbe:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <set_motor_direction+0x70>)
 8000fc0:	f002 f955 	bl	800326e <HAL_GPIO_WritePin>
			break;
 8000fc4:	bf00      	nop
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40010c00 	.word	0x40010c00

08000fd4 <set_motor_speed>:

// Set Speed of the motor
void set_motor_speed(uint32_t percent_speed){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	// Motor speed PWM 50 Hz 100 Ticks at 5000 Hz
	TIM2->CCR4 = 100-percent_speed;
 8000fdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
      	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000fe8:	210c      	movs	r1, #12
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <set_motor_speed+0x24>)
 8000fec:	f003 f80e 	bl	800400c <HAL_TIM_PWM_Start>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200003a4 	.word	0x200003a4

08000ffc <set_drive_speed>:

// Set Speed of motor in forward direction
void set_drive_speed(uint32_t percent_speed){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	set_motor_direction(FORWARD);
 8001004:	2001      	movs	r0, #1
 8001006:	f7ff ffab 	bl	8000f60 <set_motor_direction>
	set_motor_speed(percent_speed);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffe2 	bl	8000fd4 <set_motor_speed>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <set_brake_speed>:
	set_motor_direction(BACKWARD);
	set_motor_speed(percent_speed);
}

// Set Speed of motor in brake direction
void set_brake_speed(uint32_t percent_speed){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	set_motor_direction(BRAKE);
 8001020:	2004      	movs	r0, #4
 8001022:	f7ff ff9d 	bl	8000f60 <set_motor_direction>
	set_motor_speed(percent_speed);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffd4 	bl	8000fd4 <set_motor_speed>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <MX_TIM2_Init+0xe8>)
 8001066:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800106a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 800106c:	4b2b      	ldr	r3, [pc, #172]	; (800111c <MX_TIM2_Init+0xe8>)
 800106e:	f240 623f 	movw	r2, #1599	; 0x63f
 8001072:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <MX_TIM2_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <MX_TIM2_Init+0xe8>)
 800107c:	2263      	movs	r2, #99	; 0x63
 800107e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <MX_TIM2_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <MX_TIM2_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800108c:	4823      	ldr	r0, [pc, #140]	; (800111c <MX_TIM2_Init+0xe8>)
 800108e:	f002 fecb 	bl	8003e28 <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001098:	f000 f842 	bl	8001120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a6:	4619      	mov	r1, r3
 80010a8:	481c      	ldr	r0, [pc, #112]	; (800111c <MX_TIM2_Init+0xe8>)
 80010aa:	f003 fa7b 	bl	80045a4 <HAL_TIM_ConfigClockSource>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010b4:	f000 f834 	bl	8001120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010b8:	4818      	ldr	r0, [pc, #96]	; (800111c <MX_TIM2_Init+0xe8>)
 80010ba:	f002 ff57 	bl	8003f6c <HAL_TIM_PWM_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010c4:	f000 f82c 	bl	8001120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d0:	f107 0320 	add.w	r3, r7, #32
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	; (800111c <MX_TIM2_Init+0xe8>)
 80010d8:	f003 fdf0 	bl	8004cbc <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 f81d 	bl	8001120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e6:	2360      	movs	r3, #96	; 0x60
 80010e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	220c      	movs	r2, #12
 80010fa:	4619      	mov	r1, r3
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <MX_TIM2_Init+0xe8>)
 80010fe:	f003 f993 	bl	8004428 <HAL_TIM_PWM_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001108:	f000 f80a 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <MX_TIM2_Init+0xe8>)
 800110e:	f000 f943 	bl	8001398 <HAL_TIM_MspPostInit>

}
 8001112:	bf00      	nop
 8001114:	3738      	adds	r7, #56	; 0x38
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200003a4 	.word	0x200003a4

08001120 <Error_Handler>:

static void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	e7fe      	b.n	8001128 <Error_Handler+0x8>
	...

0800112c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_MspInit+0x68>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_MspInit+0x68>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6193      	str	r3, [r2, #24]
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_MspInit+0x68>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_MspInit+0x68>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_MspInit+0x68>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	61d3      	str	r3, [r2, #28]
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_MspInit+0x68>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	210f      	movs	r1, #15
 8001166:	f06f 0001 	mvn.w	r0, #1
 800116a:	f001 feba 	bl	8002ee2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_MspInit+0x6c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_MspInit+0x6c>)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	40010000 	.word	0x40010000

0800119c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a28      	ldr	r2, [pc, #160]	; (8001258 <HAL_ADC_MspInit+0xbc>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d122      	bne.n	8001202 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_ADC_MspInit+0xc0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a26      	ldr	r2, [pc, #152]	; (800125c <HAL_ADC_MspInit+0xc0>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_ADC_MspInit+0xc0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_ADC_MspInit+0xc0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a20      	ldr	r2, [pc, #128]	; (800125c <HAL_ADC_MspInit+0xc0>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <HAL_ADC_MspInit+0xc0>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = I_SENSE_Pin;
 80011ec:	2310      	movs	r3, #16
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f0:	2303      	movs	r3, #3
 80011f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SENSE_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0318 	add.w	r3, r7, #24
 80011f8:	4619      	mov	r1, r3
 80011fa:	4819      	ldr	r0, [pc, #100]	; (8001260 <HAL_ADC_MspInit+0xc4>)
 80011fc:	f001 fe9c 	bl	8002f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001200:	e026      	b.n	8001250 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_ADC_MspInit+0xc8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d121      	bne.n	8001250 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_ADC_MspInit+0xc0>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_ADC_MspInit+0xc0>)
 8001212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_ADC_MspInit+0xc0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_ADC_MspInit+0xc0>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <HAL_ADC_MspInit+0xc0>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_ADC_MspInit+0xc0>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 800123c:	2320      	movs	r3, #32
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001240:	2303      	movs	r3, #3
 8001242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4619      	mov	r1, r3
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <HAL_ADC_MspInit+0xc4>)
 800124c:	f001 fe74 	bl	8002f38 <HAL_GPIO_Init>
}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40012400 	.word	0x40012400
 800125c:	40021000 	.word	0x40021000
 8001260:	40010800 	.word	0x40010800
 8001264:	40012800 	.word	0x40012800

08001268 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a25      	ldr	r2, [pc, #148]	; (8001318 <HAL_CAN_MspInit+0xb0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d143      	bne.n	8001310 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <HAL_CAN_MspInit+0xb4>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	4a23      	ldr	r2, [pc, #140]	; (800131c <HAL_CAN_MspInit+0xb4>)
 800128e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001292:	61d3      	str	r3, [r2, #28]
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <HAL_CAN_MspInit+0xb4>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <HAL_CAN_MspInit+0xb4>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a1d      	ldr	r2, [pc, #116]	; (800131c <HAL_CAN_MspInit+0xb4>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_CAN_MspInit+0xb4>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4619      	mov	r1, r3
 80012d0:	4813      	ldr	r0, [pc, #76]	; (8001320 <HAL_CAN_MspInit+0xb8>)
 80012d2:	f001 fe31 	bl	8002f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <HAL_CAN_MspInit+0xb8>)
 80012ec:	f001 fe24 	bl	8002f38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2105      	movs	r1, #5
 80012f4:	2014      	movs	r0, #20
 80012f6:	f001 fdf4 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80012fa:	2014      	movs	r0, #20
 80012fc:	f001 fe0d 	bl	8002f1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2105      	movs	r1, #5
 8001304:	2015      	movs	r0, #21
 8001306:	f001 fdec 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800130a:	2015      	movs	r0, #21
 800130c:	f001 fe05 	bl	8002f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001310:	bf00      	nop
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40006400 	.word	0x40006400
 800131c:	40021000 	.word	0x40021000
 8001320:	40010800 	.word	0x40010800

08001324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001334:	d10b      	bne.n	800134e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_TIM_Base_MspInit+0x34>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_TIM_Base_MspInit+0x34>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_TIM_Base_MspInit+0x34>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_TIM_PWM_MspInit+0x34>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d10b      	bne.n	8001386 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_TIM_PWM_MspInit+0x38>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_TIM_PWM_MspInit+0x38>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_TIM_PWM_MspInit+0x38>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40000400 	.word	0x40000400
 8001394:	40021000 	.word	0x40021000

08001398 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b6:	d12b      	bne.n	8001410 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b32      	ldr	r3, [pc, #200]	; (8001484 <HAL_TIM_MspPostInit+0xec>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a31      	ldr	r2, [pc, #196]	; (8001484 <HAL_TIM_MspPostInit+0xec>)
 80013be:	f043 0308 	orr.w	r3, r3, #8
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <HAL_TIM_MspPostInit+0xec>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_EN_PWM_Pin;
 80013d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2302      	movs	r3, #2
 80013dc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MOTOR_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4828      	ldr	r0, [pc, #160]	; (8001488 <HAL_TIM_MspPostInit+0xf0>)
 80013e6:	f001 fda7 	bl	8002f38 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_TIM_MspPostInit+0xf4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
 8001408:	4a20      	ldr	r2, [pc, #128]	; (800148c <HAL_TIM_MspPostInit+0xf4>)
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800140e:	e034      	b.n	800147a <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1e      	ldr	r2, [pc, #120]	; (8001490 <HAL_TIM_MspPostInit+0xf8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d12f      	bne.n	800147a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <HAL_TIM_MspPostInit+0xec>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	4a19      	ldr	r2, [pc, #100]	; (8001484 <HAL_TIM_MspPostInit+0xec>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6193      	str	r3, [r2, #24]
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_TIM_MspPostInit+0xec>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_TIM_MspPostInit+0xec>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <HAL_TIM_MspPostInit+0xec>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6193      	str	r3, [r2, #24]
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_TIM_MspPostInit+0xec>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_BLINKER_Pin;
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2302      	movs	r3, #2
 8001454:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LEFT_BLINKER_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <HAL_TIM_MspPostInit+0xfc>)
 800145e:	f001 fd6b 	bl	8002f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RIGHT_BLINKER_Pin;
 8001462:	2302      	movs	r3, #2
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2302      	movs	r3, #2
 800146c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RIGHT_BLINKER_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <HAL_TIM_MspPostInit+0xf0>)
 8001476:	f001 fd5f 	bl	8002f38 <HAL_GPIO_Init>
}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	40010c00 	.word	0x40010c00
 800148c:	40010000 	.word	0x40010000
 8001490:	40000400 	.word	0x40000400
 8001494:	40010800 	.word	0x40010800

08001498 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	; 0x30
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <HAL_InitTick+0xd0>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <HAL_InitTick+0xd0>)
 80014b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_InitTick+0xd0>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014c6:	f107 020c 	add.w	r2, r7, #12
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fae5 	bl	8003aa0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014d6:	f002 facf 	bl	8003a78 <HAL_RCC_GetPCLK2Freq>
 80014da:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <HAL_InitTick+0xd4>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9b      	lsrs	r3, r3, #18
 80014e6:	3b01      	subs	r3, #1
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_InitTick+0xd8>)
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <HAL_InitTick+0xdc>)
 80014ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_InitTick+0xd8>)
 80014f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014f8:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_InitTick+0xd8>)
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_InitTick+0xd8>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_InitTick+0xd8>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_InitTick+0xd8>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001510:	4817      	ldr	r0, [pc, #92]	; (8001570 <HAL_InitTick+0xd8>)
 8001512:	f002 fc89 	bl	8003e28 <HAL_TIM_Base_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800151c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001520:	2b00      	cmp	r3, #0
 8001522:	d11b      	bne.n	800155c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001524:	4812      	ldr	r0, [pc, #72]	; (8001570 <HAL_InitTick+0xd8>)
 8001526:	f002 fccf 	bl	8003ec8 <HAL_TIM_Base_Start_IT>
 800152a:	4603      	mov	r3, r0
 800152c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001534:	2b00      	cmp	r3, #0
 8001536:	d111      	bne.n	800155c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001538:	2019      	movs	r0, #25
 800153a:	f001 fcee 	bl	8002f1a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d808      	bhi.n	8001556 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	2019      	movs	r0, #25
 800154a:	f001 fcca 	bl	8002ee2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_InitTick+0xe0>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e002      	b.n	800155c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800155c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001560:	4618      	mov	r0, r3
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000
 800156c:	431bde83 	.word	0x431bde83
 8001570:	200003ec 	.word	0x200003ec
 8001574:	40012c00 	.word	0x40012c00
 8001578:	20000004 	.word	0x20000004

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler+0x4>

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <MemManage_Handler+0x4>

0800158e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <UsageFault_Handler+0x4>

0800159a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
	...

080015a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80015ae:	f001 f9c0 	bl	8002932 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000434 	.word	0x20000434

080015bc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <CAN1_RX1_IRQHandler+0x10>)
 80015c2:	f001 f9b6 	bl	8002932 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000434 	.word	0x20000434

080015d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <TIM1_UP_IRQHandler+0x10>)
 80015d6:	f002 fe1f 	bl	8004218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200003ec 	.word	0x200003ec

080015e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <can_init>:
CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;

QueueHandle_t xQueueCANRx;

void can_init(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	MX_CAN_Init();
 80015f4:	f000 f84c 	bl	8001690 <MX_CAN_Init>
	xQueueCANRx = xQueueCreate( 10,sizeof(can_msg_t));
 80015f8:	2200      	movs	r2, #0
 80015fa:	210a      	movs	r1, #10
 80015fc:	200a      	movs	r0, #10
 80015fe:	f003 fd63 	bl	80050c8 <xQueueGenericCreate>
 8001602:	4603      	mov	r3, r0
 8001604:	4a01      	ldr	r2, [pc, #4]	; (800160c <can_init+0x1c>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000049c 	.word	0x2000049c

08001610 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Interrupt Handler for receiving a can message.
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800161a:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800161c:	2100      	movs	r1, #0
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f001 f851 	bl	80026c6 <HAL_CAN_GetRxMessage>
	can_msg_t msg;
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
	if (RxHeader.DLC !=0)
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d024      	beq.n	800167a <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
	{
		msg.id = RxHeader.StdId;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	b29b      	uxth	r3, r3
 8001636:	823b      	strh	r3, [r7, #16]
		memcpy(msg.msg, RxData, 8);
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800163a:	f107 0212 	add.w	r2, r7, #18
 800163e:	cb03      	ldmia	r3!, {r0, r1}
 8001640:	6010      	str	r0, [r2, #0]
 8001642:	6051      	str	r1, [r2, #4]
		if (msg.id == 0x100){
 8001644:	8a3b      	ldrh	r3, [r7, #16]
 8001646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800164a:	d107      	bne.n	800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			 set_blinkers(msg.msg[3],msg.msg[4],msg.msg[5]);
 800164c:	7d7b      	ldrb	r3, [r7, #21]
 800164e:	4618      	mov	r0, r3
 8001650:	7dbb      	ldrb	r3, [r7, #22]
 8001652:	4619      	mov	r1, r3
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	461a      	mov	r2, r3
 8001658:	f7fe ff42 	bl	80004e0 <set_blinkers>
		}
		BaseType_t res = xQueueSendFromISR(xQueueCANRx,(void * )&msg, &xHigherPriorityTaskWoken );
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	f107 020c 	add.w	r2, r7, #12
 8001664:	f107 0110 	add.w	r1, r7, #16
 8001668:	2300      	movs	r3, #0
 800166a:	f003 fe89 	bl	8005380 <xQueueGenericSendFromISR>
 800166e:	61f8      	str	r0, [r7, #28]
		if (res == pdTRUE){
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
			res = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
	if( xHigherPriorityTaskWoken )
	{
	        /* Actual macro used here is port specific. */

	}
}
 800167a:	bf00      	nop
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000460 	.word	0x20000460
 8001688:	20000480 	.word	0x20000480
 800168c:	2000049c 	.word	0x2000049c

08001690 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <MX_CAN_Init+0xcc>)
 8001698:	4a31      	ldr	r2, [pc, #196]	; (8001760 <MX_CAN_Init+0xd0>)
 800169a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <MX_CAN_Init+0xcc>)
 800169e:	2204      	movs	r2, #4
 80016a0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <MX_CAN_Init+0xcc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016a8:	4b2c      	ldr	r3, [pc, #176]	; (800175c <MX_CAN_Init+0xcc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80016ae:	4b2b      	ldr	r3, [pc, #172]	; (800175c <MX_CAN_Init+0xcc>)
 80016b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016b6:	4b29      	ldr	r3, [pc, #164]	; (800175c <MX_CAN_Init+0xcc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <MX_CAN_Init+0xcc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <MX_CAN_Init+0xcc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <MX_CAN_Init+0xcc>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <MX_CAN_Init+0xcc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <MX_CAN_Init+0xcc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <MX_CAN_Init+0xcc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80016e0:	481e      	ldr	r0, [pc, #120]	; (800175c <MX_CAN_Init+0xcc>)
 80016e2:	f000 fd0e 	bl	8002102 <HAL_CAN_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80016ec:	f000 f85c 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80016f0:	2301      	movs	r3, #1
 80016f2:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x200<<5;
 80016fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001700:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x100<<5;
 8001706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170a:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001710:	2301      	movs	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;  // doesn't matter in single can controllers
 8001718:	230e      	movs	r3, #14
 800171a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig)!= HAL_OK){
 800171c:	463b      	mov	r3, r7
 800171e:	4619      	mov	r1, r3
 8001720:	480e      	ldr	r0, [pc, #56]	; (800175c <MX_CAN_Init+0xcc>)
 8001722:	f000 fde9 	bl	80022f8 <HAL_CAN_ConfigFilter>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_CAN_Init+0xa0>
		// Filter Config Error
		Error_Handler();
 800172c:	f000 f83c 	bl	80017a8 <Error_Handler>
	}

	// Start CAN
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 8001730:	480a      	ldr	r0, [pc, #40]	; (800175c <MX_CAN_Init+0xcc>)
 8001732:	f000 feaa 	bl	800248a <HAL_CAN_Start>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_CAN_Init+0xb0>
	{
	  /* Start Error */
	  Error_Handler();
 800173c:	f000 f834 	bl	80017a8 <Error_Handler>
	}
	// Activate RX Notification
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK){
 8001740:	2102      	movs	r1, #2
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <MX_CAN_Init+0xcc>)
 8001744:	f001 f8d0 	bl	80028e8 <HAL_CAN_ActivateNotification>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_CAN_Init+0xc2>
		// Notification Error
		Error_Handler();
 800174e:	f000 f82b 	bl	80017a8 <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */
}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000434 	.word	0x20000434
 8001760:	40006400 	.word	0x40006400

08001764 <throuple_can_tx>:


CAN_TxHeaderTypeDef	TxHeader;
uint32_t TxMailbox;
uint8_t real_data[8];
void throuple_can_tx(uint16_t id, uint8_t * data){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	80fb      	strh	r3, [r7, #6]

	TxHeader.DLC = 8;
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <throuple_can_tx+0x38>)
 8001772:	2208      	movs	r2, #8
 8001774:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <throuple_can_tx+0x38>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <throuple_can_tx+0x38>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = id;
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	4a05      	ldr	r2, [pc, #20]	; (800179c <throuple_can_tx+0x38>)
 8001786:	6013      	str	r3, [r2, #0]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox);
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <throuple_can_tx+0x3c>)
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	4903      	ldr	r1, [pc, #12]	; (800179c <throuple_can_tx+0x38>)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <throuple_can_tx+0x40>)
 8001790:	f000 febf 	bl	8002512 <HAL_CAN_AddTxMessage>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000468 	.word	0x20000468
 80017a0:	2000045c 	.word	0x2000045c
 80017a4:	20000434 	.word	0x20000434

080017a8 <Error_Handler>:


void Error_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
}
 80017ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <Error_Handler+0x8>
	...

080017b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017da:	f7ff ff03 	bl	80015e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017de:	f005 faed 	bl	8006dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017e2:	f7fe ff51 	bl	8000688 <main>
  bx lr
 80017e6:	4770      	bx	lr
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017f0:	08006fb8 	.word	0x08006fb8
  ldr r2, =_sbss
 80017f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017f8:	200011f0 	.word	0x200011f0

080017fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC1_2_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_Init+0x28>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_Init+0x28>)
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f001 fb5b 	bl	8002ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001816:	200f      	movs	r0, #15
 8001818:	f7ff fe3e 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800181c:	f7ff fc86 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_IncTick+0x1c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_IncTick+0x20>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a03      	ldr	r2, [pc, #12]	; (800184c <HAL_IncTick+0x20>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	20000008 	.word	0x20000008
 800184c:	200004a0 	.word	0x200004a0

08001850 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <HAL_GetTick+0x10>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	200004a0 	.word	0x200004a0

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff fff0 	bl	8001850 <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffe0 	bl	8001850 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008

080018ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0be      	b.n	8001a4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fc56 	bl	800119c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fbc5 	bl	8002080 <ADC_ConversionStop_Disable>
 80018f6:	4603      	mov	r3, r0
 80018f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 8099 	bne.w	8001a3a <HAL_ADC_Init+0x18e>
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8095 	bne.w	8001a3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001918:	f023 0302 	bic.w	r3, r3, #2
 800191c:	f043 0202 	orr.w	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800192c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7b1b      	ldrb	r3, [r3, #12]
 8001932:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001934:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	4313      	orrs	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001944:	d003      	beq.n	800194e <HAL_ADC_Init+0xa2>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d102      	bne.n	8001954 <HAL_ADC_Init+0xa8>
 800194e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001952:	e000      	b.n	8001956 <HAL_ADC_Init+0xaa>
 8001954:	2300      	movs	r3, #0
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7d1b      	ldrb	r3, [r3, #20]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d119      	bne.n	8001998 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7b1b      	ldrb	r3, [r3, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	3b01      	subs	r3, #1
 8001972:	035a      	lsls	r2, r3, #13
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	e00b      	b.n	8001998 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f043 0220 	orr.w	r2, r3, #32
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_ADC_Init+0x1a8>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	68b9      	ldr	r1, [r7, #8]
 80019bc:	430b      	orrs	r3, r1
 80019be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c8:	d003      	beq.n	80019d2 <HAL_ADC_Init+0x126>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d104      	bne.n	80019dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	051b      	lsls	r3, r3, #20
 80019da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_ADC_Init+0x1ac>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d10b      	bne.n	8001a18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	f023 0303 	bic.w	r3, r3, #3
 8001a0e:	f043 0201 	orr.w	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a16:	e018      	b.n	8001a4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	f023 0312 	bic.w	r3, r3, #18
 8001a20:	f043 0210 	orr.w	r2, r3, #16
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a38:	e007      	b.n	8001a4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	f043 0210 	orr.w	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	ffe1f7fd 	.word	0xffe1f7fd
 8001a58:	ff1f0efe 	.word	0xff1f0efe

08001a5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_Start+0x1a>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e098      	b.n	8001ba8 <HAL_ADC_Start+0x14c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 faa4 	bl	8001fcc <ADC_Enable>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 8087 	bne.w	8001b9e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a41      	ldr	r2, [pc, #260]	; (8001bb0 <HAL_ADC_Start+0x154>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d105      	bne.n	8001aba <HAL_ADC_Start+0x5e>
 8001aae:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <HAL_ADC_Start+0x158>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d115      	bne.n	8001ae6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d026      	beq.n	8001b22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001adc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ae4:	e01d      	b.n	8001b22 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2f      	ldr	r2, [pc, #188]	; (8001bb4 <HAL_ADC_Start+0x158>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d004      	beq.n	8001b06 <HAL_ADC_Start+0xaa>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <HAL_ADC_Start+0x154>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10d      	bne.n	8001b22 <HAL_ADC_Start+0xc6>
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_ADC_Start+0x158>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	f023 0206 	bic.w	r2, r3, #6
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b3a:	e002      	b.n	8001b42 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f06f 0202 	mvn.w	r2, #2
 8001b52:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b62:	d113      	bne.n	8001b8c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b68:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_ADC_Start+0x154>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d105      	bne.n	8001b7a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_ADC_Start+0x158>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d108      	bne.n	8001b8c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	e00c      	b.n	8001ba6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	e003      	b.n	8001ba6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40012800 	.word	0x40012800
 8001bb4:	40012400 	.word	0x40012400

08001bb8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bce:	f7ff fe3f 	bl	8001850 <HAL_GetTick>
 8001bd2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	f043 0220 	orr.w	r2, r3, #32
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0d3      	b.n	8001da2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d131      	bne.n	8001c6c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d12a      	bne.n	8001c6c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c16:	e021      	b.n	8001c5c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1e:	d01d      	beq.n	8001c5c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_ADC_PollForConversion+0x7e>
 8001c26:	f7ff fe13 	bl	8001850 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d212      	bcs.n	8001c5c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10b      	bne.n	8001c5c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	f043 0204 	orr.w	r2, r3, #4
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e0a2      	b.n	8001da2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0d6      	beq.n	8001c18 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c6a:	e070      	b.n	8001d4e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c6c:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <HAL_ADC_PollForConversion+0x1f4>)
 8001c6e:	681c      	ldr	r4, [r3, #0]
 8001c70:	2002      	movs	r0, #2
 8001c72:	f002 f819 	bl	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c76:	4603      	mov	r3, r0
 8001c78:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6919      	ldr	r1, [r3, #16]
 8001c82:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <HAL_ADC_PollForConversion+0x1f8>)
 8001c84:	400b      	ands	r3, r1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d118      	bne.n	8001cbc <HAL_ADC_PollForConversion+0x104>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68d9      	ldr	r1, [r3, #12]
 8001c90:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <HAL_ADC_PollForConversion+0x1fc>)
 8001c92:	400b      	ands	r3, r1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d111      	bne.n	8001cbc <HAL_ADC_PollForConversion+0x104>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6919      	ldr	r1, [r3, #16]
 8001c9e:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <HAL_ADC_PollForConversion+0x200>)
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d108      	bne.n	8001cb8 <HAL_ADC_PollForConversion+0x100>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68d9      	ldr	r1, [r3, #12]
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_ADC_PollForConversion+0x204>)
 8001cae:	400b      	ands	r3, r1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_ADC_PollForConversion+0x100>
 8001cb4:	2314      	movs	r3, #20
 8001cb6:	e020      	b.n	8001cfa <HAL_ADC_PollForConversion+0x142>
 8001cb8:	2329      	movs	r3, #41	; 0x29
 8001cba:	e01e      	b.n	8001cfa <HAL_ADC_PollForConversion+0x142>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6919      	ldr	r1, [r3, #16]
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_ADC_PollForConversion+0x200>)
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_ADC_PollForConversion+0x120>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68d9      	ldr	r1, [r3, #12]
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <HAL_ADC_PollForConversion+0x204>)
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_ADC_PollForConversion+0x13c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6919      	ldr	r1, [r3, #16]
 8001cde:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <HAL_ADC_PollForConversion+0x208>)
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d108      	bne.n	8001cf8 <HAL_ADC_PollForConversion+0x140>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68d9      	ldr	r1, [r3, #12]
 8001cec:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <HAL_ADC_PollForConversion+0x208>)
 8001cee:	400b      	ands	r3, r1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_PollForConversion+0x140>
 8001cf4:	2354      	movs	r3, #84	; 0x54
 8001cf6:	e000      	b.n	8001cfa <HAL_ADC_PollForConversion+0x142>
 8001cf8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d00:	e021      	b.n	8001d46 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d01a      	beq.n	8001d40 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_ADC_PollForConversion+0x168>
 8001d10:	f7ff fd9e 	bl	8001850 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d20f      	bcs.n	8001d40 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d90b      	bls.n	8001d40 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	f043 0204 	orr.w	r2, r3, #4
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e030      	b.n	8001da2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3301      	adds	r3, #1
 8001d44:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d8d9      	bhi.n	8001d02 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f06f 0212 	mvn.w	r2, #18
 8001d56:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d72:	d115      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d111      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	371c      	adds	r7, #28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000000 	.word	0x20000000
 8001db0:	24924924 	.word	0x24924924
 8001db4:	00924924 	.word	0x00924924
 8001db8:	12492492 	.word	0x12492492
 8001dbc:	00492492 	.word	0x00492492
 8001dc0:	00249249 	.word	0x00249249

08001dc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x20>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e0dc      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x1da>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b06      	cmp	r3, #6
 8001e0a:	d81c      	bhi.n	8001e46 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b05      	subs	r3, #5
 8001e1e:	221f      	movs	r2, #31
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4019      	ands	r1, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	3b05      	subs	r3, #5
 8001e38:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34
 8001e44:	e03c      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d81c      	bhi.n	8001e88 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b23      	subs	r3, #35	; 0x23
 8001e60:	221f      	movs	r2, #31
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	4019      	ands	r1, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	3b23      	subs	r3, #35	; 0x23
 8001e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
 8001e86:	e01b      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	3b41      	subs	r3, #65	; 0x41
 8001e9a:	221f      	movs	r2, #31
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	4019      	ands	r1, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b41      	subs	r3, #65	; 0x41
 8001eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	d91c      	bls.n	8001f02 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68d9      	ldr	r1, [r3, #12]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3b1e      	subs	r3, #30
 8001eda:	2207      	movs	r2, #7
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4019      	ands	r1, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6898      	ldr	r0, [r3, #8]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3b1e      	subs	r3, #30
 8001ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	e019      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6919      	ldr	r1, [r3, #16]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	2207      	movs	r2, #7
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	4019      	ands	r1, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6898      	ldr	r0, [r3, #8]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b10      	cmp	r3, #16
 8001f3c:	d003      	beq.n	8001f46 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f42:	2b11      	cmp	r3, #17
 8001f44:	d132      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d125      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d126      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f6c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d11a      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	0c9a      	lsrs	r2, r3, #18
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f9      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x1b2>
 8001f9a:	e007      	b.n	8001fac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f043 0220 	orr.w	r2, r3, #32
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	40012400 	.word	0x40012400
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	431bde83 	.word	0x431bde83

08001fcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d040      	beq.n	800206c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <ADC_Enable+0xac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	; (800207c <ADC_Enable+0xb0>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	0c9b      	lsrs	r3, r3, #18
 8002006:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002008:	e002      	b.n	8002010 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3b01      	subs	r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f9      	bne.n	800200a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002016:	f7ff fc1b 	bl	8001850 <HAL_GetTick>
 800201a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800201c:	e01f      	b.n	800205e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800201e:	f7ff fc17 	bl	8001850 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d918      	bls.n	800205e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d011      	beq.n	800205e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	f043 0210 	orr.w	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e007      	b.n	800206e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d1d8      	bne.n	800201e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000
 800207c:	431bde83 	.word	0x431bde83

08002080 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d12e      	bne.n	80020f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020aa:	f7ff fbd1 	bl	8001850 <HAL_GetTick>
 80020ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020b0:	e01b      	b.n	80020ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020b2:	f7ff fbcd 	bl	8001850 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d914      	bls.n	80020ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d10d      	bne.n	80020ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	f043 0210 	orr.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e007      	b.n	80020fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d0dc      	beq.n	80020b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0ed      	b.n	80022f0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff f8a1 	bl	8001268 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0201 	orr.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002136:	f7ff fb8b 	bl	8001850 <HAL_GetTick>
 800213a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800213c:	e012      	b.n	8002164 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800213e:	f7ff fb87 	bl	8001850 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b0a      	cmp	r3, #10
 800214a:	d90b      	bls.n	8002164 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2205      	movs	r2, #5
 800215c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0c5      	b.n	80022f0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0e5      	beq.n	800213e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0202 	bic.w	r2, r2, #2
 8002180:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002182:	f7ff fb65 	bl	8001850 <HAL_GetTick>
 8002186:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002188:	e012      	b.n	80021b0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800218a:	f7ff fb61 	bl	8001850 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b0a      	cmp	r3, #10
 8002196:	d90b      	bls.n	80021b0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2205      	movs	r2, #5
 80021a8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e09f      	b.n	80022f0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1e5      	bne.n	800218a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7e1b      	ldrb	r3, [r3, #24]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d108      	bne.n	80021d8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e007      	b.n	80021e8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7e5b      	ldrb	r3, [r3, #25]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d108      	bne.n	8002202 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e007      	b.n	8002212 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7e9b      	ldrb	r3, [r3, #26]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d108      	bne.n	800222c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0220 	orr.w	r2, r2, #32
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e007      	b.n	800223c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0220 	bic.w	r2, r2, #32
 800223a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7edb      	ldrb	r3, [r3, #27]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d108      	bne.n	8002256 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0210 	bic.w	r2, r2, #16
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e007      	b.n	8002266 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0210 	orr.w	r2, r2, #16
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7f1b      	ldrb	r3, [r3, #28]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d108      	bne.n	8002280 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0208 	orr.w	r2, r2, #8
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e007      	b.n	8002290 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0208 	bic.w	r2, r2, #8
 800228e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7f5b      	ldrb	r3, [r3, #29]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d108      	bne.n	80022aa <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0204 	orr.w	r2, r2, #4
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e007      	b.n	80022ba <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0204 	bic.w	r2, r2, #4
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	ea42 0103 	orr.w	r1, r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	1e5a      	subs	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d003      	beq.n	800231e <HAL_CAN_ConfigFilter+0x26>
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b02      	cmp	r3, #2
 800231a:	f040 80aa 	bne.w	8002472 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2201      	movs	r2, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43db      	mvns	r3, r3
 8002348:	401a      	ands	r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d123      	bne.n	80023a0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	43db      	mvns	r3, r3
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800237a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3248      	adds	r2, #72	; 0x48
 8002380:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002394:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002396:	6979      	ldr	r1, [r7, #20]
 8002398:	3348      	adds	r3, #72	; 0x48
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d122      	bne.n	80023ee <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3248      	adds	r2, #72	; 0x48
 80023ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023e4:	6979      	ldr	r1, [r7, #20]
 80023e6:	3348      	adds	r3, #72	; 0x48
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	43db      	mvns	r3, r3
 8002400:	401a      	ands	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002408:	e007      	b.n	800241a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	431a      	orrs	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	43db      	mvns	r3, r3
 800242c:	401a      	ands	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002434:	e007      	b.n	8002446 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	431a      	orrs	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	431a      	orrs	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002464:	f023 0201 	bic.w	r2, r3, #1
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	e006      	b.n	8002480 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
  }
}
 8002480:	4618      	mov	r0, r3
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d12e      	bne.n	80024fc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2202      	movs	r2, #2
 80024a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0201 	bic.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024b6:	f7ff f9cb 	bl	8001850 <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024bc:	e012      	b.n	80024e4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024be:	f7ff f9c7 	bl	8001850 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b0a      	cmp	r3, #10
 80024ca:	d90b      	bls.n	80024e4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2205      	movs	r2, #5
 80024dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e012      	b.n	800250a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e5      	bne.n	80024be <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	e006      	b.n	800250a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002512:	b480      	push	{r7}
 8002514:	b089      	sub	sp, #36	; 0x24
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002526:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002530:	7ffb      	ldrb	r3, [r7, #31]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d003      	beq.n	800253e <HAL_CAN_AddTxMessage+0x2c>
 8002536:	7ffb      	ldrb	r3, [r7, #31]
 8002538:	2b02      	cmp	r3, #2
 800253a:	f040 80b8 	bne.w	80026ae <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800254e:	2b00      	cmp	r3, #0
 8002550:	d105      	bne.n	800255e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80a0 	beq.w	800269e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	0e1b      	lsrs	r3, r3, #24
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d907      	bls.n	800257e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e09e      	b.n	80026bc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800257e:	2201      	movs	r2, #1
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	409a      	lsls	r2, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10d      	bne.n	80025ac <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800259a:	68f9      	ldr	r1, [r7, #12]
 800259c:	6809      	ldr	r1, [r1, #0]
 800259e:	431a      	orrs	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3318      	adds	r3, #24
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	440b      	add	r3, r1
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e00f      	b.n	80025cc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025b6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025bc:	68f9      	ldr	r1, [r7, #12]
 80025be:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025c0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3318      	adds	r3, #24
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	440b      	add	r3, r1
 80025ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3318      	adds	r3, #24
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	440b      	add	r3, r1
 80025dc:	3304      	adds	r3, #4
 80025de:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	7d1b      	ldrb	r3, [r3, #20]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d111      	bne.n	800260c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3318      	adds	r3, #24
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	4413      	add	r3, r2
 80025f4:	3304      	adds	r3, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	6811      	ldr	r1, [r2, #0]
 80025fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3318      	adds	r3, #24
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	440b      	add	r3, r1
 8002608:	3304      	adds	r3, #4
 800260a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3307      	adds	r3, #7
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	061a      	lsls	r2, r3, #24
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3306      	adds	r3, #6
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3305      	adds	r3, #5
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	4313      	orrs	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	3204      	adds	r2, #4
 800262c:	7812      	ldrb	r2, [r2, #0]
 800262e:	4610      	mov	r0, r2
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	6811      	ldr	r1, [r2, #0]
 8002634:	ea43 0200 	orr.w	r2, r3, r0
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	440b      	add	r3, r1
 800263e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002642:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3303      	adds	r3, #3
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	061a      	lsls	r2, r3, #24
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3302      	adds	r3, #2
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3301      	adds	r3, #1
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	4313      	orrs	r3, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	4610      	mov	r0, r2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	6811      	ldr	r1, [r2, #0]
 800266a:	ea43 0200 	orr.w	r2, r3, r0
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	440b      	add	r3, r1
 8002674:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002678:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3318      	adds	r3, #24
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	4413      	add	r3, r2
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	6811      	ldr	r1, [r2, #0]
 800268c:	f043 0201 	orr.w	r2, r3, #1
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3318      	adds	r3, #24
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	440b      	add	r3, r1
 8002698:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e00e      	b.n	80026bc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e006      	b.n	80026bc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3724      	adds	r7, #36	; 0x24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80026c6:	b480      	push	{r7}
 80026c8:	b087      	sub	sp, #28
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d003      	beq.n	80026ea <HAL_CAN_GetRxMessage+0x24>
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	f040 80f3 	bne.w	80028d0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10e      	bne.n	800270e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0e7      	b.n	80028de <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0d8      	b.n	80028de <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	331b      	adds	r3, #27
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	4413      	add	r3, r2
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0204 	and.w	r2, r3, #4
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	331b      	adds	r3, #27
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	4413      	add	r3, r2
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0d5b      	lsrs	r3, r3, #21
 800275a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e00b      	b.n	800277c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	331b      	adds	r3, #27
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	4413      	add	r3, r2
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	08db      	lsrs	r3, r3, #3
 8002774:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	331b      	adds	r3, #27
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	4413      	add	r3, r2
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0202 	and.w	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	331b      	adds	r3, #27
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	4413      	add	r3, r2
 800279e:	3304      	adds	r3, #4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 020f 	and.w	r2, r3, #15
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	331b      	adds	r3, #27
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	4413      	add	r3, r2
 80027b6:	3304      	adds	r3, #4
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	331b      	adds	r3, #27
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	4413      	add	r3, r2
 80027ce:	3304      	adds	r3, #4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0c1b      	lsrs	r3, r3, #16
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	0a1a      	lsrs	r2, r3, #8
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	4413      	add	r3, r2
 8002814:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	0c1a      	lsrs	r2, r3, #16
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	3302      	adds	r3, #2
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4413      	add	r3, r2
 800282e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0e1a      	lsrs	r2, r3, #24
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	3303      	adds	r3, #3
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	4413      	add	r3, r2
 8002848:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	3304      	adds	r3, #4
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	4413      	add	r3, r2
 8002860:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0a1a      	lsrs	r2, r3, #8
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	3305      	adds	r3, #5
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	4413      	add	r3, r2
 800287a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0c1a      	lsrs	r2, r3, #16
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	3306      	adds	r3, #6
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	4413      	add	r3, r2
 8002894:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	0e1a      	lsrs	r2, r3, #24
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	3307      	adds	r3, #7
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d108      	bne.n	80028bc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0220 	orr.w	r2, r2, #32
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	e007      	b.n	80028cc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0220 	orr.w	r2, r2, #32
 80028ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e006      	b.n	80028de <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d002      	beq.n	8002906 <HAL_CAN_ActivateNotification+0x1e>
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d109      	bne.n	800291a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6959      	ldr	r1, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e006      	b.n	8002928 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
  }
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b08a      	sub	sp, #40	; 0x28
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d07c      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d023      	beq.n	80029ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2201      	movs	r2, #1
 8002988:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f983 	bl	8002ca0 <HAL_CAN_TxMailbox0CompleteCallback>
 800299a:	e016      	b.n	80029ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d004      	beq.n	80029b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
 80029ae:	e00c      	b.n	80029ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d004      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	e002      	b.n	80029ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f986 	bl	8002cd6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d024      	beq.n	8002a1e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f962 	bl	8002cb2 <HAL_CAN_TxMailbox1CompleteCallback>
 80029ee:	e016      	b.n	8002a1e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d004      	beq.n	8002a04 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
 8002a02:	e00c      	b.n	8002a1e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d004      	beq.n	8002a18 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
 8002a16:	e002      	b.n	8002a1e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f965 	bl	8002ce8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d024      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f941 	bl	8002cc4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002a42:	e016      	b.n	8002a72 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d004      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
 8002a56:	e00c      	b.n	8002a72 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6a:	e002      	b.n	8002a72 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f944 	bl	8002cfa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00c      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2210      	movs	r2, #16
 8002a94:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00b      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2208      	movs	r2, #8
 8002ab0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f92a 	bl	8002d0c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7fe fd9d 	bl	8001610 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00c      	beq.n	8002afa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2210      	movs	r2, #16
 8002af8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2208      	movs	r2, #8
 8002b14:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f90a 	bl	8002d30 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f8f2 	bl	8002d1e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2210      	movs	r2, #16
 8002b54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8f3 	bl	8002d42 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d006      	beq.n	8002b7e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2208      	movs	r2, #8
 8002b76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f8eb 	bl	8002d54 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d07b      	beq.n	8002c80 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d072      	beq.n	8002c78 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	f043 0304 	orr.w	r3, r3, #4
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d043      	beq.n	8002c78 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d03e      	beq.n	8002c78 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c00:	2b60      	cmp	r3, #96	; 0x60
 8002c02:	d02b      	beq.n	8002c5c <HAL_CAN_IRQHandler+0x32a>
 8002c04:	2b60      	cmp	r3, #96	; 0x60
 8002c06:	d82e      	bhi.n	8002c66 <HAL_CAN_IRQHandler+0x334>
 8002c08:	2b50      	cmp	r3, #80	; 0x50
 8002c0a:	d022      	beq.n	8002c52 <HAL_CAN_IRQHandler+0x320>
 8002c0c:	2b50      	cmp	r3, #80	; 0x50
 8002c0e:	d82a      	bhi.n	8002c66 <HAL_CAN_IRQHandler+0x334>
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	d019      	beq.n	8002c48 <HAL_CAN_IRQHandler+0x316>
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d826      	bhi.n	8002c66 <HAL_CAN_IRQHandler+0x334>
 8002c18:	2b30      	cmp	r3, #48	; 0x30
 8002c1a:	d010      	beq.n	8002c3e <HAL_CAN_IRQHandler+0x30c>
 8002c1c:	2b30      	cmp	r3, #48	; 0x30
 8002c1e:	d822      	bhi.n	8002c66 <HAL_CAN_IRQHandler+0x334>
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d002      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x2f8>
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d005      	beq.n	8002c34 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c28:	e01d      	b.n	8002c66 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	f043 0308 	orr.w	r3, r3, #8
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c32:	e019      	b.n	8002c68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	f043 0310 	orr.w	r3, r3, #16
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c3c:	e014      	b.n	8002c68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	f043 0320 	orr.w	r3, r3, #32
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c46:	e00f      	b.n	8002c68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c50:	e00a      	b.n	8002c68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c5a:	e005      	b.n	8002c68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c64:	e000      	b.n	8002c68 <HAL_CAN_IRQHandler+0x336>
            break;
 8002c66:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c76:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f867 	bl	8002d66 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d94:	4013      	ands	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002daa:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	60d3      	str	r3, [r2, #12]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	f003 0307 	and.w	r3, r3, #7
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	db0b      	blt.n	8002e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	f003 021f 	and.w	r2, r3, #31
 8002df4:	4906      	ldr	r1, [pc, #24]	; (8002e10 <__NVIC_EnableIRQ+0x34>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100

08002e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db0a      	blt.n	8002e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	490c      	ldr	r1, [pc, #48]	; (8002e60 <__NVIC_SetPriority+0x4c>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	440b      	add	r3, r1
 8002e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e3c:	e00a      	b.n	8002e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4908      	ldr	r1, [pc, #32]	; (8002e64 <__NVIC_SetPriority+0x50>)
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	3b04      	subs	r3, #4
 8002e4c:	0112      	lsls	r2, r2, #4
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	440b      	add	r3, r1
 8002e52:	761a      	strb	r2, [r3, #24]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000e100 	.word	0xe000e100
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f1c3 0307 	rsb	r3, r3, #7
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	bf28      	it	cs
 8002e86:	2304      	movcs	r3, #4
 8002e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d902      	bls.n	8002e98 <NVIC_EncodePriority+0x30>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3b03      	subs	r3, #3
 8002e96:	e000      	b.n	8002e9a <NVIC_EncodePriority+0x32>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	43d9      	mvns	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	4313      	orrs	r3, r2
         );
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3724      	adds	r7, #36	; 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff4f 	bl	8002d78 <__NVIC_SetPriorityGrouping>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef4:	f7ff ff64 	bl	8002dc0 <__NVIC_GetPriorityGrouping>
 8002ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	6978      	ldr	r0, [r7, #20]
 8002f00:	f7ff ffb2 	bl	8002e68 <NVIC_EncodePriority>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff81 	bl	8002e14 <__NVIC_SetPriority>
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff57 	bl	8002ddc <__NVIC_EnableIRQ>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b08b      	sub	sp, #44	; 0x2c
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f42:	2300      	movs	r3, #0
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f46:	2300      	movs	r3, #0
 8002f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4a:	e169      	b.n	8003220 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f040 8158 	bne.w	800321a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a9a      	ldr	r2, [pc, #616]	; (80031d8 <HAL_GPIO_Init+0x2a0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d05e      	beq.n	8003032 <HAL_GPIO_Init+0xfa>
 8002f74:	4a98      	ldr	r2, [pc, #608]	; (80031d8 <HAL_GPIO_Init+0x2a0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d875      	bhi.n	8003066 <HAL_GPIO_Init+0x12e>
 8002f7a:	4a98      	ldr	r2, [pc, #608]	; (80031dc <HAL_GPIO_Init+0x2a4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d058      	beq.n	8003032 <HAL_GPIO_Init+0xfa>
 8002f80:	4a96      	ldr	r2, [pc, #600]	; (80031dc <HAL_GPIO_Init+0x2a4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d86f      	bhi.n	8003066 <HAL_GPIO_Init+0x12e>
 8002f86:	4a96      	ldr	r2, [pc, #600]	; (80031e0 <HAL_GPIO_Init+0x2a8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d052      	beq.n	8003032 <HAL_GPIO_Init+0xfa>
 8002f8c:	4a94      	ldr	r2, [pc, #592]	; (80031e0 <HAL_GPIO_Init+0x2a8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d869      	bhi.n	8003066 <HAL_GPIO_Init+0x12e>
 8002f92:	4a94      	ldr	r2, [pc, #592]	; (80031e4 <HAL_GPIO_Init+0x2ac>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d04c      	beq.n	8003032 <HAL_GPIO_Init+0xfa>
 8002f98:	4a92      	ldr	r2, [pc, #584]	; (80031e4 <HAL_GPIO_Init+0x2ac>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d863      	bhi.n	8003066 <HAL_GPIO_Init+0x12e>
 8002f9e:	4a92      	ldr	r2, [pc, #584]	; (80031e8 <HAL_GPIO_Init+0x2b0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d046      	beq.n	8003032 <HAL_GPIO_Init+0xfa>
 8002fa4:	4a90      	ldr	r2, [pc, #576]	; (80031e8 <HAL_GPIO_Init+0x2b0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d85d      	bhi.n	8003066 <HAL_GPIO_Init+0x12e>
 8002faa:	2b12      	cmp	r3, #18
 8002fac:	d82a      	bhi.n	8003004 <HAL_GPIO_Init+0xcc>
 8002fae:	2b12      	cmp	r3, #18
 8002fb0:	d859      	bhi.n	8003066 <HAL_GPIO_Init+0x12e>
 8002fb2:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <HAL_GPIO_Init+0x80>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08003033 	.word	0x08003033
 8002fbc:	0800300d 	.word	0x0800300d
 8002fc0:	0800301f 	.word	0x0800301f
 8002fc4:	08003061 	.word	0x08003061
 8002fc8:	08003067 	.word	0x08003067
 8002fcc:	08003067 	.word	0x08003067
 8002fd0:	08003067 	.word	0x08003067
 8002fd4:	08003067 	.word	0x08003067
 8002fd8:	08003067 	.word	0x08003067
 8002fdc:	08003067 	.word	0x08003067
 8002fe0:	08003067 	.word	0x08003067
 8002fe4:	08003067 	.word	0x08003067
 8002fe8:	08003067 	.word	0x08003067
 8002fec:	08003067 	.word	0x08003067
 8002ff0:	08003067 	.word	0x08003067
 8002ff4:	08003067 	.word	0x08003067
 8002ff8:	08003067 	.word	0x08003067
 8002ffc:	08003015 	.word	0x08003015
 8003000:	08003029 	.word	0x08003029
 8003004:	4a79      	ldr	r2, [pc, #484]	; (80031ec <HAL_GPIO_Init+0x2b4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800300a:	e02c      	b.n	8003066 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	623b      	str	r3, [r7, #32]
          break;
 8003012:	e029      	b.n	8003068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	3304      	adds	r3, #4
 800301a:	623b      	str	r3, [r7, #32]
          break;
 800301c:	e024      	b.n	8003068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	3308      	adds	r3, #8
 8003024:	623b      	str	r3, [r7, #32]
          break;
 8003026:	e01f      	b.n	8003068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	330c      	adds	r3, #12
 800302e:	623b      	str	r3, [r7, #32]
          break;
 8003030:	e01a      	b.n	8003068 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800303a:	2304      	movs	r3, #4
 800303c:	623b      	str	r3, [r7, #32]
          break;
 800303e:	e013      	b.n	8003068 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d105      	bne.n	8003054 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003048:	2308      	movs	r3, #8
 800304a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	611a      	str	r2, [r3, #16]
          break;
 8003052:	e009      	b.n	8003068 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003054:	2308      	movs	r3, #8
 8003056:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	615a      	str	r2, [r3, #20]
          break;
 800305e:	e003      	b.n	8003068 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003060:	2300      	movs	r3, #0
 8003062:	623b      	str	r3, [r7, #32]
          break;
 8003064:	e000      	b.n	8003068 <HAL_GPIO_Init+0x130>
          break;
 8003066:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2bff      	cmp	r3, #255	; 0xff
 800306c:	d801      	bhi.n	8003072 <HAL_GPIO_Init+0x13a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	e001      	b.n	8003076 <HAL_GPIO_Init+0x13e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2bff      	cmp	r3, #255	; 0xff
 800307c:	d802      	bhi.n	8003084 <HAL_GPIO_Init+0x14c>
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	e002      	b.n	800308a <HAL_GPIO_Init+0x152>
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	3b08      	subs	r3, #8
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	210f      	movs	r1, #15
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	401a      	ands	r2, r3
 800309c:	6a39      	ldr	r1, [r7, #32]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	431a      	orrs	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80b1 	beq.w	800321a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030b8:	4b4d      	ldr	r3, [pc, #308]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4a4c      	ldr	r2, [pc, #304]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	4b4a      	ldr	r3, [pc, #296]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030d0:	4a48      	ldr	r2, [pc, #288]	; (80031f4 <HAL_GPIO_Init+0x2bc>)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	3302      	adds	r3, #2
 80030d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	220f      	movs	r2, #15
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4013      	ands	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a40      	ldr	r2, [pc, #256]	; (80031f8 <HAL_GPIO_Init+0x2c0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d013      	beq.n	8003124 <HAL_GPIO_Init+0x1ec>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a3f      	ldr	r2, [pc, #252]	; (80031fc <HAL_GPIO_Init+0x2c4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00d      	beq.n	8003120 <HAL_GPIO_Init+0x1e8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3e      	ldr	r2, [pc, #248]	; (8003200 <HAL_GPIO_Init+0x2c8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <HAL_GPIO_Init+0x1e4>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3d      	ldr	r2, [pc, #244]	; (8003204 <HAL_GPIO_Init+0x2cc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d101      	bne.n	8003118 <HAL_GPIO_Init+0x1e0>
 8003114:	2303      	movs	r3, #3
 8003116:	e006      	b.n	8003126 <HAL_GPIO_Init+0x1ee>
 8003118:	2304      	movs	r3, #4
 800311a:	e004      	b.n	8003126 <HAL_GPIO_Init+0x1ee>
 800311c:	2302      	movs	r3, #2
 800311e:	e002      	b.n	8003126 <HAL_GPIO_Init+0x1ee>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_GPIO_Init+0x1ee>
 8003124:	2300      	movs	r3, #0
 8003126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003128:	f002 0203 	and.w	r2, r2, #3
 800312c:	0092      	lsls	r2, r2, #2
 800312e:	4093      	lsls	r3, r2
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003136:	492f      	ldr	r1, [pc, #188]	; (80031f4 <HAL_GPIO_Init+0x2bc>)
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	3302      	adds	r3, #2
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d006      	beq.n	800315e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003150:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	492c      	ldr	r1, [pc, #176]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
 800315c:	e006      	b.n	800316c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800315e:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	43db      	mvns	r3, r3
 8003166:	4928      	ldr	r1, [pc, #160]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 8003168:	4013      	ands	r3, r2
 800316a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d006      	beq.n	8003186 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003178:	4b23      	ldr	r3, [pc, #140]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	4922      	ldr	r1, [pc, #136]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
 8003184:	e006      	b.n	8003194 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	43db      	mvns	r3, r3
 800318e:	491e      	ldr	r1, [pc, #120]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 8003190:	4013      	ands	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d006      	beq.n	80031ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	4918      	ldr	r1, [pc, #96]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]
 80031ac:	e006      	b.n	80031bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	4914      	ldr	r1, [pc, #80]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d021      	beq.n	800320c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031c8:	4b0f      	ldr	r3, [pc, #60]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	490e      	ldr	r1, [pc, #56]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60cb      	str	r3, [r1, #12]
 80031d4:	e021      	b.n	800321a <HAL_GPIO_Init+0x2e2>
 80031d6:	bf00      	nop
 80031d8:	10320000 	.word	0x10320000
 80031dc:	10310000 	.word	0x10310000
 80031e0:	10220000 	.word	0x10220000
 80031e4:	10210000 	.word	0x10210000
 80031e8:	10120000 	.word	0x10120000
 80031ec:	10110000 	.word	0x10110000
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40010000 	.word	0x40010000
 80031f8:	40010800 	.word	0x40010800
 80031fc:	40010c00 	.word	0x40010c00
 8003200:	40011000 	.word	0x40011000
 8003204:	40011400 	.word	0x40011400
 8003208:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_GPIO_Init+0x304>)
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	43db      	mvns	r3, r3
 8003214:	4909      	ldr	r1, [pc, #36]	; (800323c <HAL_GPIO_Init+0x304>)
 8003216:	4013      	ands	r3, r2
 8003218:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	3301      	adds	r3, #1
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	f47f ae8e 	bne.w	8002f4c <HAL_GPIO_Init+0x14>
  }
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	372c      	adds	r7, #44	; 0x2c
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	40010400 	.word	0x40010400

08003240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	e001      	b.n	8003262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	807b      	strh	r3, [r7, #2]
 800327a:	4613      	mov	r3, r2
 800327c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800327e:	787b      	ldrb	r3, [r7, #1]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003284:	887a      	ldrh	r2, [r7, #2]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800328a:	e003      	b.n	8003294 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800328c:	887b      	ldrh	r3, [r7, #2]
 800328e:	041a      	lsls	r2, r3, #16
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	611a      	str	r2, [r3, #16]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032b0:	887a      	ldrh	r2, [r7, #2]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4013      	ands	r3, r2
 80032b6:	041a      	lsls	r2, r3, #16
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	43d9      	mvns	r1, r3
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	400b      	ands	r3, r1
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	611a      	str	r2, [r3, #16]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e272      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8087 	beq.w	80033fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f0:	4b92      	ldr	r3, [pc, #584]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d00c      	beq.n	8003316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032fc:	4b8f      	ldr	r3, [pc, #572]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d112      	bne.n	800332e <HAL_RCC_OscConfig+0x5e>
 8003308:	4b8c      	ldr	r3, [pc, #560]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003314:	d10b      	bne.n	800332e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003316:	4b89      	ldr	r3, [pc, #548]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d06c      	beq.n	80033fc <HAL_RCC_OscConfig+0x12c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d168      	bne.n	80033fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e24c      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x76>
 8003338:	4b80      	ldr	r3, [pc, #512]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a7f      	ldr	r2, [pc, #508]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 800333e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	e02e      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x98>
 800334e:	4b7b      	ldr	r3, [pc, #492]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a7a      	ldr	r2, [pc, #488]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b78      	ldr	r3, [pc, #480]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a77      	ldr	r2, [pc, #476]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e01d      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0xbc>
 8003372:	4b72      	ldr	r3, [pc, #456]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a71      	ldr	r2, [pc, #452]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b6f      	ldr	r3, [pc, #444]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6e      	ldr	r2, [pc, #440]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 800338c:	4b6b      	ldr	r3, [pc, #428]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6a      	ldr	r2, [pc, #424]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4b68      	ldr	r3, [pc, #416]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a67      	ldr	r2, [pc, #412]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 800339e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fe fa50 	bl	8001850 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fe fa4c 	bl	8001850 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e200      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b5d      	ldr	r3, [pc, #372]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0xe4>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe fa3c 	bl	8001850 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fe fa38 	bl	8001850 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	; 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e1ec      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	4b53      	ldr	r3, [pc, #332]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x10c>
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d063      	beq.n	80034d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800340a:	4b4c      	ldr	r3, [pc, #304]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003416:	4b49      	ldr	r3, [pc, #292]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b08      	cmp	r3, #8
 8003420:	d11c      	bne.n	800345c <HAL_RCC_OscConfig+0x18c>
 8003422:	4b46      	ldr	r3, [pc, #280]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d116      	bne.n	800345c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342e:	4b43      	ldr	r3, [pc, #268]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_RCC_OscConfig+0x176>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e1c0      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b3d      	ldr	r3, [pc, #244]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4939      	ldr	r1, [pc, #228]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	e03a      	b.n	80034d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003464:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCC_OscConfig+0x270>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fe f9f1 	bl	8001850 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003472:	f7fe f9ed 	bl	8001850 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e1a1      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	4b2d      	ldr	r3, [pc, #180]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b2a      	ldr	r3, [pc, #168]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4927      	ldr	r1, [pc, #156]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	e015      	b.n	80034d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <HAL_RCC_OscConfig+0x270>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe f9d0 	bl	8001850 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fe f9cc 	bl	8001850 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e180      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	4b1d      	ldr	r3, [pc, #116]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d03a      	beq.n	8003554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d019      	beq.n	800351a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e6:	4b17      	ldr	r3, [pc, #92]	; (8003544 <HAL_RCC_OscConfig+0x274>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ec:	f7fe f9b0 	bl	8001850 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f4:	f7fe f9ac 	bl	8001850 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e160      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	4b0d      	ldr	r3, [pc, #52]	; (800353c <HAL_RCC_OscConfig+0x26c>)
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003512:	2001      	movs	r0, #1
 8003514:	f000 faf4 	bl	8003b00 <RCC_Delay>
 8003518:	e01c      	b.n	8003554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_RCC_OscConfig+0x274>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003520:	f7fe f996 	bl	8001850 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003526:	e00f      	b.n	8003548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003528:	f7fe f992 	bl	8001850 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d908      	bls.n	8003548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e146      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	42420000 	.word	0x42420000
 8003544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b92      	ldr	r3, [pc, #584]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e9      	bne.n	8003528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80a6 	beq.w	80036ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b8b      	ldr	r3, [pc, #556]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	4b88      	ldr	r3, [pc, #544]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4a87      	ldr	r2, [pc, #540]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357c:	61d3      	str	r3, [r2, #28]
 800357e:	4b85      	ldr	r3, [pc, #532]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b82      	ldr	r3, [pc, #520]	; (8003798 <HAL_RCC_OscConfig+0x4c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359a:	4b7f      	ldr	r3, [pc, #508]	; (8003798 <HAL_RCC_OscConfig+0x4c8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7e      	ldr	r2, [pc, #504]	; (8003798 <HAL_RCC_OscConfig+0x4c8>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7fe f953 	bl	8001850 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7fe f94f 	bl	8001850 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b64      	cmp	r3, #100	; 0x64
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e103      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b75      	ldr	r3, [pc, #468]	; (8003798 <HAL_RCC_OscConfig+0x4c8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x312>
 80035d4:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6213      	str	r3, [r2, #32]
 80035e0:	e02d      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x334>
 80035ea:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4a69      	ldr	r2, [pc, #420]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	6213      	str	r3, [r2, #32]
 80035f6:	4b67      	ldr	r3, [pc, #412]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4a66      	ldr	r2, [pc, #408]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	6213      	str	r3, [r2, #32]
 8003602:	e01c      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d10c      	bne.n	8003626 <HAL_RCC_OscConfig+0x356>
 800360c:	4b61      	ldr	r3, [pc, #388]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4a60      	ldr	r2, [pc, #384]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	6213      	str	r3, [r2, #32]
 8003618:	4b5e      	ldr	r3, [pc, #376]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4a5d      	ldr	r2, [pc, #372]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6213      	str	r3, [r2, #32]
 8003624:	e00b      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 8003626:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4a5a      	ldr	r2, [pc, #360]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6213      	str	r3, [r2, #32]
 8003632:	4b58      	ldr	r3, [pc, #352]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a57      	ldr	r2, [pc, #348]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d015      	beq.n	8003672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003646:	f7fe f903 	bl	8001850 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe f8ff 	bl	8001850 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	; 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0b1      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003664:	4b4b      	ldr	r3, [pc, #300]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ee      	beq.n	800364e <HAL_RCC_OscConfig+0x37e>
 8003670:	e014      	b.n	800369c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7fe f8ed 	bl	8001850 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe f8e9 	bl	8001850 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e09b      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003690:	4b40      	ldr	r3, [pc, #256]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ee      	bne.n	800367a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d105      	bne.n	80036ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a2:	4b3c      	ldr	r3, [pc, #240]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4a3b      	ldr	r2, [pc, #236]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8087 	beq.w	80037c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b8:	4b36      	ldr	r3, [pc, #216]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d061      	beq.n	8003788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d146      	bne.n	800375a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	4b33      	ldr	r3, [pc, #204]	; (800379c <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe f8bd 	bl	8001850 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7fe f8b9 	bl	8001850 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e06d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ec:	4b29      	ldr	r3, [pc, #164]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003700:	d108      	bne.n	8003714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4921      	ldr	r1, [pc, #132]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003714:	4b1f      	ldr	r3, [pc, #124]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a19      	ldr	r1, [r3, #32]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	430b      	orrs	r3, r1
 8003726:	491b      	ldr	r1, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372c:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x4cc>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fe f88d 	bl	8001850 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe f889 	bl	8001850 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e03d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x46a>
 8003758:	e035      	b.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <HAL_RCC_OscConfig+0x4cc>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fe f876 	bl	8001850 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe f872 	bl	8001850 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e026      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x498>
 8003786:	e01e      	b.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e019      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
 800379c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_RCC_OscConfig+0x500>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000

080037d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0d0      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d910      	bls.n	8003818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b67      	ldr	r3, [pc, #412]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 0207 	bic.w	r2, r3, #7
 80037fe:	4965      	ldr	r1, [pc, #404]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b63      	ldr	r3, [pc, #396]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0b8      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003830:	4b59      	ldr	r3, [pc, #356]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a58      	ldr	r2, [pc, #352]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800383a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003848:	4b53      	ldr	r3, [pc, #332]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4a52      	ldr	r2, [pc, #328]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b50      	ldr	r3, [pc, #320]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	494d      	ldr	r1, [pc, #308]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d040      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b47      	ldr	r3, [pc, #284]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d115      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07f      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b41      	ldr	r3, [pc, #260]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e073      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3d      	ldr	r3, [pc, #244]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e06b      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b39      	ldr	r3, [pc, #228]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4936      	ldr	r1, [pc, #216]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fd ffc4 	bl	8001850 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fd ffc0 	bl	8001850 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e053      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2d      	ldr	r3, [pc, #180]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b27      	ldr	r3, [pc, #156]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d210      	bcs.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b24      	ldr	r3, [pc, #144]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	4922      	ldr	r1, [pc, #136]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b20      	ldr	r3, [pc, #128]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e032      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003930:	4b19      	ldr	r3, [pc, #100]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4916      	ldr	r1, [pc, #88]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800394e:	4b12      	ldr	r3, [pc, #72]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	490e      	ldr	r1, [pc, #56]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003962:	f000 f821 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003966:	4602      	mov	r2, r0
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	490a      	ldr	r1, [pc, #40]	; (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	5ccb      	ldrb	r3, [r1, r3]
 8003976:	fa22 f303 	lsr.w	r3, r2, r3
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <HAL_RCC_ClockConfig+0x1cc>)
 800397c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd fd88 	bl	8001498 <HAL_InitTick>

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40022000 	.word	0x40022000
 8003998:	40021000 	.word	0x40021000
 800399c:	08006f98 	.word	0x08006f98
 80039a0:	20000000 	.word	0x20000000
 80039a4:	20000004 	.word	0x20000004

080039a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	b490      	push	{r4, r7}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039ae:	4b29      	ldr	r3, [pc, #164]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xac>)
 80039b0:	1d3c      	adds	r4, r7, #4
 80039b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039b8:	f240 2301 	movw	r3, #513	; 0x201
 80039bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	2300      	movs	r3, #0
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039d2:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d002      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x40>
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d003      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x46>
 80039e6:	e02b      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039e8:	4b1c      	ldr	r3, [pc, #112]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xb4>)
 80039ea:	623b      	str	r3, [r7, #32]
      break;
 80039ec:	e02b      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	0c9b      	lsrs	r3, r3, #18
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	3328      	adds	r3, #40	; 0x28
 80039f8:	443b      	add	r3, r7
 80039fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039fe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d012      	beq.n	8003a30 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	0c5b      	lsrs	r3, r3, #17
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	3328      	adds	r3, #40	; 0x28
 8003a16:	443b      	add	r3, r7
 8003a18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	4a0e      	ldr	r2, [pc, #56]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a22:	fb03 f202 	mul.w	r2, r3, r2
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	e004      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4a0b      	ldr	r2, [pc, #44]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a34:	fb02 f303 	mul.w	r3, r2, r3
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	623b      	str	r3, [r7, #32]
      break;
 8003a3e:	e002      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a42:	623b      	str	r3, [r7, #32]
      break;
 8003a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a46:	6a3b      	ldr	r3, [r7, #32]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3728      	adds	r7, #40	; 0x28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc90      	pop	{r4, r7}
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	08006f70 	.word	0x08006f70
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	007a1200 	.word	0x007a1200
 8003a60:	003d0900 	.word	0x003d0900

08003a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a68:	4b02      	ldr	r3, [pc, #8]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	20000000 	.word	0x20000000

08003a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a7c:	f7ff fff2 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	0adb      	lsrs	r3, r3, #11
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4903      	ldr	r1, [pc, #12]	; (8003a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	08006fa8 	.word	0x08006fa8

08003aa0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	220f      	movs	r2, #15
 8003aae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ab0:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <HAL_RCC_GetClockConfig+0x58>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0203 	and.w	r2, r3, #3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <HAL_RCC_GetClockConfig+0x58>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_GetClockConfig+0x58>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ad4:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HAL_RCC_GetClockConfig+0x58>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	08db      	lsrs	r3, r3, #3
 8003ada:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCC_GetClockConfig+0x5c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0207 	and.w	r2, r3, #7
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40022000 	.word	0x40022000

08003b00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <RCC_Delay+0x34>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <RCC_Delay+0x38>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	0a5b      	lsrs	r3, r3, #9
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b1c:	bf00      	nop
  }
  while (Delay --);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1e5a      	subs	r2, r3, #1
 8003b22:	60fa      	str	r2, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f9      	bne.n	8003b1c <RCC_Delay+0x1c>
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	20000000 	.word	0x20000000
 8003b38:	10624dd3 	.word	0x10624dd3

08003b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d07d      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5c:	4b4f      	ldr	r3, [pc, #316]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10d      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b68:	4b4c      	ldr	r3, [pc, #304]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	4a4b      	ldr	r2, [pc, #300]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b72:	61d3      	str	r3, [r2, #28]
 8003b74:	4b49      	ldr	r3, [pc, #292]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b80:	2301      	movs	r3, #1
 8003b82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d118      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b90:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a42      	ldr	r2, [pc, #264]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9c:	f7fd fe58 	bl	8001850 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba4:	f7fd fe54 	bl	8001850 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e06d      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb6:	4b3a      	ldr	r3, [pc, #232]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bc2:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d02e      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d027      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003be0:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bea:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf0:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bf6:	4a29      	ldr	r2, [pc, #164]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d014      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fd fe23 	bl	8001850 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fd fe1f 	bl	8001850 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e036      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c24:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ee      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c30:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4917      	ldr	r1, [pc, #92]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d105      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c48:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c60:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	490b      	ldr	r1, [pc, #44]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	4904      	ldr	r1, [pc, #16]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	42420440 	.word	0x42420440

08003ca8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ca8:	b590      	push	{r4, r7, lr}
 8003caa:	b08d      	sub	sp, #52	; 0x34
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cb0:	4b58      	ldr	r3, [pc, #352]	; (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003cb2:	f107 040c 	add.w	r4, r7, #12
 8003cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cbc:	f240 2301 	movw	r3, #513	; 0x201
 8003cc0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	f200 808e 	bhi.w	8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d049      	beq.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d079      	beq.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003cf0:	e086      	b.n	8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003cf2:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003cf8:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d07f      	beq.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	0c9b      	lsrs	r3, r3, #18
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	3330      	adds	r3, #48	; 0x30
 8003d0e:	443b      	add	r3, r7
 8003d10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d14:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d017      	beq.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d20:	4b3d      	ldr	r3, [pc, #244]	; (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	0c5b      	lsrs	r3, r3, #17
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	3330      	adds	r3, #48	; 0x30
 8003d2c:	443b      	add	r3, r7
 8003d2e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00d      	beq.n	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d3e:	4a37      	ldr	r2, [pc, #220]	; (8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4e:	e004      	b.n	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	4a33      	ldr	r2, [pc, #204]	; (8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d54:	fb02 f303 	mul.w	r3, r2, r3
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d5a:	4b2f      	ldr	r3, [pc, #188]	; (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d66:	d102      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d6c:	e04a      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4a2c      	ldr	r2, [pc, #176]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d7c:	e042      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003d7e:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8e:	d108      	bne.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da0:	e01f      	b.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dac:	d109      	bne.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003dae:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003dba:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc0:	e00f      	b.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dcc:	d11c      	bne.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003dce:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003dda:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003de0:	e012      	b.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003de2:	e011      	b.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003de4:	f7ff fe48 	bl	8003a78 <HAL_RCC_GetPCLK2Freq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	0b9b      	lsrs	r3, r3, #14
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	3301      	adds	r3, #1
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dfe:	e004      	b.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003e00:	bf00      	nop
 8003e02:	e002      	b.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003e04:	bf00      	nop
 8003e06:	e000      	b.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003e08:	bf00      	nop
    }
  }
  return (frequency);
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3734      	adds	r7, #52	; 0x34
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd90      	pop	{r4, r7, pc}
 8003e14:	08006f80 	.word	0x08006f80
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	007a1200 	.word	0x007a1200
 8003e20:	003d0900 	.word	0x003d0900
 8003e24:	aaaaaaab 	.word	0xaaaaaaab

08003e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e041      	b.n	8003ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd fa68 	bl	8001324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f000 fc84 	bl	8004774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d001      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e03a      	b.n	8003f56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <HAL_TIM_Base_Start_IT+0x98>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00e      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x58>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0a:	d009      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x58>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d004      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x58>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d111      	bne.n	8003f44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b06      	cmp	r3, #6
 8003f30:	d010      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f42:	e007      	b.n	8003f54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800

08003f6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e041      	b.n	8004002 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fd f9e2 	bl	800135c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f000 fbe2 	bl	8004774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <HAL_TIM_PWM_Start+0x24>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e022      	b.n	8004076 <HAL_TIM_PWM_Start+0x6a>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b04      	cmp	r3, #4
 8004034:	d109      	bne.n	800404a <HAL_TIM_PWM_Start+0x3e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b01      	cmp	r3, #1
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	e015      	b.n	8004076 <HAL_TIM_PWM_Start+0x6a>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d109      	bne.n	8004064 <HAL_TIM_PWM_Start+0x58>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	bf14      	ite	ne
 800405c:	2301      	movne	r3, #1
 800405e:	2300      	moveq	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e008      	b.n	8004076 <HAL_TIM_PWM_Start+0x6a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e05e      	b.n	800413c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <HAL_TIM_PWM_Start+0x82>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800408c:	e013      	b.n	80040b6 <HAL_TIM_PWM_Start+0xaa>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b04      	cmp	r3, #4
 8004092:	d104      	bne.n	800409e <HAL_TIM_PWM_Start+0x92>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800409c:	e00b      	b.n	80040b6 <HAL_TIM_PWM_Start+0xaa>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_PWM_Start+0xa2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ac:	e003      	b.n	80040b6 <HAL_TIM_PWM_Start+0xaa>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2201      	movs	r2, #1
 80040bc:	6839      	ldr	r1, [r7, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fdd8 	bl	8004c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1e      	ldr	r2, [pc, #120]	; (8004144 <HAL_TIM_PWM_Start+0x138>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d107      	bne.n	80040de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a18      	ldr	r2, [pc, #96]	; (8004144 <HAL_TIM_PWM_Start+0x138>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_TIM_PWM_Start+0xfa>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d009      	beq.n	8004106 <HAL_TIM_PWM_Start+0xfa>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a14      	ldr	r2, [pc, #80]	; (8004148 <HAL_TIM_PWM_Start+0x13c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_TIM_PWM_Start+0xfa>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a12      	ldr	r2, [pc, #72]	; (800414c <HAL_TIM_PWM_Start+0x140>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d111      	bne.n	800412a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b06      	cmp	r3, #6
 8004116:	d010      	beq.n	800413a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004128:	e007      	b.n	800413a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0201 	orr.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40000400 	.word	0x40000400
 800414c:	40000800 	.word	0x40000800

08004150 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2200      	movs	r2, #0
 8004160:	6839      	ldr	r1, [r7, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fd86 	bl	8004c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a29      	ldr	r2, [pc, #164]	; (8004214 <HAL_TIM_PWM_Stop+0xc4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d117      	bne.n	80041a2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6a1a      	ldr	r2, [r3, #32]
 8004178:	f241 1311 	movw	r3, #4369	; 0x1111
 800417c:	4013      	ands	r3, r2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10f      	bne.n	80041a2 <HAL_TIM_PWM_Stop+0x52>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6a1a      	ldr	r2, [r3, #32]
 8004188:	f240 4344 	movw	r3, #1092	; 0x444
 800418c:	4013      	ands	r3, r2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d107      	bne.n	80041a2 <HAL_TIM_PWM_Stop+0x52>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a1a      	ldr	r2, [r3, #32]
 80041a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10f      	bne.n	80041d2 <HAL_TIM_PWM_Stop+0x82>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a1a      	ldr	r2, [r3, #32]
 80041b8:	f240 4344 	movw	r3, #1092	; 0x444
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d107      	bne.n	80041d2 <HAL_TIM_PWM_Stop+0x82>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d104      	bne.n	80041e2 <HAL_TIM_PWM_Stop+0x92>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e0:	e013      	b.n	800420a <HAL_TIM_PWM_Stop+0xba>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_PWM_Stop+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f0:	e00b      	b.n	800420a <HAL_TIM_PWM_Stop+0xba>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_PWM_Stop+0xb2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004200:	e003      	b.n	800420a <HAL_TIM_PWM_Stop+0xba>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40012c00 	.word	0x40012c00

08004218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b02      	cmp	r3, #2
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0202 	mvn.w	r2, #2
 8004244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fa6f 	bl	800473e <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fa62 	bl	800472c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fa71 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0204 	mvn.w	r2, #4
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa45 	bl	800473e <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa38 	bl	800472c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fa47 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d122      	bne.n	800431c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d11b      	bne.n	800431c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0208 	mvn.w	r2, #8
 80042ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2204      	movs	r2, #4
 80042f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fa1b 	bl	800473e <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fa0e 	bl	800472c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fa1d 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b10      	cmp	r3, #16
 8004328:	d122      	bne.n	8004370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b10      	cmp	r3, #16
 8004336:	d11b      	bne.n	8004370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0210 	mvn.w	r2, #16
 8004340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2208      	movs	r2, #8
 8004346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f9f1 	bl	800473e <HAL_TIM_IC_CaptureCallback>
 800435c:	e005      	b.n	800436a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f9e4 	bl	800472c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f9f3 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10e      	bne.n	800439c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0201 	mvn.w	r2, #1
 8004394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fc fdc4 	bl	8000f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b80      	cmp	r3, #128	; 0x80
 80043a8:	d10e      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d107      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fce1 	bl	8004d8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d10e      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f9b7 	bl	8004762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d10e      	bne.n	8004420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b20      	cmp	r3, #32
 800440e:	d107      	bne.n	8004420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0220 	mvn.w	r2, #32
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fcac 	bl	8004d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800443e:	2302      	movs	r3, #2
 8004440:	e0ac      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b0c      	cmp	r3, #12
 800444e:	f200 809f 	bhi.w	8004590 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004452:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004458:	0800448d 	.word	0x0800448d
 800445c:	08004591 	.word	0x08004591
 8004460:	08004591 	.word	0x08004591
 8004464:	08004591 	.word	0x08004591
 8004468:	080044cd 	.word	0x080044cd
 800446c:	08004591 	.word	0x08004591
 8004470:	08004591 	.word	0x08004591
 8004474:	08004591 	.word	0x08004591
 8004478:	0800450f 	.word	0x0800450f
 800447c:	08004591 	.word	0x08004591
 8004480:	08004591 	.word	0x08004591
 8004484:	08004591 	.word	0x08004591
 8004488:	0800454f 	.word	0x0800454f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f9d0 	bl	8004838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0208 	orr.w	r2, r2, #8
 80044a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0204 	bic.w	r2, r2, #4
 80044b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6999      	ldr	r1, [r3, #24]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	619a      	str	r2, [r3, #24]
      break;
 80044ca:	e062      	b.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fa16 	bl	8004904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6999      	ldr	r1, [r3, #24]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	619a      	str	r2, [r3, #24]
      break;
 800450c:	e041      	b.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fa5f 	bl	80049d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0208 	orr.w	r2, r2, #8
 8004528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0204 	bic.w	r2, r2, #4
 8004538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69d9      	ldr	r1, [r3, #28]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	61da      	str	r2, [r3, #28]
      break;
 800454c:	e021      	b.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 faa9 	bl	8004aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69d9      	ldr	r1, [r3, #28]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	021a      	lsls	r2, r3, #8
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	61da      	str	r2, [r3, #28]
      break;
 800458e:	e000      	b.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004590:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_TIM_ConfigClockSource+0x18>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e0b3      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x180>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f4:	d03e      	beq.n	8004674 <HAL_TIM_ConfigClockSource+0xd0>
 80045f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fa:	f200 8087 	bhi.w	800470c <HAL_TIM_ConfigClockSource+0x168>
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	f000 8085 	beq.w	8004710 <HAL_TIM_ConfigClockSource+0x16c>
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460a:	d87f      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x168>
 800460c:	2b70      	cmp	r3, #112	; 0x70
 800460e:	d01a      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0xa2>
 8004610:	2b70      	cmp	r3, #112	; 0x70
 8004612:	d87b      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x168>
 8004614:	2b60      	cmp	r3, #96	; 0x60
 8004616:	d050      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x116>
 8004618:	2b60      	cmp	r3, #96	; 0x60
 800461a:	d877      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x168>
 800461c:	2b50      	cmp	r3, #80	; 0x50
 800461e:	d03c      	beq.n	800469a <HAL_TIM_ConfigClockSource+0xf6>
 8004620:	2b50      	cmp	r3, #80	; 0x50
 8004622:	d873      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x168>
 8004624:	2b40      	cmp	r3, #64	; 0x40
 8004626:	d058      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x136>
 8004628:	2b40      	cmp	r3, #64	; 0x40
 800462a:	d86f      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x168>
 800462c:	2b30      	cmp	r3, #48	; 0x30
 800462e:	d064      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x156>
 8004630:	2b30      	cmp	r3, #48	; 0x30
 8004632:	d86b      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x168>
 8004634:	2b20      	cmp	r3, #32
 8004636:	d060      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x156>
 8004638:	2b20      	cmp	r3, #32
 800463a:	d867      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x168>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05c      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x156>
 8004640:	2b10      	cmp	r3, #16
 8004642:	d05a      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004644:	e062      	b.n	800470c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6899      	ldr	r1, [r3, #8]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f000 faee 	bl	8004c36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004668:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	609a      	str	r2, [r3, #8]
      break;
 8004672:	e04e      	b.n	8004712 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6899      	ldr	r1, [r3, #8]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f000 fad7 	bl	8004c36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004696:	609a      	str	r2, [r3, #8]
      break;
 8004698:	e03b      	b.n	8004712 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6859      	ldr	r1, [r3, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	461a      	mov	r2, r3
 80046a8:	f000 fa4e 	bl	8004b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2150      	movs	r1, #80	; 0x50
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 faa5 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 80046b8:	e02b      	b.n	8004712 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6859      	ldr	r1, [r3, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	461a      	mov	r2, r3
 80046c8:	f000 fa6c 	bl	8004ba4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2160      	movs	r1, #96	; 0x60
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fa95 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 80046d8:	e01b      	b.n	8004712 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6859      	ldr	r1, [r3, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	461a      	mov	r2, r3
 80046e8:	f000 fa2e 	bl	8004b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2140      	movs	r1, #64	; 0x40
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fa85 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 80046f8:	e00b      	b.n	8004712 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f000 fa7c 	bl	8004c02 <TIM_ITRx_SetConfig>
        break;
 800470a:	e002      	b.n	8004712 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800470c:	bf00      	nop
 800470e:	e000      	b.n	8004712 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004710:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a29      	ldr	r2, [pc, #164]	; (800482c <TIM_Base_SetConfig+0xb8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00b      	beq.n	80047a4 <TIM_Base_SetConfig+0x30>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004792:	d007      	beq.n	80047a4 <TIM_Base_SetConfig+0x30>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a26      	ldr	r2, [pc, #152]	; (8004830 <TIM_Base_SetConfig+0xbc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_Base_SetConfig+0x30>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a25      	ldr	r2, [pc, #148]	; (8004834 <TIM_Base_SetConfig+0xc0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d108      	bne.n	80047b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1c      	ldr	r2, [pc, #112]	; (800482c <TIM_Base_SetConfig+0xb8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <TIM_Base_SetConfig+0x62>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c4:	d007      	beq.n	80047d6 <TIM_Base_SetConfig+0x62>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a19      	ldr	r2, [pc, #100]	; (8004830 <TIM_Base_SetConfig+0xbc>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_Base_SetConfig+0x62>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a18      	ldr	r2, [pc, #96]	; (8004834 <TIM_Base_SetConfig+0xc0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a07      	ldr	r2, [pc, #28]	; (800482c <TIM_Base_SetConfig+0xb8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d103      	bne.n	800481c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	615a      	str	r2, [r3, #20]
}
 8004822:	bf00      	nop
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40000400 	.word	0x40000400
 8004834:	40000800 	.word	0x40000800

08004838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 0302 	bic.w	r3, r3, #2
 8004880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <TIM_OC1_SetConfig+0xc8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d10c      	bne.n	80048ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f023 0308 	bic.w	r3, r3, #8
 800489a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f023 0304 	bic.w	r3, r3, #4
 80048ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a13      	ldr	r2, [pc, #76]	; (8004900 <TIM_OC1_SetConfig+0xc8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d111      	bne.n	80048da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	621a      	str	r2, [r3, #32]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40012c00 	.word	0x40012c00

08004904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0210 	bic.w	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0320 	bic.w	r3, r3, #32
 800494e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a1d      	ldr	r2, [pc, #116]	; (80049d4 <TIM_OC2_SetConfig+0xd0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d10d      	bne.n	8004980 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800496a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <TIM_OC2_SetConfig+0xd0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d113      	bne.n	80049b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800498e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr
 80049d4:	40012c00 	.word	0x40012c00

080049d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0303 	bic.w	r3, r3, #3
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <TIM_OC3_SetConfig+0xd0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10d      	bne.n	8004a52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <TIM_OC3_SetConfig+0xd0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d113      	bne.n	8004a82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	621a      	str	r2, [r3, #32]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40012c00 	.word	0x40012c00

08004aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	031b      	lsls	r3, r3, #12
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a0f      	ldr	r2, [pc, #60]	; (8004b44 <TIM_OC4_SetConfig+0x98>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d109      	bne.n	8004b20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr
 8004b44:	40012c00 	.word	0x40012c00

08004b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f023 030a 	bic.w	r3, r3, #10
 8004b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr

08004ba4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f023 0210 	bic.w	r2, r3, #16
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	031b      	lsls	r3, r3, #12
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004be0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	621a      	str	r2, [r3, #32]
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f043 0307 	orr.w	r3, r3, #7
 8004c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr

08004c36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b087      	sub	sp, #28
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
 8004c42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	021a      	lsls	r2, r3, #8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	609a      	str	r2, [r3, #8]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	2201      	movs	r2, #1
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a1a      	ldr	r2, [r3, #32]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	43db      	mvns	r3, r3
 8004c96:	401a      	ands	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1a      	ldr	r2, [r3, #32]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e046      	b.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a16      	ldr	r2, [pc, #88]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d20:	d009      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10c      	bne.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800

08004d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr

08004d8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dae:	2b84      	cmp	r3, #132	; 0x84
 8004db0:	d005      	beq.n	8004dbe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004db2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4413      	add	r3, r2
 8004dba:	3303      	adds	r3, #3
 8004dbc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004dce:	f000 ff1d 	bl	8005c0c <vTaskStartScheduler>
  
  return osOK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dda:	b089      	sub	sp, #36	; 0x24
 8004ddc:	af04      	add	r7, sp, #16
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d020      	beq.n	8004e2c <osThreadCreate+0x54>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01c      	beq.n	8004e2c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685c      	ldr	r4, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681d      	ldr	r5, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691e      	ldr	r6, [r3, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ffc9 	bl	8004d9c <makeFreeRtosPriority>
 8004e0a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e14:	9202      	str	r2, [sp, #8]
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	9100      	str	r1, [sp, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	4632      	mov	r2, r6
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 fd35 	bl	8005890 <xTaskCreateStatic>
 8004e26:	4603      	mov	r3, r0
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e01c      	b.n	8004e66 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685c      	ldr	r4, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e38:	b29e      	uxth	r6, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff ffab 	bl	8004d9c <makeFreeRtosPriority>
 8004e46:	4602      	mov	r2, r0
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	9200      	str	r2, [sp, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4632      	mov	r2, r6
 8004e54:	4629      	mov	r1, r5
 8004e56:	4620      	mov	r0, r4
 8004e58:	f000 fd76 	bl	8005948 <xTaskCreate>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d001      	beq.n	8004e66 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e66:	68fb      	ldr	r3, [r7, #12]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <osDelay+0x16>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	e000      	b.n	8004e88 <osDelay+0x18>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fe8b 	bl	8005ba4 <vTaskDelay>
  
  return osOK;
 8004e8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f103 0208 	add.w	r2, r3, #8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f103 0208 	add.w	r2, r3, #8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f103 0208 	add.w	r2, r3, #8
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr

08004eee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	601a      	str	r2, [r3, #0]
}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr

08004f34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d103      	bne.n	8004f54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e00c      	b.n	8004f6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3308      	adds	r3, #8
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e002      	b.n	8004f62 <vListInsert+0x2e>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d2f6      	bcs.n	8004f5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	601a      	str	r2, [r3, #0]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6892      	ldr	r2, [r2, #8]
 8004fba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6852      	ldr	r2, [r2, #4]
 8004fc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d103      	bne.n	8004fd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	1e5a      	subs	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr
	...

08004ff8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005022:	f001 fbf3 	bl	800680c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005032:	fb01 f303 	mul.w	r3, r1, r3
 8005036:	441a      	add	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005052:	3b01      	subs	r3, #1
 8005054:	68f9      	ldr	r1, [r7, #12]
 8005056:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	441a      	add	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	22ff      	movs	r2, #255	; 0xff
 8005066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	22ff      	movs	r2, #255	; 0xff
 800506e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d114      	bne.n	80050a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01a      	beq.n	80050b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3310      	adds	r3, #16
 8005084:	4618      	mov	r0, r3
 8005086:	f001 f807 	bl	8006098 <xTaskRemoveFromEventList>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d012      	beq.n	80050b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005090:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <xQueueGenericReset+0xcc>)
 8005092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	e009      	b.n	80050b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3310      	adds	r3, #16
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fef6 	bl	8004e98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3324      	adds	r3, #36	; 0x24
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fef1 	bl	8004e98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050b6:	f001 fbd9 	bl	800686c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050ba:	2301      	movs	r3, #1
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	613b      	str	r3, [r7, #16]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d102      	bne.n	80050fe <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]
 80050fc:	e004      	b.n	8005108 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	fb02 f303 	mul.w	r3, r2, r3
 8005106:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	3348      	adds	r3, #72	; 0x48
 800510c:	4618      	mov	r0, r3
 800510e:	f001 fc7d 	bl	8006a0c <pvPortMalloc>
 8005112:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00f      	beq.n	800513a <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	3348      	adds	r3, #72	; 0x48
 800511e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005128:	79fa      	ldrb	r2, [r7, #7]
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	4613      	mov	r3, r2
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f805 	bl	8005144 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800513a:	69bb      	ldr	r3, [r7, #24]
	}
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d103      	bne.n	8005160 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e002      	b.n	8005166 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005172:	2101      	movs	r1, #1
 8005174:	69b8      	ldr	r0, [r7, #24]
 8005176:	f7ff ff3f 	bl	8004ff8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08e      	sub	sp, #56	; 0x38
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005192:	2300      	movs	r3, #0
 8005194:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <xQueueGenericSend+0x32>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d103      	bne.n	80051c4 <xQueueGenericSend+0x40>
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <xQueueGenericSend+0x44>
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <xQueueGenericSend+0x46>
 80051c8:	2300      	movs	r3, #0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10a      	bne.n	80051e4 <xQueueGenericSend+0x60>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051e0:	bf00      	nop
 80051e2:	e7fe      	b.n	80051e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d103      	bne.n	80051f2 <xQueueGenericSend+0x6e>
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <xQueueGenericSend+0x72>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <xQueueGenericSend+0x74>
 80051f6:	2300      	movs	r3, #0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <xQueueGenericSend+0x8e>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	623b      	str	r3, [r7, #32]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005212:	f001 f901 	bl	8006418 <xTaskGetSchedulerState>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <xQueueGenericSend+0x9e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <xQueueGenericSend+0xa2>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <xQueueGenericSend+0xa4>
 8005226:	2300      	movs	r3, #0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xQueueGenericSend+0xbe>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	61fb      	str	r3, [r7, #28]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005242:	f001 fae3 	bl	800680c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <xQueueGenericSend+0xd4>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d129      	bne.n	80052ac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800525e:	f000 fa07 	bl	8005670 <prvCopyDataToQueue>
 8005262:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	2b00      	cmp	r3, #0
 800526a:	d010      	beq.n	800528e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	3324      	adds	r3, #36	; 0x24
 8005270:	4618      	mov	r0, r3
 8005272:	f000 ff11 	bl	8006098 <xTaskRemoveFromEventList>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d013      	beq.n	80052a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800527c:	4b3f      	ldr	r3, [pc, #252]	; (800537c <xQueueGenericSend+0x1f8>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	e00a      	b.n	80052a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d007      	beq.n	80052a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005294:	4b39      	ldr	r3, [pc, #228]	; (800537c <xQueueGenericSend+0x1f8>)
 8005296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052a4:	f001 fae2 	bl	800686c <vPortExitCritical>
				return pdPASS;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e063      	b.n	8005374 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d103      	bne.n	80052ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052b2:	f001 fadb 	bl	800686c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	e05c      	b.n	8005374 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d106      	bne.n	80052ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052c0:	f107 0314 	add.w	r3, r7, #20
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 ff49 	bl	800615c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052ca:	2301      	movs	r3, #1
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052ce:	f001 facd 	bl	800686c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052d2:	f000 fcfb 	bl	8005ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052d6:	f001 fa99 	bl	800680c <vPortEnterCritical>
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052e0:	b25b      	sxtb	r3, r3
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	d103      	bne.n	80052f0 <xQueueGenericSend+0x16c>
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052f6:	b25b      	sxtb	r3, r3
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d103      	bne.n	8005306 <xQueueGenericSend+0x182>
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005306:	f001 fab1 	bl	800686c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800530a:	1d3a      	adds	r2, r7, #4
 800530c:	f107 0314 	add.w	r3, r7, #20
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f000 ff38 	bl	8006188 <xTaskCheckForTimeOut>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d124      	bne.n	8005368 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800531e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005320:	f000 fa9e 	bl	8005860 <prvIsQueueFull>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d018      	beq.n	800535c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	3310      	adds	r3, #16
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4611      	mov	r1, r2
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fe8c 	bl	8006050 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800533a:	f000 fa29 	bl	8005790 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800533e:	f000 fcd3 	bl	8005ce8 <xTaskResumeAll>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	f47f af7c 	bne.w	8005242 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800534a:	4b0c      	ldr	r3, [pc, #48]	; (800537c <xQueueGenericSend+0x1f8>)
 800534c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	e772      	b.n	8005242 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800535c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800535e:	f000 fa17 	bl	8005790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005362:	f000 fcc1 	bl	8005ce8 <xTaskResumeAll>
 8005366:	e76c      	b.n	8005242 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800536a:	f000 fa11 	bl	8005790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800536e:	f000 fcbb 	bl	8005ce8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005372:	2300      	movs	r3, #0
		}
	}
}
 8005374:	4618      	mov	r0, r3
 8005376:	3738      	adds	r7, #56	; 0x38
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	e000ed04 	.word	0xe000ed04

08005380 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08e      	sub	sp, #56	; 0x38
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d103      	bne.n	80053bc <xQueueGenericSendFromISR+0x3c>
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <xQueueGenericSendFromISR+0x40>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <xQueueGenericSendFromISR+0x42>
 80053c0:	2300      	movs	r3, #0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10a      	bne.n	80053dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	623b      	str	r3, [r7, #32]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d103      	bne.n	80053ea <xQueueGenericSendFromISR+0x6a>
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <xQueueGenericSendFromISR+0x6e>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <xQueueGenericSendFromISR+0x70>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	61fb      	str	r3, [r7, #28]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800540a:	f001 fac1 	bl	8006990 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800540e:	f3ef 8211 	mrs	r2, BASEPRI
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	61ba      	str	r2, [r7, #24]
 8005424:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005426:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	429a      	cmp	r2, r3
 8005434:	d302      	bcc.n	800543c <xQueueGenericSendFromISR+0xbc>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d12c      	bne.n	8005496 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544c:	f000 f910 	bl	8005670 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005450:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d112      	bne.n	8005480 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	3324      	adds	r3, #36	; 0x24
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fe16 	bl	8006098 <xTaskRemoveFromEventList>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00e      	beq.n	8005490 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00b      	beq.n	8005490 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e007      	b.n	8005490 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005480:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005484:	3301      	adds	r3, #1
 8005486:	b2db      	uxtb	r3, r3
 8005488:	b25a      	sxtb	r2, r3
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005490:	2301      	movs	r3, #1
 8005492:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005494:	e001      	b.n	800549a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005496:	2300      	movs	r3, #0
 8005498:	637b      	str	r3, [r7, #52]	; 0x34
 800549a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3738      	adds	r7, #56	; 0x38
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	; 0x30
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054bc:	2300      	movs	r3, #0
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <xQueueReceive+0x30>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	623b      	str	r3, [r7, #32]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <xQueueReceive+0x3e>
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <xQueueReceive+0x42>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <xQueueReceive+0x44>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xQueueReceive+0x5e>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	61fb      	str	r3, [r7, #28]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800550e:	f000 ff83 	bl	8006418 <xTaskGetSchedulerState>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <xQueueReceive+0x6e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <xQueueReceive+0x72>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <xQueueReceive+0x74>
 8005522:	2300      	movs	r3, #0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10a      	bne.n	800553e <xQueueReceive+0x8e>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	61bb      	str	r3, [r7, #24]
}
 800553a:	bf00      	nop
 800553c:	e7fe      	b.n	800553c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800553e:	f001 f965 	bl	800680c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	2b00      	cmp	r3, #0
 800554c:	d01f      	beq.n	800558e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005552:	f000 f8f7 	bl	8005744 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	1e5a      	subs	r2, r3, #1
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00f      	beq.n	8005586 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	3310      	adds	r3, #16
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fd94 	bl	8006098 <xTaskRemoveFromEventList>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d007      	beq.n	8005586 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005576:	4b3d      	ldr	r3, [pc, #244]	; (800566c <xQueueReceive+0x1bc>)
 8005578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005586:	f001 f971 	bl	800686c <vPortExitCritical>
				return pdPASS;
 800558a:	2301      	movs	r3, #1
 800558c:	e069      	b.n	8005662 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d103      	bne.n	800559c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005594:	f001 f96a 	bl	800686c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005598:	2300      	movs	r3, #0
 800559a:	e062      	b.n	8005662 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055a2:	f107 0310 	add.w	r3, r7, #16
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fdd8 	bl	800615c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ac:	2301      	movs	r3, #1
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055b0:	f001 f95c 	bl	800686c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055b4:	f000 fb8a 	bl	8005ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055b8:	f001 f928 	bl	800680c <vPortEnterCritical>
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055c2:	b25b      	sxtb	r3, r3
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d103      	bne.n	80055d2 <xQueueReceive+0x122>
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055d8:	b25b      	sxtb	r3, r3
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d103      	bne.n	80055e8 <xQueueReceive+0x138>
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055e8:	f001 f940 	bl	800686c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055ec:	1d3a      	adds	r2, r7, #4
 80055ee:	f107 0310 	add.w	r3, r7, #16
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fdc7 	bl	8006188 <xTaskCheckForTimeOut>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d123      	bne.n	8005648 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005602:	f000 f917 	bl	8005834 <prvIsQueueEmpty>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d017      	beq.n	800563c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	3324      	adds	r3, #36	; 0x24
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	4611      	mov	r1, r2
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fd1b 	bl	8006050 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800561a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800561c:	f000 f8b8 	bl	8005790 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005620:	f000 fb62 	bl	8005ce8 <xTaskResumeAll>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d189      	bne.n	800553e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <xQueueReceive+0x1bc>)
 800562c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	e780      	b.n	800553e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800563c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563e:	f000 f8a7 	bl	8005790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005642:	f000 fb51 	bl	8005ce8 <xTaskResumeAll>
 8005646:	e77a      	b.n	800553e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800564a:	f000 f8a1 	bl	8005790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800564e:	f000 fb4b 	bl	8005ce8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005654:	f000 f8ee 	bl	8005834 <prvIsQueueEmpty>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	f43f af6f 	beq.w	800553e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005662:	4618      	mov	r0, r3
 8005664:	3730      	adds	r7, #48	; 0x30
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10d      	bne.n	80056aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d14d      	bne.n	8005732 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	4618      	mov	r0, r3
 800569c:	f000 feda 	bl	8006454 <xTaskPriorityDisinherit>
 80056a0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	605a      	str	r2, [r3, #4]
 80056a8:	e043      	b.n	8005732 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d119      	bne.n	80056e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6898      	ldr	r0, [r3, #8]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	461a      	mov	r2, r3
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	f001 fba2 	bl	8006e04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	441a      	add	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d32b      	bcc.n	8005732 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	609a      	str	r2, [r3, #8]
 80056e2:	e026      	b.n	8005732 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	68d8      	ldr	r0, [r3, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	461a      	mov	r2, r3
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	f001 fb88 	bl	8006e04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	425b      	negs	r3, r3
 80056fe:	441a      	add	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d207      	bcs.n	8005720 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	425b      	negs	r3, r3
 800571a:	441a      	add	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d105      	bne.n	8005732 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	3b01      	subs	r3, #1
 8005730:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800573a:	697b      	ldr	r3, [r7, #20]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d018      	beq.n	8005788 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	441a      	add	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	429a      	cmp	r2, r3
 800576e:	d303      	bcc.n	8005778 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68d9      	ldr	r1, [r3, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	461a      	mov	r2, r3
 8005782:	6838      	ldr	r0, [r7, #0]
 8005784:	f001 fb3e 	bl	8006e04 <memcpy>
	}
}
 8005788:	bf00      	nop
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005798:	f001 f838 	bl	800680c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057a4:	e011      	b.n	80057ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d012      	beq.n	80057d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3324      	adds	r3, #36	; 0x24
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fc70 	bl	8006098 <xTaskRemoveFromEventList>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057be:	f000 fd45 	bl	800624c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	dce9      	bgt.n	80057a6 <prvUnlockQueue+0x16>
 80057d2:	e000      	b.n	80057d6 <prvUnlockQueue+0x46>
					break;
 80057d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	22ff      	movs	r2, #255	; 0xff
 80057da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80057de:	f001 f845 	bl	800686c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057e2:	f001 f813 	bl	800680c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ee:	e011      	b.n	8005814 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3310      	adds	r3, #16
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fc4b 	bl	8006098 <xTaskRemoveFromEventList>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005808:	f000 fd20 	bl	800624c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800580c:	7bbb      	ldrb	r3, [r7, #14]
 800580e:	3b01      	subs	r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005818:	2b00      	cmp	r3, #0
 800581a:	dce9      	bgt.n	80057f0 <prvUnlockQueue+0x60>
 800581c:	e000      	b.n	8005820 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800581e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	22ff      	movs	r2, #255	; 0xff
 8005824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005828:	f001 f820 	bl	800686c <vPortExitCritical>
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800583c:	f000 ffe6 	bl	800680c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005848:	2301      	movs	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e001      	b.n	8005852 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005852:	f001 f80b 	bl	800686c <vPortExitCritical>

	return xReturn;
 8005856:	68fb      	ldr	r3, [r7, #12]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005868:	f000 ffd0 	bl	800680c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005874:	429a      	cmp	r2, r3
 8005876:	d102      	bne.n	800587e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005878:	2301      	movs	r3, #1
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	e001      	b.n	8005882 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005882:	f000 fff3 	bl	800686c <vPortExitCritical>

	return xReturn;
 8005886:	68fb      	ldr	r3, [r7, #12]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08e      	sub	sp, #56	; 0x38
 8005894:	af04      	add	r7, sp, #16
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	623b      	str	r3, [r7, #32]
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	61fb      	str	r3, [r7, #28]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058d6:	2354      	movs	r3, #84	; 0x54
 80058d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b54      	cmp	r3, #84	; 0x54
 80058de:	d00a      	beq.n	80058f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	61bb      	str	r3, [r7, #24]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01e      	beq.n	800593a <xTaskCreateStatic+0xaa>
 80058fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d01b      	beq.n	800593a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800590a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	2202      	movs	r2, #2
 8005910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005914:	2300      	movs	r3, #0
 8005916:	9303      	str	r3, [sp, #12]
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	9302      	str	r3, [sp, #8]
 800591c:	f107 0314 	add.w	r3, r7, #20
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f850 	bl	80059d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005934:	f000 f8cc 	bl	8005ad0 <prvAddNewTaskToReadyList>
 8005938:	e001      	b.n	800593e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800593e:	697b      	ldr	r3, [r7, #20]
	}
 8005940:	4618      	mov	r0, r3
 8005942:	3728      	adds	r7, #40	; 0x28
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08c      	sub	sp, #48	; 0x30
 800594c:	af04      	add	r7, sp, #16
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4618      	mov	r0, r3
 800595e:	f001 f855 	bl	8006a0c <pvPortMalloc>
 8005962:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00e      	beq.n	8005988 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800596a:	2054      	movs	r0, #84	; 0x54
 800596c:	f001 f84e 	bl	8006a0c <pvPortMalloc>
 8005970:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	631a      	str	r2, [r3, #48]	; 0x30
 800597e:	e005      	b.n	800598c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005980:	6978      	ldr	r0, [r7, #20]
 8005982:	f001 f907 	bl	8006b94 <vPortFree>
 8005986:	e001      	b.n	800598c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d017      	beq.n	80059c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800599a:	88fa      	ldrh	r2, [r7, #6]
 800599c:	2300      	movs	r3, #0
 800599e:	9303      	str	r3, [sp, #12]
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	9302      	str	r3, [sp, #8]
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f80e 	bl	80059d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059b6:	69f8      	ldr	r0, [r7, #28]
 80059b8:	f000 f88a 	bl	8005ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059bc:	2301      	movs	r3, #1
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	e002      	b.n	80059c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059c2:	f04f 33ff 	mov.w	r3, #4294967295
 80059c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059c8:	69bb      	ldr	r3, [r7, #24]
	}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b088      	sub	sp, #32
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
 80059de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059ea:	3b01      	subs	r3, #1
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f023 0307 	bic.w	r3, r3, #7
 80059f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <prvInitialiseNewTask+0x48>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	617b      	str	r3, [r7, #20]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]
 8005a1e:	e012      	b.n	8005a46 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	7819      	ldrb	r1, [r3, #0]
 8005a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3334      	adds	r3, #52	; 0x34
 8005a30:	460a      	mov	r2, r1
 8005a32:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d006      	beq.n	8005a4e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3301      	adds	r3, #1
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	2b0f      	cmp	r3, #15
 8005a4a:	d9e9      	bls.n	8005a20 <prvInitialiseNewTask+0x4e>
 8005a4c:	e000      	b.n	8005a50 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005a4e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	2b06      	cmp	r3, #6
 8005a5c:	d901      	bls.n	8005a62 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a5e:	2306      	movs	r3, #6
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	2200      	movs	r2, #0
 8005a72:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	3304      	adds	r3, #4
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fa2c 	bl	8004ed6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	3318      	adds	r3, #24
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff fa27 	bl	8004ed6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	f1c3 0207 	rsb	r2, r3, #7
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	69b8      	ldr	r0, [r7, #24]
 8005ab2:	f000 fdbb 	bl	800662c <pxPortInitialiseStack>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ac8:	bf00      	nop
 8005aca:	3720      	adds	r7, #32
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ad8:	f000 fe98 	bl	800680c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005adc:	4b2a      	ldr	r3, [pc, #168]	; (8005b88 <prvAddNewTaskToReadyList+0xb8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	4a29      	ldr	r2, [pc, #164]	; (8005b88 <prvAddNewTaskToReadyList+0xb8>)
 8005ae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ae6:	4b29      	ldr	r3, [pc, #164]	; (8005b8c <prvAddNewTaskToReadyList+0xbc>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005aee:	4a27      	ldr	r2, [pc, #156]	; (8005b8c <prvAddNewTaskToReadyList+0xbc>)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005af4:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <prvAddNewTaskToReadyList+0xb8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d110      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005afc:	f000 fbca 	bl	8006294 <prvInitialiseTaskLists>
 8005b00:	e00d      	b.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b02:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <prvAddNewTaskToReadyList+0xc0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b0a:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <prvAddNewTaskToReadyList+0xbc>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d802      	bhi.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b18:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <prvAddNewTaskToReadyList+0xbc>)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b1e:	4b1d      	ldr	r3, [pc, #116]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3301      	adds	r3, #1
 8005b24:	4a1b      	ldr	r2, [pc, #108]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005b26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	4a18      	ldr	r2, [pc, #96]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <prvAddNewTaskToReadyList+0xcc>)
 8005b48:	441a      	add	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f7ff f9cc 	bl	8004eee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b56:	f000 fe89 	bl	800686c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <prvAddNewTaskToReadyList+0xc0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00e      	beq.n	8005b80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b62:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <prvAddNewTaskToReadyList+0xbc>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d207      	bcs.n	8005b80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <prvAddNewTaskToReadyList+0xd0>)
 8005b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	200005a4 	.word	0x200005a4
 8005b8c:	200004a4 	.word	0x200004a4
 8005b90:	200005b0 	.word	0x200005b0
 8005b94:	200005c0 	.word	0x200005c0
 8005b98:	200005ac 	.word	0x200005ac
 8005b9c:	200004a8 	.word	0x200004a8
 8005ba0:	e000ed04 	.word	0xe000ed04

08005ba4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d017      	beq.n	8005be6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bb6:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <vTaskDelay+0x60>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <vTaskDelay+0x30>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60bb      	str	r3, [r7, #8]
}
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bd4:	f000 f87a 	bl	8005ccc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bd8:	2100      	movs	r1, #0
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fcc0 	bl	8006560 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005be0:	f000 f882 	bl	8005ce8 <xTaskResumeAll>
 8005be4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d107      	bne.n	8005bfc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <vTaskDelay+0x64>)
 8005bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bfc:	bf00      	nop
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	200005cc 	.word	0x200005cc
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08a      	sub	sp, #40	; 0x28
 8005c10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c1a:	463a      	mov	r2, r7
 8005c1c:	1d39      	adds	r1, r7, #4
 8005c1e:	f107 0308 	add.w	r3, r7, #8
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fa fd18 	bl	8000658 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	9202      	str	r2, [sp, #8]
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	2300      	movs	r3, #0
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	2300      	movs	r3, #0
 8005c38:	460a      	mov	r2, r1
 8005c3a:	491e      	ldr	r1, [pc, #120]	; (8005cb4 <vTaskStartScheduler+0xa8>)
 8005c3c:	481e      	ldr	r0, [pc, #120]	; (8005cb8 <vTaskStartScheduler+0xac>)
 8005c3e:	f7ff fe27 	bl	8005890 <xTaskCreateStatic>
 8005c42:	4603      	mov	r3, r0
 8005c44:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <vTaskStartScheduler+0xb0>)
 8005c46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c48:	4b1c      	ldr	r3, [pc, #112]	; (8005cbc <vTaskStartScheduler+0xb0>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c50:	2301      	movs	r3, #1
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	e001      	b.n	8005c5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d116      	bne.n	8005c8e <vTaskStartScheduler+0x82>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	613b      	str	r3, [r7, #16]
}
 8005c72:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c74:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <vTaskStartScheduler+0xb4>)
 8005c76:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c7c:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <vTaskStartScheduler+0xb8>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005c82:	4b11      	ldr	r3, [pc, #68]	; (8005cc8 <vTaskStartScheduler+0xbc>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c88:	f000 fd4e 	bl	8006728 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c8c:	e00e      	b.n	8005cac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c94:	d10a      	bne.n	8005cac <vTaskStartScheduler+0xa0>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	60fb      	str	r3, [r7, #12]
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <vTaskStartScheduler+0x9e>
}
 8005cac:	bf00      	nop
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	08006f90 	.word	0x08006f90
 8005cb8:	08006265 	.word	0x08006265
 8005cbc:	200005c8 	.word	0x200005c8
 8005cc0:	200005c4 	.word	0x200005c4
 8005cc4:	200005b0 	.word	0x200005b0
 8005cc8:	200005a8 	.word	0x200005a8

08005ccc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005cd0:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <vTaskSuspendAll+0x18>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	4a03      	ldr	r2, [pc, #12]	; (8005ce4 <vTaskSuspendAll+0x18>)
 8005cd8:	6013      	str	r3, [r2, #0]
}
 8005cda:	bf00      	nop
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	200005cc 	.word	0x200005cc

08005ce8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cf6:	4b41      	ldr	r3, [pc, #260]	; (8005dfc <xTaskResumeAll+0x114>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <xTaskResumeAll+0x2c>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	603b      	str	r3, [r7, #0]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d14:	f000 fd7a 	bl	800680c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d18:	4b38      	ldr	r3, [pc, #224]	; (8005dfc <xTaskResumeAll+0x114>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	4a37      	ldr	r2, [pc, #220]	; (8005dfc <xTaskResumeAll+0x114>)
 8005d20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d22:	4b36      	ldr	r3, [pc, #216]	; (8005dfc <xTaskResumeAll+0x114>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d161      	bne.n	8005dee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d2a:	4b35      	ldr	r3, [pc, #212]	; (8005e00 <xTaskResumeAll+0x118>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d05d      	beq.n	8005dee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d32:	e02e      	b.n	8005d92 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005d34:	4b33      	ldr	r3, [pc, #204]	; (8005e04 <xTaskResumeAll+0x11c>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3318      	adds	r3, #24
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff f92f 	bl	8004fa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff f92a 	bl	8004fa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	2201      	movs	r2, #1
 8005d56:	409a      	lsls	r2, r3
 8005d58:	4b2b      	ldr	r3, [pc, #172]	; (8005e08 <xTaskResumeAll+0x120>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	4a2a      	ldr	r2, [pc, #168]	; (8005e08 <xTaskResumeAll+0x120>)
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4a27      	ldr	r2, [pc, #156]	; (8005e0c <xTaskResumeAll+0x124>)
 8005d70:	441a      	add	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3304      	adds	r3, #4
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f7ff f8b8 	bl	8004eee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d82:	4b23      	ldr	r3, [pc, #140]	; (8005e10 <xTaskResumeAll+0x128>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d302      	bcc.n	8005d92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d8c:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <xTaskResumeAll+0x12c>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d92:	4b1c      	ldr	r3, [pc, #112]	; (8005e04 <xTaskResumeAll+0x11c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1cc      	bne.n	8005d34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005da0:	f000 fb16 	bl	80063d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005da4:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <xTaskResumeAll+0x130>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d010      	beq.n	8005dd2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005db0:	f000 f836 	bl	8005e20 <xTaskIncrementTick>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005dba:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <xTaskResumeAll+0x12c>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1f1      	bne.n	8005db0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005dcc:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <xTaskResumeAll+0x130>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dd2:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <xTaskResumeAll+0x12c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dde:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <xTaskResumeAll+0x134>)
 8005de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dee:	f000 fd3d 	bl	800686c <vPortExitCritical>

	return xAlreadyYielded;
 8005df2:	68bb      	ldr	r3, [r7, #8]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	200005cc 	.word	0x200005cc
 8005e00:	200005a4 	.word	0x200005a4
 8005e04:	20000564 	.word	0x20000564
 8005e08:	200005ac 	.word	0x200005ac
 8005e0c:	200004a8 	.word	0x200004a8
 8005e10:	200004a4 	.word	0x200004a4
 8005e14:	200005b8 	.word	0x200005b8
 8005e18:	200005b4 	.word	0x200005b4
 8005e1c:	e000ed04 	.word	0xe000ed04

08005e20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e2a:	4b51      	ldr	r3, [pc, #324]	; (8005f70 <xTaskIncrementTick+0x150>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 808d 	bne.w	8005f4e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e34:	4b4f      	ldr	r3, [pc, #316]	; (8005f74 <xTaskIncrementTick+0x154>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e3c:	4a4d      	ldr	r2, [pc, #308]	; (8005f74 <xTaskIncrementTick+0x154>)
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d120      	bne.n	8005e8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e48:	4b4b      	ldr	r3, [pc, #300]	; (8005f78 <xTaskIncrementTick+0x158>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	603b      	str	r3, [r7, #0]
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <xTaskIncrementTick+0x46>
 8005e68:	4b43      	ldr	r3, [pc, #268]	; (8005f78 <xTaskIncrementTick+0x158>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	4b43      	ldr	r3, [pc, #268]	; (8005f7c <xTaskIncrementTick+0x15c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a41      	ldr	r2, [pc, #260]	; (8005f78 <xTaskIncrementTick+0x158>)
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	4a41      	ldr	r2, [pc, #260]	; (8005f7c <xTaskIncrementTick+0x15c>)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	4b40      	ldr	r3, [pc, #256]	; (8005f80 <xTaskIncrementTick+0x160>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3301      	adds	r3, #1
 8005e82:	4a3f      	ldr	r2, [pc, #252]	; (8005f80 <xTaskIncrementTick+0x160>)
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	f000 faa3 	bl	80063d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e8a:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <xTaskIncrementTick+0x164>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d34d      	bcc.n	8005f30 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e94:	4b38      	ldr	r3, [pc, #224]	; (8005f78 <xTaskIncrementTick+0x158>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <xTaskIncrementTick+0x82>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <xTaskIncrementTick+0x84>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea8:	4b36      	ldr	r3, [pc, #216]	; (8005f84 <xTaskIncrementTick+0x164>)
 8005eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8005eae:	601a      	str	r2, [r3, #0]
					break;
 8005eb0:	e03e      	b.n	8005f30 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005eb2:	4b31      	ldr	r3, [pc, #196]	; (8005f78 <xTaskIncrementTick+0x158>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d203      	bcs.n	8005ed2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005eca:	4a2e      	ldr	r2, [pc, #184]	; (8005f84 <xTaskIncrementTick+0x164>)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6013      	str	r3, [r2, #0]
						break;
 8005ed0:	e02e      	b.n	8005f30 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff f864 	bl	8004fa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	3318      	adds	r3, #24
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff f85b 	bl	8004fa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	409a      	lsls	r2, r3
 8005ef6:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <xTaskIncrementTick+0x168>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	4a22      	ldr	r2, [pc, #136]	; (8005f88 <xTaskIncrementTick+0x168>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <xTaskIncrementTick+0x16c>)
 8005f0e:	441a      	add	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7fe ffe9 	bl	8004eee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f20:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <xTaskIncrementTick+0x170>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d3b4      	bcc.n	8005e94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f2e:	e7b1      	b.n	8005e94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f30:	4b17      	ldr	r3, [pc, #92]	; (8005f90 <xTaskIncrementTick+0x170>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f36:	4915      	ldr	r1, [pc, #84]	; (8005f8c <xTaskIncrementTick+0x16c>)
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d907      	bls.n	8005f58 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e004      	b.n	8005f58 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f4e:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <xTaskIncrementTick+0x174>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	4a0f      	ldr	r2, [pc, #60]	; (8005f94 <xTaskIncrementTick+0x174>)
 8005f56:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f58:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <xTaskIncrementTick+0x178>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005f60:	2301      	movs	r3, #1
 8005f62:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f64:	697b      	ldr	r3, [r7, #20]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	200005cc 	.word	0x200005cc
 8005f74:	200005a8 	.word	0x200005a8
 8005f78:	2000055c 	.word	0x2000055c
 8005f7c:	20000560 	.word	0x20000560
 8005f80:	200005bc 	.word	0x200005bc
 8005f84:	200005c4 	.word	0x200005c4
 8005f88:	200005ac 	.word	0x200005ac
 8005f8c:	200004a8 	.word	0x200004a8
 8005f90:	200004a4 	.word	0x200004a4
 8005f94:	200005b4 	.word	0x200005b4
 8005f98:	200005b8 	.word	0x200005b8

08005f9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fa2:	4b26      	ldr	r3, [pc, #152]	; (800603c <vTaskSwitchContext+0xa0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005faa:	4b25      	ldr	r3, [pc, #148]	; (8006040 <vTaskSwitchContext+0xa4>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fb0:	e03f      	b.n	8006032 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005fb2:	4b23      	ldr	r3, [pc, #140]	; (8006040 <vTaskSwitchContext+0xa4>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005fb8:	4b22      	ldr	r3, [pc, #136]	; (8006044 <vTaskSwitchContext+0xa8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	fab3 f383 	clz	r3, r3
 8005fc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fc6:	7afb      	ldrb	r3, [r7, #11]
 8005fc8:	f1c3 031f 	rsb	r3, r3, #31
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	491e      	ldr	r1, [pc, #120]	; (8006048 <vTaskSwitchContext+0xac>)
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	440b      	add	r3, r1
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10a      	bne.n	8005ff8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	607b      	str	r3, [r7, #4]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <vTaskSwitchContext+0x5a>
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4a11      	ldr	r2, [pc, #68]	; (8006048 <vTaskSwitchContext+0xac>)
 8006004:	4413      	add	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	3308      	adds	r3, #8
 800601a:	429a      	cmp	r2, r3
 800601c:	d104      	bne.n	8006028 <vTaskSwitchContext+0x8c>
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	605a      	str	r2, [r3, #4]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	4a07      	ldr	r2, [pc, #28]	; (800604c <vTaskSwitchContext+0xb0>)
 8006030:	6013      	str	r3, [r2, #0]
}
 8006032:	bf00      	nop
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	4770      	bx	lr
 800603c:	200005cc 	.word	0x200005cc
 8006040:	200005b8 	.word	0x200005b8
 8006044:	200005ac 	.word	0x200005ac
 8006048:	200004a8 	.word	0x200004a8
 800604c:	200004a4 	.word	0x200004a4

08006050 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	60fb      	str	r3, [r7, #12]
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006076:	4b07      	ldr	r3, [pc, #28]	; (8006094 <vTaskPlaceOnEventList+0x44>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3318      	adds	r3, #24
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fe ff58 	bl	8004f34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006084:	2101      	movs	r1, #1
 8006086:	6838      	ldr	r0, [r7, #0]
 8006088:	f000 fa6a 	bl	8006560 <prvAddCurrentTaskToDelayedList>
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	200004a4 	.word	0x200004a4

08006098 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	60fb      	str	r3, [r7, #12]
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	3318      	adds	r3, #24
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fe ff6b 	bl	8004fa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ce:	4b1d      	ldr	r3, [pc, #116]	; (8006144 <xTaskRemoveFromEventList+0xac>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d11c      	bne.n	8006110 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	3304      	adds	r3, #4
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe ff62 	bl	8004fa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	2201      	movs	r2, #1
 80060e6:	409a      	lsls	r2, r3
 80060e8:	4b17      	ldr	r3, [pc, #92]	; (8006148 <xTaskRemoveFromEventList+0xb0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	4a16      	ldr	r2, [pc, #88]	; (8006148 <xTaskRemoveFromEventList+0xb0>)
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4a13      	ldr	r2, [pc, #76]	; (800614c <xTaskRemoveFromEventList+0xb4>)
 8006100:	441a      	add	r2, r3
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	3304      	adds	r3, #4
 8006106:	4619      	mov	r1, r3
 8006108:	4610      	mov	r0, r2
 800610a:	f7fe fef0 	bl	8004eee <vListInsertEnd>
 800610e:	e005      	b.n	800611c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	3318      	adds	r3, #24
 8006114:	4619      	mov	r1, r3
 8006116:	480e      	ldr	r0, [pc, #56]	; (8006150 <xTaskRemoveFromEventList+0xb8>)
 8006118:	f7fe fee9 	bl	8004eee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006120:	4b0c      	ldr	r3, [pc, #48]	; (8006154 <xTaskRemoveFromEventList+0xbc>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	429a      	cmp	r2, r3
 8006128:	d905      	bls.n	8006136 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800612a:	2301      	movs	r3, #1
 800612c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800612e:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <xTaskRemoveFromEventList+0xc0>)
 8006130:	2201      	movs	r2, #1
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	e001      	b.n	800613a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800613a:	697b      	ldr	r3, [r7, #20]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	200005cc 	.word	0x200005cc
 8006148:	200005ac 	.word	0x200005ac
 800614c:	200004a8 	.word	0x200004a8
 8006150:	20000564 	.word	0x20000564
 8006154:	200004a4 	.word	0x200004a4
 8006158:	200005b8 	.word	0x200005b8

0800615c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <vTaskInternalSetTimeOutState+0x24>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800616c:	4b05      	ldr	r3, [pc, #20]	; (8006184 <vTaskInternalSetTimeOutState+0x28>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	605a      	str	r2, [r3, #4]
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	bc80      	pop	{r7}
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	200005bc 	.word	0x200005bc
 8006184:	200005a8 	.word	0x200005a8

08006188 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	613b      	str	r3, [r7, #16]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	60fb      	str	r3, [r7, #12]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80061ca:	f000 fb1f 	bl	800680c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061ce:	4b1d      	ldr	r3, [pc, #116]	; (8006244 <xTaskCheckForTimeOut+0xbc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d102      	bne.n	80061ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	e023      	b.n	8006236 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <xTaskCheckForTimeOut+0xc0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d007      	beq.n	800620a <xTaskCheckForTimeOut+0x82>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	429a      	cmp	r2, r3
 8006202:	d302      	bcc.n	800620a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	e015      	b.n	8006236 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	429a      	cmp	r2, r3
 8006212:	d20b      	bcs.n	800622c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1ad2      	subs	r2, r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff ff9b 	bl	800615c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006226:	2300      	movs	r3, #0
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	e004      	b.n	8006236 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006232:	2301      	movs	r3, #1
 8006234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006236:	f000 fb19 	bl	800686c <vPortExitCritical>

	return xReturn;
 800623a:	69fb      	ldr	r3, [r7, #28]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	200005a8 	.word	0x200005a8
 8006248:	200005bc 	.word	0x200005bc

0800624c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006250:	4b03      	ldr	r3, [pc, #12]	; (8006260 <vTaskMissedYield+0x14>)
 8006252:	2201      	movs	r2, #1
 8006254:	601a      	str	r2, [r3, #0]
}
 8006256:	bf00      	nop
 8006258:	46bd      	mov	sp, r7
 800625a:	bc80      	pop	{r7}
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	200005b8 	.word	0x200005b8

08006264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800626c:	f000 f852 	bl	8006314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006270:	4b06      	ldr	r3, [pc, #24]	; (800628c <prvIdleTask+0x28>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d9f9      	bls.n	800626c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006278:	4b05      	ldr	r3, [pc, #20]	; (8006290 <prvIdleTask+0x2c>)
 800627a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006288:	e7f0      	b.n	800626c <prvIdleTask+0x8>
 800628a:	bf00      	nop
 800628c:	200004a8 	.word	0x200004a8
 8006290:	e000ed04 	.word	0xe000ed04

08006294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800629a:	2300      	movs	r3, #0
 800629c:	607b      	str	r3, [r7, #4]
 800629e:	e00c      	b.n	80062ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4a12      	ldr	r2, [pc, #72]	; (80062f4 <prvInitialiseTaskLists+0x60>)
 80062ac:	4413      	add	r3, r2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fdf2 	bl	8004e98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3301      	adds	r3, #1
 80062b8:	607b      	str	r3, [r7, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b06      	cmp	r3, #6
 80062be:	d9ef      	bls.n	80062a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062c0:	480d      	ldr	r0, [pc, #52]	; (80062f8 <prvInitialiseTaskLists+0x64>)
 80062c2:	f7fe fde9 	bl	8004e98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062c6:	480d      	ldr	r0, [pc, #52]	; (80062fc <prvInitialiseTaskLists+0x68>)
 80062c8:	f7fe fde6 	bl	8004e98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062cc:	480c      	ldr	r0, [pc, #48]	; (8006300 <prvInitialiseTaskLists+0x6c>)
 80062ce:	f7fe fde3 	bl	8004e98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062d2:	480c      	ldr	r0, [pc, #48]	; (8006304 <prvInitialiseTaskLists+0x70>)
 80062d4:	f7fe fde0 	bl	8004e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062d8:	480b      	ldr	r0, [pc, #44]	; (8006308 <prvInitialiseTaskLists+0x74>)
 80062da:	f7fe fddd 	bl	8004e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062de:	4b0b      	ldr	r3, [pc, #44]	; (800630c <prvInitialiseTaskLists+0x78>)
 80062e0:	4a05      	ldr	r2, [pc, #20]	; (80062f8 <prvInitialiseTaskLists+0x64>)
 80062e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062e4:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <prvInitialiseTaskLists+0x7c>)
 80062e6:	4a05      	ldr	r2, [pc, #20]	; (80062fc <prvInitialiseTaskLists+0x68>)
 80062e8:	601a      	str	r2, [r3, #0]
}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	200004a8 	.word	0x200004a8
 80062f8:	20000534 	.word	0x20000534
 80062fc:	20000548 	.word	0x20000548
 8006300:	20000564 	.word	0x20000564
 8006304:	20000578 	.word	0x20000578
 8006308:	20000590 	.word	0x20000590
 800630c:	2000055c 	.word	0x2000055c
 8006310:	20000560 	.word	0x20000560

08006314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800631a:	e019      	b.n	8006350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800631c:	f000 fa76 	bl	800680c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006320:	4b10      	ldr	r3, [pc, #64]	; (8006364 <prvCheckTasksWaitingTermination+0x50>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3304      	adds	r3, #4
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe fe39 	bl	8004fa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006332:	4b0d      	ldr	r3, [pc, #52]	; (8006368 <prvCheckTasksWaitingTermination+0x54>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3b01      	subs	r3, #1
 8006338:	4a0b      	ldr	r2, [pc, #44]	; (8006368 <prvCheckTasksWaitingTermination+0x54>)
 800633a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <prvCheckTasksWaitingTermination+0x58>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3b01      	subs	r3, #1
 8006342:	4a0a      	ldr	r2, [pc, #40]	; (800636c <prvCheckTasksWaitingTermination+0x58>)
 8006344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006346:	f000 fa91 	bl	800686c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f810 	bl	8006370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006350:	4b06      	ldr	r3, [pc, #24]	; (800636c <prvCheckTasksWaitingTermination+0x58>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e1      	bne.n	800631c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000578 	.word	0x20000578
 8006368:	200005a4 	.word	0x200005a4
 800636c:	2000058c 	.word	0x2000058c

08006370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800637e:	2b00      	cmp	r3, #0
 8006380:	d108      	bne.n	8006394 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fc04 	bl	8006b94 <vPortFree>
				vPortFree( pxTCB );
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fc01 	bl	8006b94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006392:	e018      	b.n	80063c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800639a:	2b01      	cmp	r3, #1
 800639c:	d103      	bne.n	80063a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fbf8 	bl	8006b94 <vPortFree>
	}
 80063a4:	e00f      	b.n	80063c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d00a      	beq.n	80063c6 <prvDeleteTCB+0x56>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	60fb      	str	r3, [r7, #12]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <prvDeleteTCB+0x54>
	}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d6:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <prvResetNextTaskUnblockTime+0x40>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <prvResetNextTaskUnblockTime+0x14>
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <prvResetNextTaskUnblockTime+0x16>
 80063e4:	2300      	movs	r3, #0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063ea:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <prvResetNextTaskUnblockTime+0x44>)
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063f2:	e008      	b.n	8006406 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063f4:	4b06      	ldr	r3, [pc, #24]	; (8006410 <prvResetNextTaskUnblockTime+0x40>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	4a04      	ldr	r2, [pc, #16]	; (8006414 <prvResetNextTaskUnblockTime+0x44>)
 8006404:	6013      	str	r3, [r2, #0]
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr
 8006410:	2000055c 	.word	0x2000055c
 8006414:	200005c4 	.word	0x200005c4

08006418 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800641e:	4b0b      	ldr	r3, [pc, #44]	; (800644c <xTaskGetSchedulerState+0x34>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d102      	bne.n	800642c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006426:	2301      	movs	r3, #1
 8006428:	607b      	str	r3, [r7, #4]
 800642a:	e008      	b.n	800643e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800642c:	4b08      	ldr	r3, [pc, #32]	; (8006450 <xTaskGetSchedulerState+0x38>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006434:	2302      	movs	r3, #2
 8006436:	607b      	str	r3, [r7, #4]
 8006438:	e001      	b.n	800643e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800643a:	2300      	movs	r3, #0
 800643c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800643e:	687b      	ldr	r3, [r7, #4]
	}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	200005b0 	.word	0x200005b0
 8006450:	200005cc 	.word	0x200005cc

08006454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d06e      	beq.n	8006548 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800646a:	4b3a      	ldr	r3, [pc, #232]	; (8006554 <xTaskPriorityDisinherit+0x100>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	429a      	cmp	r2, r3
 8006472:	d00a      	beq.n	800648a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	60fb      	str	r3, [r7, #12]
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	60bb      	str	r3, [r7, #8]
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ac:	1e5a      	subs	r2, r3, #1
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d044      	beq.n	8006548 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d140      	bne.n	8006548 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	3304      	adds	r3, #4
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe fd6a 	bl	8004fa4 <uxListRemove>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d115      	bne.n	8006502 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064da:	491f      	ldr	r1, [pc, #124]	; (8006558 <xTaskPriorityDisinherit+0x104>)
 80064dc:	4613      	mov	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	440b      	add	r3, r1
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <xTaskPriorityDisinherit+0xae>
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	2201      	movs	r2, #1
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	43da      	mvns	r2, r3
 80064f8:	4b18      	ldr	r3, [pc, #96]	; (800655c <xTaskPriorityDisinherit+0x108>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4013      	ands	r3, r2
 80064fe:	4a17      	ldr	r2, [pc, #92]	; (800655c <xTaskPriorityDisinherit+0x108>)
 8006500:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650e:	f1c3 0207 	rsb	r2, r3, #7
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	2201      	movs	r2, #1
 800651c:	409a      	lsls	r2, r3
 800651e:	4b0f      	ldr	r3, [pc, #60]	; (800655c <xTaskPriorityDisinherit+0x108>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4313      	orrs	r3, r2
 8006524:	4a0d      	ldr	r2, [pc, #52]	; (800655c <xTaskPriorityDisinherit+0x108>)
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4a08      	ldr	r2, [pc, #32]	; (8006558 <xTaskPriorityDisinherit+0x104>)
 8006536:	441a      	add	r2, r3
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	3304      	adds	r3, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7fe fcd5 	bl	8004eee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006544:	2301      	movs	r3, #1
 8006546:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006548:	697b      	ldr	r3, [r7, #20]
	}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200004a4 	.word	0x200004a4
 8006558:	200004a8 	.word	0x200004a8
 800655c:	200005ac 	.word	0x200005ac

08006560 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800656a:	4b29      	ldr	r3, [pc, #164]	; (8006610 <prvAddCurrentTaskToDelayedList+0xb0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006570:	4b28      	ldr	r3, [pc, #160]	; (8006614 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3304      	adds	r3, #4
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fd14 	bl	8004fa4 <uxListRemove>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10b      	bne.n	800659a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006582:	4b24      	ldr	r3, [pc, #144]	; (8006614 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006588:	2201      	movs	r2, #1
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	43da      	mvns	r2, r3
 8006590:	4b21      	ldr	r3, [pc, #132]	; (8006618 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4013      	ands	r3, r2
 8006596:	4a20      	ldr	r2, [pc, #128]	; (8006618 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006598:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d10a      	bne.n	80065b8 <prvAddCurrentTaskToDelayedList+0x58>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d007      	beq.n	80065b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065a8:	4b1a      	ldr	r3, [pc, #104]	; (8006614 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3304      	adds	r3, #4
 80065ae:	4619      	mov	r1, r3
 80065b0:	481a      	ldr	r0, [pc, #104]	; (800661c <prvAddCurrentTaskToDelayedList+0xbc>)
 80065b2:	f7fe fc9c 	bl	8004eee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065b6:	e026      	b.n	8006606 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4413      	add	r3, r2
 80065be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065c0:	4b14      	ldr	r3, [pc, #80]	; (8006614 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d209      	bcs.n	80065e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065d0:	4b13      	ldr	r3, [pc, #76]	; (8006620 <prvAddCurrentTaskToDelayedList+0xc0>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3304      	adds	r3, #4
 80065da:	4619      	mov	r1, r3
 80065dc:	4610      	mov	r0, r2
 80065de:	f7fe fca9 	bl	8004f34 <vListInsert>
}
 80065e2:	e010      	b.n	8006606 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065e4:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <prvAddCurrentTaskToDelayedList+0xc4>)
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4619      	mov	r1, r3
 80065f0:	4610      	mov	r0, r2
 80065f2:	f7fe fc9f 	bl	8004f34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d202      	bcs.n	8006606 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006600:	4a09      	ldr	r2, [pc, #36]	; (8006628 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	6013      	str	r3, [r2, #0]
}
 8006606:	bf00      	nop
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	200005a8 	.word	0x200005a8
 8006614:	200004a4 	.word	0x200004a4
 8006618:	200005ac 	.word	0x200005ac
 800661c:	20000590 	.word	0x20000590
 8006620:	20000560 	.word	0x20000560
 8006624:	2000055c 	.word	0x2000055c
 8006628:	200005c4 	.word	0x200005c4

0800662c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3b04      	subs	r3, #4
 800663c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3b04      	subs	r3, #4
 800664a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f023 0201 	bic.w	r2, r3, #1
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3b04      	subs	r3, #4
 800665a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800665c:	4a08      	ldr	r2, [pc, #32]	; (8006680 <pxPortInitialiseStack+0x54>)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3b14      	subs	r3, #20
 8006666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3b20      	subs	r3, #32
 8006672:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006674:	68fb      	ldr	r3, [r7, #12]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr
 8006680:	08006685 	.word	0x08006685

08006684 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800668a:	2300      	movs	r3, #0
 800668c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800668e:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <prvTaskExitError+0x54>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d00a      	beq.n	80066ae <prvTaskExitError+0x2a>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	60fb      	str	r3, [r7, #12]
}
 80066aa:	bf00      	nop
 80066ac:	e7fe      	b.n	80066ac <prvTaskExitError+0x28>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	60bb      	str	r3, [r7, #8]
}
 80066c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066c2:	bf00      	nop
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0fc      	beq.n	80066c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	2000000c 	.word	0x2000000c
 80066dc:	00000000 	.word	0x00000000

080066e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066e0:	4b07      	ldr	r3, [pc, #28]	; (8006700 <pxCurrentTCBConst2>)
 80066e2:	6819      	ldr	r1, [r3, #0]
 80066e4:	6808      	ldr	r0, [r1, #0]
 80066e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066ea:	f380 8809 	msr	PSP, r0
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f380 8811 	msr	BASEPRI, r0
 80066fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80066fe:	4770      	bx	lr

08006700 <pxCurrentTCBConst2>:
 8006700:	200004a4 	.word	0x200004a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop

08006708 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006708:	4806      	ldr	r0, [pc, #24]	; (8006724 <prvPortStartFirstTask+0x1c>)
 800670a:	6800      	ldr	r0, [r0, #0]
 800670c:	6800      	ldr	r0, [r0, #0]
 800670e:	f380 8808 	msr	MSP, r0
 8006712:	b662      	cpsie	i
 8006714:	b661      	cpsie	f
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	df00      	svc	0
 8006720:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006722:	bf00      	nop
 8006724:	e000ed08 	.word	0xe000ed08

08006728 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800672e:	4b32      	ldr	r3, [pc, #200]	; (80067f8 <xPortStartScheduler+0xd0>)
 8006730:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	22ff      	movs	r2, #255	; 0xff
 800673e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006750:	b2da      	uxtb	r2, r3
 8006752:	4b2a      	ldr	r3, [pc, #168]	; (80067fc <xPortStartScheduler+0xd4>)
 8006754:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006756:	4b2a      	ldr	r3, [pc, #168]	; (8006800 <xPortStartScheduler+0xd8>)
 8006758:	2207      	movs	r2, #7
 800675a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800675c:	e009      	b.n	8006772 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800675e:	4b28      	ldr	r3, [pc, #160]	; (8006800 <xPortStartScheduler+0xd8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3b01      	subs	r3, #1
 8006764:	4a26      	ldr	r2, [pc, #152]	; (8006800 <xPortStartScheduler+0xd8>)
 8006766:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	b2db      	uxtb	r3, r3
 8006770:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	b2db      	uxtb	r3, r3
 8006776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677a:	2b80      	cmp	r3, #128	; 0x80
 800677c:	d0ef      	beq.n	800675e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800677e:	4b20      	ldr	r3, [pc, #128]	; (8006800 <xPortStartScheduler+0xd8>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f1c3 0307 	rsb	r3, r3, #7
 8006786:	2b04      	cmp	r3, #4
 8006788:	d00a      	beq.n	80067a0 <xPortStartScheduler+0x78>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	60bb      	str	r3, [r7, #8]
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067a0:	4b17      	ldr	r3, [pc, #92]	; (8006800 <xPortStartScheduler+0xd8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	4a16      	ldr	r2, [pc, #88]	; (8006800 <xPortStartScheduler+0xd8>)
 80067a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067aa:	4b15      	ldr	r3, [pc, #84]	; (8006800 <xPortStartScheduler+0xd8>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067b2:	4a13      	ldr	r2, [pc, #76]	; (8006800 <xPortStartScheduler+0xd8>)
 80067b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067be:	4b11      	ldr	r3, [pc, #68]	; (8006804 <xPortStartScheduler+0xdc>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a10      	ldr	r2, [pc, #64]	; (8006804 <xPortStartScheduler+0xdc>)
 80067c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067ca:	4b0e      	ldr	r3, [pc, #56]	; (8006804 <xPortStartScheduler+0xdc>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a0d      	ldr	r2, [pc, #52]	; (8006804 <xPortStartScheduler+0xdc>)
 80067d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067d6:	f000 f8b9 	bl	800694c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067da:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <xPortStartScheduler+0xe0>)
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067e0:	f7ff ff92 	bl	8006708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067e4:	f7ff fbda 	bl	8005f9c <vTaskSwitchContext>
	prvTaskExitError();
 80067e8:	f7ff ff4c 	bl	8006684 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	e000e400 	.word	0xe000e400
 80067fc:	200005d0 	.word	0x200005d0
 8006800:	200005d4 	.word	0x200005d4
 8006804:	e000ed20 	.word	0xe000ed20
 8006808:	2000000c 	.word	0x2000000c

0800680c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	607b      	str	r3, [r7, #4]
}
 8006824:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006826:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <vPortEnterCritical+0x58>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3301      	adds	r3, #1
 800682c:	4a0d      	ldr	r2, [pc, #52]	; (8006864 <vPortEnterCritical+0x58>)
 800682e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006830:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <vPortEnterCritical+0x58>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d10f      	bne.n	8006858 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006838:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <vPortEnterCritical+0x5c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <vPortEnterCritical+0x4c>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	603b      	str	r3, [r7, #0]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <vPortEnterCritical+0x4a>
	}
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	2000000c 	.word	0x2000000c
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006872:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <vPortExitCritical+0x4c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <vPortExitCritical+0x24>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	607b      	str	r3, [r7, #4]
}
 800688c:	bf00      	nop
 800688e:	e7fe      	b.n	800688e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006890:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <vPortExitCritical+0x4c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3b01      	subs	r3, #1
 8006896:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <vPortExitCritical+0x4c>)
 8006898:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800689a:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <vPortExitCritical+0x4c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <vPortExitCritical+0x42>
 80068a2:	2300      	movs	r3, #0
 80068a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	f383 8811 	msr	BASEPRI, r3
}
 80068ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr
 80068b8:	2000000c 	.word	0x2000000c
 80068bc:	00000000 	.word	0x00000000

080068c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068c0:	f3ef 8009 	mrs	r0, PSP
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <pxCurrentTCBConst>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068d0:	6010      	str	r0, [r2, #0]
 80068d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80068d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068da:	f380 8811 	msr	BASEPRI, r0
 80068de:	f7ff fb5d 	bl	8005f9c <vTaskSwitchContext>
 80068e2:	f04f 0000 	mov.w	r0, #0
 80068e6:	f380 8811 	msr	BASEPRI, r0
 80068ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80068ee:	6819      	ldr	r1, [r3, #0]
 80068f0:	6808      	ldr	r0, [r1, #0]
 80068f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068f6:	f380 8809 	msr	PSP, r0
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	4770      	bx	lr

08006900 <pxCurrentTCBConst>:
 8006900:	200004a4 	.word	0x200004a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	607b      	str	r3, [r7, #4]
}
 8006920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006922:	f7ff fa7d 	bl	8005e20 <xTaskIncrementTick>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <SysTick_Handler+0x40>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	2300      	movs	r3, #0
 8006936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	f383 8811 	msr	BASEPRI, r3
}
 800693e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <vPortSetupTimerInterrupt+0x30>)
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006956:	4b0a      	ldr	r3, [pc, #40]	; (8006980 <vPortSetupTimerInterrupt+0x34>)
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800695c:	4b09      	ldr	r3, [pc, #36]	; (8006984 <vPortSetupTimerInterrupt+0x38>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a09      	ldr	r2, [pc, #36]	; (8006988 <vPortSetupTimerInterrupt+0x3c>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	099b      	lsrs	r3, r3, #6
 8006968:	4a08      	ldr	r2, [pc, #32]	; (800698c <vPortSetupTimerInterrupt+0x40>)
 800696a:	3b01      	subs	r3, #1
 800696c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800696e:	4b03      	ldr	r3, [pc, #12]	; (800697c <vPortSetupTimerInterrupt+0x30>)
 8006970:	2207      	movs	r2, #7
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr
 800697c:	e000e010 	.word	0xe000e010
 8006980:	e000e018 	.word	0xe000e018
 8006984:	20000000 	.word	0x20000000
 8006988:	10624dd3 	.word	0x10624dd3
 800698c:	e000e014 	.word	0xe000e014

08006990 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006996:	f3ef 8305 	mrs	r3, IPSR
 800699a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b0f      	cmp	r3, #15
 80069a0:	d914      	bls.n	80069cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069a2:	4a16      	ldr	r2, [pc, #88]	; (80069fc <vPortValidateInterruptPriority+0x6c>)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069ac:	4b14      	ldr	r3, [pc, #80]	; (8006a00 <vPortValidateInterruptPriority+0x70>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	7afa      	ldrb	r2, [r7, #11]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d20a      	bcs.n	80069cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	607b      	str	r3, [r7, #4]
}
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069cc:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <vPortValidateInterruptPriority+0x74>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069d4:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <vPortValidateInterruptPriority+0x78>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d90a      	bls.n	80069f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	603b      	str	r3, [r7, #0]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <vPortValidateInterruptPriority+0x60>
	}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr
 80069fc:	e000e3f0 	.word	0xe000e3f0
 8006a00:	200005d0 	.word	0x200005d0
 8006a04:	e000ed0c 	.word	0xe000ed0c
 8006a08:	200005d4 	.word	0x200005d4

08006a0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08a      	sub	sp, #40	; 0x28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a18:	f7ff f958 	bl	8005ccc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a1c:	4b58      	ldr	r3, [pc, #352]	; (8006b80 <pvPortMalloc+0x174>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a24:	f000 f910 	bl	8006c48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a28:	4b56      	ldr	r3, [pc, #344]	; (8006b84 <pvPortMalloc+0x178>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f040 808e 	bne.w	8006b52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01d      	beq.n	8006a78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4413      	add	r3, r2
 8006a42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d014      	beq.n	8006a78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f023 0307 	bic.w	r3, r3, #7
 8006a54:	3308      	adds	r3, #8
 8006a56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <pvPortMalloc+0x6c>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	617b      	str	r3, [r7, #20]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d069      	beq.n	8006b52 <pvPortMalloc+0x146>
 8006a7e:	4b42      	ldr	r3, [pc, #264]	; (8006b88 <pvPortMalloc+0x17c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d864      	bhi.n	8006b52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a88:	4b40      	ldr	r3, [pc, #256]	; (8006b8c <pvPortMalloc+0x180>)
 8006a8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a8c:	4b3f      	ldr	r3, [pc, #252]	; (8006b8c <pvPortMalloc+0x180>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a92:	e004      	b.n	8006a9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d903      	bls.n	8006ab0 <pvPortMalloc+0xa4>
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1f1      	bne.n	8006a94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ab0:	4b33      	ldr	r3, [pc, #204]	; (8006b80 <pvPortMalloc+0x174>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d04b      	beq.n	8006b52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2208      	movs	r2, #8
 8006ac0:	4413      	add	r3, r2
 8006ac2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	1ad2      	subs	r2, r2, r3
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d91f      	bls.n	8006b1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <pvPortMalloc+0xf8>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	613b      	str	r3, [r7, #16]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	1ad2      	subs	r2, r2, r3
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b16:	69b8      	ldr	r0, [r7, #24]
 8006b18:	f000 f8f8 	bl	8006d0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b1c:	4b1a      	ldr	r3, [pc, #104]	; (8006b88 <pvPortMalloc+0x17c>)
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	4a18      	ldr	r2, [pc, #96]	; (8006b88 <pvPortMalloc+0x17c>)
 8006b28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b2a:	4b17      	ldr	r3, [pc, #92]	; (8006b88 <pvPortMalloc+0x17c>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	4b18      	ldr	r3, [pc, #96]	; (8006b90 <pvPortMalloc+0x184>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d203      	bcs.n	8006b3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b36:	4b14      	ldr	r3, [pc, #80]	; (8006b88 <pvPortMalloc+0x17c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a15      	ldr	r2, [pc, #84]	; (8006b90 <pvPortMalloc+0x184>)
 8006b3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	4b10      	ldr	r3, [pc, #64]	; (8006b84 <pvPortMalloc+0x178>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b52:	f7ff f8c9 	bl	8005ce8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00a      	beq.n	8006b76 <pvPortMalloc+0x16a>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	60fb      	str	r3, [r7, #12]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <pvPortMalloc+0x168>
	return pvReturn;
 8006b76:	69fb      	ldr	r3, [r7, #28]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3728      	adds	r7, #40	; 0x28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	200011e0 	.word	0x200011e0
 8006b84:	200011ec 	.word	0x200011ec
 8006b88:	200011e4 	.word	0x200011e4
 8006b8c:	200011d8 	.word	0x200011d8
 8006b90:	200011e8 	.word	0x200011e8

08006b94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d048      	beq.n	8006c38 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	425b      	negs	r3, r3
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	4413      	add	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	4b21      	ldr	r3, [pc, #132]	; (8006c40 <vPortFree+0xac>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <vPortFree+0x44>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	60fb      	str	r3, [r7, #12]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <vPortFree+0x62>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	60bb      	str	r3, [r7, #8]
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	4b11      	ldr	r3, [pc, #68]	; (8006c40 <vPortFree+0xac>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d019      	beq.n	8006c38 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d115      	bne.n	8006c38 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <vPortFree+0xac>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	43db      	mvns	r3, r3
 8006c16:	401a      	ands	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c1c:	f7ff f856 	bl	8005ccc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	4b07      	ldr	r3, [pc, #28]	; (8006c44 <vPortFree+0xb0>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4413      	add	r3, r2
 8006c2a:	4a06      	ldr	r2, [pc, #24]	; (8006c44 <vPortFree+0xb0>)
 8006c2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c2e:	6938      	ldr	r0, [r7, #16]
 8006c30:	f000 f86c 	bl	8006d0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c34:	f7ff f858 	bl	8005ce8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c38:	bf00      	nop
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	200011ec 	.word	0x200011ec
 8006c44:	200011e4 	.word	0x200011e4

08006c48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c54:	4b27      	ldr	r3, [pc, #156]	; (8006cf4 <prvHeapInit+0xac>)
 8006c56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f003 0307 	and.w	r3, r3, #7
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00c      	beq.n	8006c7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3307      	adds	r3, #7
 8006c66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0307 	bic.w	r3, r3, #7
 8006c6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	4a1f      	ldr	r2, [pc, #124]	; (8006cf4 <prvHeapInit+0xac>)
 8006c78:	4413      	add	r3, r2
 8006c7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c80:	4a1d      	ldr	r2, [pc, #116]	; (8006cf8 <prvHeapInit+0xb0>)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c86:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <prvHeapInit+0xb0>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	4413      	add	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c94:	2208      	movs	r2, #8
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1a9b      	subs	r3, r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0307 	bic.w	r3, r3, #7
 8006ca2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <prvHeapInit+0xb4>)
 8006ca8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006caa:	4b14      	ldr	r3, [pc, #80]	; (8006cfc <prvHeapInit+0xb4>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cb2:	4b12      	ldr	r3, [pc, #72]	; (8006cfc <prvHeapInit+0xb4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	1ad2      	subs	r2, r2, r3
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006cc8:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <prvHeapInit+0xb4>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	4a0a      	ldr	r2, [pc, #40]	; (8006d00 <prvHeapInit+0xb8>)
 8006cd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	4a09      	ldr	r2, [pc, #36]	; (8006d04 <prvHeapInit+0xbc>)
 8006cde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ce0:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <prvHeapInit+0xc0>)
 8006ce2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ce6:	601a      	str	r2, [r3, #0]
}
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	200005d8 	.word	0x200005d8
 8006cf8:	200011d8 	.word	0x200011d8
 8006cfc:	200011e0 	.word	0x200011e0
 8006d00:	200011e8 	.word	0x200011e8
 8006d04:	200011e4 	.word	0x200011e4
 8006d08:	200011ec 	.word	0x200011ec

08006d0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d14:	4b27      	ldr	r3, [pc, #156]	; (8006db4 <prvInsertBlockIntoFreeList+0xa8>)
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	e002      	b.n	8006d20 <prvInsertBlockIntoFreeList+0x14>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d8f7      	bhi.n	8006d1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	4413      	add	r3, r2
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d108      	bne.n	8006d4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	441a      	add	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	441a      	add	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d118      	bne.n	8006d94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <prvInsertBlockIntoFreeList+0xac>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d00d      	beq.n	8006d8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	441a      	add	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	e008      	b.n	8006d9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d8a:	4b0b      	ldr	r3, [pc, #44]	; (8006db8 <prvInsertBlockIntoFreeList+0xac>)
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	e003      	b.n	8006d9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d002      	beq.n	8006daa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr
 8006db4:	200011d8 	.word	0x200011d8
 8006db8:	200011e0 	.word	0x200011e0

08006dbc <__libc_init_array>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	4d0c      	ldr	r5, [pc, #48]	; (8006df4 <__libc_init_array+0x38>)
 8006dc2:	4c0d      	ldr	r4, [pc, #52]	; (8006df8 <__libc_init_array+0x3c>)
 8006dc4:	1b64      	subs	r4, r4, r5
 8006dc6:	10a4      	asrs	r4, r4, #2
 8006dc8:	42a6      	cmp	r6, r4
 8006dca:	d109      	bne.n	8006de0 <__libc_init_array+0x24>
 8006dcc:	f000 f830 	bl	8006e30 <_init>
 8006dd0:	2600      	movs	r6, #0
 8006dd2:	4d0a      	ldr	r5, [pc, #40]	; (8006dfc <__libc_init_array+0x40>)
 8006dd4:	4c0a      	ldr	r4, [pc, #40]	; (8006e00 <__libc_init_array+0x44>)
 8006dd6:	1b64      	subs	r4, r4, r5
 8006dd8:	10a4      	asrs	r4, r4, #2
 8006dda:	42a6      	cmp	r6, r4
 8006ddc:	d105      	bne.n	8006dea <__libc_init_array+0x2e>
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de4:	4798      	blx	r3
 8006de6:	3601      	adds	r6, #1
 8006de8:	e7ee      	b.n	8006dc8 <__libc_init_array+0xc>
 8006dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dee:	4798      	blx	r3
 8006df0:	3601      	adds	r6, #1
 8006df2:	e7f2      	b.n	8006dda <__libc_init_array+0x1e>
 8006df4:	08006fb0 	.word	0x08006fb0
 8006df8:	08006fb0 	.word	0x08006fb0
 8006dfc:	08006fb0 	.word	0x08006fb0
 8006e00:	08006fb4 	.word	0x08006fb4

08006e04 <memcpy>:
 8006e04:	440a      	add	r2, r1
 8006e06:	4291      	cmp	r1, r2
 8006e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e0c:	d100      	bne.n	8006e10 <memcpy+0xc>
 8006e0e:	4770      	bx	lr
 8006e10:	b510      	push	{r4, lr}
 8006e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e16:	4291      	cmp	r1, r2
 8006e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e1c:	d1f9      	bne.n	8006e12 <memcpy+0xe>
 8006e1e:	bd10      	pop	{r4, pc}

08006e20 <memset>:
 8006e20:	4603      	mov	r3, r0
 8006e22:	4402      	add	r2, r0
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d100      	bne.n	8006e2a <memset+0xa>
 8006e28:	4770      	bx	lr
 8006e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e2e:	e7f9      	b.n	8006e24 <memset+0x4>

08006e30 <_init>:
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e32:	bf00      	nop
 8006e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e36:	bc08      	pop	{r3}
 8006e38:	469e      	mov	lr, r3
 8006e3a:	4770      	bx	lr

08006e3c <_fini>:
 8006e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3e:	bf00      	nop
 8006e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e42:	bc08      	pop	{r3}
 8006e44:	469e      	mov	lr, r3
 8006e46:	4770      	bx	lr
